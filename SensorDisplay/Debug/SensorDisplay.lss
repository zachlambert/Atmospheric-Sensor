
SensorDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002862  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00002862  000028f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008000a4  008000a4  0000293a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000293a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002998  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000029d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033e5  00000000  00000000  00002bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6b  00000000  00000000  00005fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000145b  00000000  00000000  00006c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000800  00000000  00000000  000080a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bfc  00000000  00000000  000088a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003292  00000000  00000000  0000949c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000c72e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3b       	cpi	r26, 0xBA	; 186
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <main>
      8a:	0c 94 2f 14 	jmp	0x285e	; 0x285e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <null_ptr_check>:
		if (rslt == BME280_OK)
			parse_device_settings(reg_data, &dev->settings);
	}

	return rslt;
}
      92:	fc 01       	movw	r30, r24
      94:	89 2b       	or	r24, r25
      96:	81 f0       	breq	.+32     	; 0xb8 <null_ptr_check+0x26>
      98:	83 81       	ldd	r24, Z+3	; 0x03
      9a:	94 81       	ldd	r25, Z+4	; 0x04
      9c:	89 2b       	or	r24, r25
      9e:	71 f0       	breq	.+28     	; 0xbc <null_ptr_check+0x2a>
      a0:	85 81       	ldd	r24, Z+5	; 0x05
      a2:	96 81       	ldd	r25, Z+6	; 0x06
      a4:	89 2b       	or	r24, r25
      a6:	61 f0       	breq	.+24     	; 0xc0 <null_ptr_check+0x2e>
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	27 81       	ldd	r18, Z+7	; 0x07
      ac:	30 85       	ldd	r19, Z+8	; 0x08
      ae:	23 2b       	or	r18, r19
      b0:	09 f0       	breq	.+2      	; 0xb4 <null_ptr_check+0x22>
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	81 95       	neg	r24
      b6:	08 95       	ret
      b8:	8f ef       	ldi	r24, 0xFF	; 255
      ba:	08 95       	ret
      bc:	8f ef       	ldi	r24, 0xFF	; 255
      be:	08 95       	ret
      c0:	8f ef       	ldi	r24, 0xFF	; 255
      c2:	08 95       	ret

000000c4 <bme280_get_regs>:
      c4:	cf 92       	push	r12
      c6:	df 92       	push	r13
      c8:	ef 92       	push	r14
      ca:	ff 92       	push	r15
      cc:	1f 93       	push	r17
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	18 2f       	mov	r17, r24
      d4:	7b 01       	movw	r14, r22
      d6:	6a 01       	movw	r12, r20
      d8:	e9 01       	movw	r28, r18
      da:	c9 01       	movw	r24, r18
      dc:	0e 94 49 00 	call	0x92	; 0x92 <null_ptr_check>
      e0:	81 11       	cpse	r24, r1
      e2:	0d c0       	rjmp	.+26     	; 0xfe <bme280_get_regs+0x3a>
      e4:	8a 81       	ldd	r24, Y+2	; 0x02
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	09 f0       	breq	.+2      	; 0xec <bme280_get_regs+0x28>
      ea:	10 68       	ori	r17, 0x80	; 128
      ec:	eb 81       	ldd	r30, Y+3	; 0x03
      ee:	fc 81       	ldd	r31, Y+4	; 0x04
      f0:	96 01       	movw	r18, r12
      f2:	a7 01       	movw	r20, r14
      f4:	61 2f       	mov	r22, r17
      f6:	89 81       	ldd	r24, Y+1	; 0x01
      f8:	09 95       	icall
      fa:	81 11       	cpse	r24, r1
      fc:	8c ef       	ldi	r24, 0xFC	; 252
      fe:	df 91       	pop	r29
     100:	cf 91       	pop	r28
     102:	1f 91       	pop	r17
     104:	ff 90       	pop	r15
     106:	ef 90       	pop	r14
     108:	df 90       	pop	r13
     10a:	cf 90       	pop	r12
     10c:	08 95       	ret

0000010e <bme280_set_regs>:
     10e:	bf 92       	push	r11
     110:	cf 92       	push	r12
     112:	df 92       	push	r13
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	64 97       	sbiw	r28, 0x14	; 20
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	f8 94       	cli
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	0f be       	out	0x3f, r0	; 63
     12e:	cd bf       	out	0x3d, r28	; 61
     130:	6c 01       	movw	r12, r24
     132:	8b 01       	movw	r16, r22
     134:	79 01       	movw	r14, r18
     136:	b4 2e       	mov	r11, r20
     138:	8a e0       	ldi	r24, 0x0A	; 10
     13a:	84 17       	cp	r24, r20
     13c:	20 f4       	brcc	.+8      	; 0x146 <bme280_set_regs+0x38>
     13e:	0f 2e       	mov	r0, r31
     140:	fa e0       	ldi	r31, 0x0A	; 10
     142:	bf 2e       	mov	r11, r31
     144:	f0 2d       	mov	r31, r0
     146:	c7 01       	movw	r24, r14
     148:	0e 94 49 00 	call	0x92	; 0x92 <null_ptr_check>
     14c:	81 11       	cpse	r24, r1
     14e:	53 c0       	rjmp	.+166    	; 0x1f6 <bme280_set_regs+0xe8>
     150:	c1 14       	cp	r12, r1
     152:	d1 04       	cpc	r13, r1
     154:	09 f4       	brne	.+2      	; 0x158 <bme280_set_regs+0x4a>
     156:	51 c0       	rjmp	.+162    	; 0x1fa <bme280_set_regs+0xec>
     158:	01 15       	cp	r16, r1
     15a:	11 05       	cpc	r17, r1
     15c:	09 f4       	brne	.+2      	; 0x160 <bme280_set_regs+0x52>
     15e:	4f c0       	rjmp	.+158    	; 0x1fe <bme280_set_regs+0xf0>
     160:	bb 20       	and	r11, r11
     162:	09 f4       	brne	.+2      	; 0x166 <bme280_set_regs+0x58>
     164:	4e c0       	rjmp	.+156    	; 0x202 <bme280_set_regs+0xf4>
     166:	d8 01       	movw	r26, r16
     168:	8c 91       	ld	r24, X
     16a:	89 83       	std	Y+1, r24	; 0x01
     16c:	f7 01       	movw	r30, r14
     16e:	82 81       	ldd	r24, Z+2	; 0x02
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	09 f4       	brne	.+2      	; 0x176 <bme280_set_regs+0x68>
     174:	48 c0       	rjmp	.+144    	; 0x206 <bme280_set_regs+0xf8>
     176:	f6 01       	movw	r30, r12
     178:	2f ef       	ldi	r18, 0xFF	; 255
     17a:	2b 0d       	add	r18, r11
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	2f 5f       	subi	r18, 0xFF	; 255
     180:	3f 4f       	sbci	r19, 0xFF	; 255
     182:	2c 0d       	add	r18, r12
     184:	3d 1d       	adc	r19, r13
     186:	80 81       	ld	r24, Z
     188:	8f 77       	andi	r24, 0x7F	; 127
     18a:	81 93       	st	Z+, r24
     18c:	e2 17       	cp	r30, r18
     18e:	f3 07       	cpc	r31, r19
     190:	d1 f7       	brne	.-12     	; 0x186 <bme280_set_regs+0x78>
     192:	f1 e0       	ldi	r31, 0x01	; 1
     194:	fb 15       	cp	r31, r11
     196:	d8 f4       	brcc	.+54     	; 0x1ce <bme280_set_regs+0xc0>
     198:	96 01       	movw	r18, r12
     19a:	2f 5f       	subi	r18, 0xFF	; 255
     19c:	3f 4f       	sbci	r19, 0xFF	; 255
     19e:	fe 01       	movw	r30, r28
     1a0:	31 96       	adiw	r30, 0x01	; 1
     1a2:	0f 5f       	subi	r16, 0xFF	; 255
     1a4:	1f 4f       	sbci	r17, 0xFF	; 255
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	d9 01       	movw	r26, r18
     1aa:	9d 91       	ld	r25, X+
     1ac:	9d 01       	movw	r18, r26
     1ae:	91 83       	std	Z+1, r25	; 0x01
     1b0:	d8 01       	movw	r26, r16
     1b2:	9d 91       	ld	r25, X+
     1b4:	8d 01       	movw	r16, r26
     1b6:	92 83       	std	Z+2, r25	; 0x02
     1b8:	8f 5f       	subi	r24, 0xFF	; 255
     1ba:	32 96       	adiw	r30, 0x02	; 2
     1bc:	8b 15       	cp	r24, r11
     1be:	a0 f3       	brcs	.-24     	; 0x1a8 <bme280_set_regs+0x9a>
     1c0:	2b 2d       	mov	r18, r11
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	22 0f       	add	r18, r18
     1c6:	33 1f       	adc	r19, r19
     1c8:	21 50       	subi	r18, 0x01	; 1
     1ca:	31 09       	sbc	r19, r1
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <bme280_set_regs+0xc4>
     1ce:	2b 2d       	mov	r18, r11
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	d7 01       	movw	r26, r14
     1d4:	15 96       	adiw	r26, 0x05	; 5
     1d6:	ed 91       	ld	r30, X+
     1d8:	fc 91       	ld	r31, X
     1da:	16 97       	sbiw	r26, 0x06	; 6
     1dc:	ae 01       	movw	r20, r28
     1de:	4f 5f       	subi	r20, 0xFF	; 255
     1e0:	5f 4f       	sbci	r21, 0xFF	; 255
     1e2:	d6 01       	movw	r26, r12
     1e4:	6c 91       	ld	r22, X
     1e6:	d7 01       	movw	r26, r14
     1e8:	11 96       	adiw	r26, 0x01	; 1
     1ea:	8c 91       	ld	r24, X
     1ec:	09 95       	icall
     1ee:	88 23       	and	r24, r24
     1f0:	71 f0       	breq	.+28     	; 0x20e <bme280_set_regs+0x100>
     1f2:	8c ef       	ldi	r24, 0xFC	; 252
     1f4:	0c c0       	rjmp	.+24     	; 0x20e <bme280_set_regs+0x100>
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	0a c0       	rjmp	.+20     	; 0x20e <bme280_set_regs+0x100>
     1fa:	8f ef       	ldi	r24, 0xFF	; 255
     1fc:	08 c0       	rjmp	.+16     	; 0x20e <bme280_set_regs+0x100>
     1fe:	8f ef       	ldi	r24, 0xFF	; 255
     200:	06 c0       	rjmp	.+12     	; 0x20e <bme280_set_regs+0x100>
     202:	8d ef       	ldi	r24, 0xFD	; 253
     204:	04 c0       	rjmp	.+8      	; 0x20e <bme280_set_regs+0x100>
     206:	b1 e0       	ldi	r27, 0x01	; 1
     208:	bb 15       	cp	r27, r11
     20a:	30 f2       	brcs	.-116    	; 0x198 <bme280_set_regs+0x8a>
     20c:	e0 cf       	rjmp	.-64     	; 0x1ce <bme280_set_regs+0xc0>
     20e:	64 96       	adiw	r28, 0x14	; 20
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
     220:	0f 91       	pop	r16
     222:	ff 90       	pop	r15
     224:	ef 90       	pop	r14
     226:	df 90       	pop	r13
     228:	cf 90       	pop	r12
     22a:	bf 90       	pop	r11
     22c:	08 95       	ret

0000022e <set_osr_settings>:
     22e:	cf 92       	push	r12
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	00 d0       	rcall	.+0      	; 0x23e <set_osr_settings+0x10>
     23e:	1f 92       	push	r1
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	18 2f       	mov	r17, r24
     246:	6b 01       	movw	r12, r22
     248:	7a 01       	movw	r14, r20
     24a:	82 ff       	sbrs	r24, 2
     24c:	27 c0       	rjmp	.+78     	; 0x29c <set_osr_settings+0x6e>
     24e:	82 ef       	ldi	r24, 0xF2	; 242
     250:	89 83       	std	Y+1, r24	; 0x01
     252:	fb 01       	movw	r30, r22
     254:	82 81       	ldd	r24, Z+2	; 0x02
     256:	87 70       	andi	r24, 0x07	; 7
     258:	8b 83       	std	Y+3, r24	; 0x03
     25a:	9a 01       	movw	r18, r20
     25c:	41 e0       	ldi	r20, 0x01	; 1
     25e:	be 01       	movw	r22, r28
     260:	6d 5f       	subi	r22, 0xFD	; 253
     262:	7f 4f       	sbci	r23, 0xFF	; 255
     264:	ce 01       	movw	r24, r28
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	0e 94 87 00 	call	0x10e	; 0x10e <bme280_set_regs>
     26c:	81 11       	cpse	r24, r1
     26e:	17 c0       	rjmp	.+46     	; 0x29e <set_osr_settings+0x70>
     270:	84 ef       	ldi	r24, 0xF4	; 244
     272:	89 83       	std	Y+1, r24	; 0x01
     274:	97 01       	movw	r18, r14
     276:	41 e0       	ldi	r20, 0x01	; 1
     278:	50 e0       	ldi	r21, 0x00	; 0
     27a:	be 01       	movw	r22, r28
     27c:	6e 5f       	subi	r22, 0xFE	; 254
     27e:	7f 4f       	sbci	r23, 0xFF	; 255
     280:	0e 94 62 00 	call	0xc4	; 0xc4 <bme280_get_regs>
     284:	81 11       	cpse	r24, r1
     286:	0b c0       	rjmp	.+22     	; 0x29e <set_osr_settings+0x70>
     288:	97 01       	movw	r18, r14
     28a:	41 e0       	ldi	r20, 0x01	; 1
     28c:	be 01       	movw	r22, r28
     28e:	6e 5f       	subi	r22, 0xFE	; 254
     290:	7f 4f       	sbci	r23, 0xFF	; 255
     292:	ce 01       	movw	r24, r28
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	0e 94 87 00 	call	0x10e	; 0x10e <bme280_set_regs>
     29a:	01 c0       	rjmp	.+2      	; 0x29e <set_osr_settings+0x70>
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	91 2f       	mov	r25, r17
     2a0:	93 70       	andi	r25, 0x03	; 3
     2a2:	71 f1       	breq	.+92     	; 0x300 <set_osr_settings+0xd2>
     2a4:	84 ef       	ldi	r24, 0xF4	; 244
     2a6:	8a 83       	std	Y+2, r24	; 0x02
     2a8:	97 01       	movw	r18, r14
     2aa:	41 e0       	ldi	r20, 0x01	; 1
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	be 01       	movw	r22, r28
     2b0:	6f 5f       	subi	r22, 0xFF	; 255
     2b2:	7f 4f       	sbci	r23, 0xFF	; 255
     2b4:	0e 94 62 00 	call	0xc4	; 0xc4 <bme280_get_regs>
     2b8:	81 11       	cpse	r24, r1
     2ba:	22 c0       	rjmp	.+68     	; 0x300 <set_osr_settings+0xd2>
     2bc:	10 ff       	sbrs	r17, 0
     2be:	0a c0       	rjmp	.+20     	; 0x2d4 <set_osr_settings+0xa6>
     2c0:	f6 01       	movw	r30, r12
     2c2:	80 81       	ld	r24, Z
     2c4:	88 0f       	add	r24, r24
     2c6:	88 0f       	add	r24, r24
     2c8:	98 2f       	mov	r25, r24
     2ca:	9c 71       	andi	r25, 0x1C	; 28
     2cc:	89 81       	ldd	r24, Y+1	; 0x01
     2ce:	83 7e       	andi	r24, 0xE3	; 227
     2d0:	89 2b       	or	r24, r25
     2d2:	89 83       	std	Y+1, r24	; 0x01
     2d4:	11 ff       	sbrs	r17, 1
     2d6:	0b c0       	rjmp	.+22     	; 0x2ee <set_osr_settings+0xc0>
     2d8:	89 81       	ldd	r24, Y+1	; 0x01
     2da:	28 2f       	mov	r18, r24
     2dc:	2f 71       	andi	r18, 0x1F	; 31
     2de:	f6 01       	movw	r30, r12
     2e0:	91 81       	ldd	r25, Z+1	; 0x01
     2e2:	f0 e2       	ldi	r31, 0x20	; 32
     2e4:	9f 9f       	mul	r25, r31
     2e6:	c0 01       	movw	r24, r0
     2e8:	11 24       	eor	r1, r1
     2ea:	82 2b       	or	r24, r18
     2ec:	89 83       	std	Y+1, r24	; 0x01
     2ee:	97 01       	movw	r18, r14
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	ce 01       	movw	r24, r28
     2fa:	02 96       	adiw	r24, 0x02	; 2
     2fc:	0e 94 87 00 	call	0x10e	; 0x10e <bme280_set_regs>
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	df 90       	pop	r13
     312:	cf 90       	pop	r12
     314:	08 95       	ret

00000316 <set_filter_standby_settings>:
     316:	cf 92       	push	r12
     318:	df 92       	push	r13
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	00 d0       	rcall	.+0      	; 0x326 <set_filter_standby_settings+0x10>
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	f8 2e       	mov	r15, r24
     32c:	6b 01       	movw	r12, r22
     32e:	8a 01       	movw	r16, r20
     330:	85 ef       	ldi	r24, 0xF5	; 245
     332:	89 83       	std	Y+1, r24	; 0x01
     334:	9a 01       	movw	r18, r20
     336:	41 e0       	ldi	r20, 0x01	; 1
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	be 01       	movw	r22, r28
     33c:	6e 5f       	subi	r22, 0xFE	; 254
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	0e 94 62 00 	call	0xc4	; 0xc4 <bme280_get_regs>
     344:	81 11       	cpse	r24, r1
     346:	22 c0       	rjmp	.+68     	; 0x38c <set_filter_standby_settings+0x76>
     348:	f3 fe       	sbrs	r15, 3
     34a:	0a c0       	rjmp	.+20     	; 0x360 <set_filter_standby_settings+0x4a>
     34c:	f6 01       	movw	r30, r12
     34e:	83 81       	ldd	r24, Z+3	; 0x03
     350:	88 0f       	add	r24, r24
     352:	88 0f       	add	r24, r24
     354:	98 2f       	mov	r25, r24
     356:	9c 71       	andi	r25, 0x1C	; 28
     358:	8a 81       	ldd	r24, Y+2	; 0x02
     35a:	83 7e       	andi	r24, 0xE3	; 227
     35c:	89 2b       	or	r24, r25
     35e:	8a 83       	std	Y+2, r24	; 0x02
     360:	f4 fe       	sbrs	r15, 4
     362:	0b c0       	rjmp	.+22     	; 0x37a <set_filter_standby_settings+0x64>
     364:	8a 81       	ldd	r24, Y+2	; 0x02
     366:	28 2f       	mov	r18, r24
     368:	2f 71       	andi	r18, 0x1F	; 31
     36a:	f6 01       	movw	r30, r12
     36c:	94 81       	ldd	r25, Z+4	; 0x04
     36e:	f0 e2       	ldi	r31, 0x20	; 32
     370:	9f 9f       	mul	r25, r31
     372:	c0 01       	movw	r24, r0
     374:	11 24       	eor	r1, r1
     376:	82 2b       	or	r24, r18
     378:	8a 83       	std	Y+2, r24	; 0x02
     37a:	98 01       	movw	r18, r16
     37c:	41 e0       	ldi	r20, 0x01	; 1
     37e:	be 01       	movw	r22, r28
     380:	6e 5f       	subi	r22, 0xFE	; 254
     382:	7f 4f       	sbci	r23, 0xFF	; 255
     384:	ce 01       	movw	r24, r28
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	0e 94 87 00 	call	0x10e	; 0x10e <bme280_set_regs>
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	08 95       	ret

000003a0 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	8c 01       	movw	r16, r24
     3aa:	eb 01       	movw	r28, r22
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     3ac:	cb 01       	movw	r24, r22
     3ae:	0e 94 49 00 	call	0x92	; 0x92 <null_ptr_check>

	if (rslt == BME280_OK) {
     3b2:	81 11       	cpse	r24, r1
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <bme280_get_sensor_mode+0x2c>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
     3b6:	9e 01       	movw	r18, r28
     3b8:	41 e0       	ldi	r20, 0x01	; 1
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	b8 01       	movw	r22, r16
     3be:	84 ef       	ldi	r24, 0xF4	; 244
     3c0:	0e 94 62 00 	call	0xc4	; 0xc4 <bme280_get_regs>
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
     3c4:	f8 01       	movw	r30, r16
     3c6:	90 81       	ld	r25, Z
     3c8:	93 70       	andi	r25, 0x03	; 3
     3ca:	90 83       	st	Z, r25
	}

	return rslt;
}
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <bme280_soft_reset+0xc>
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	7c 01       	movw	r14, r24
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
     3e8:	80 ee       	ldi	r24, 0xE0	; 224
     3ea:	89 83       	std	Y+1, r24	; 0x01
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
     3ec:	86 eb       	ldi	r24, 0xB6	; 182
     3ee:	8a 83       	std	Y+2, r24	; 0x02

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     3f0:	c7 01       	movw	r24, r14
     3f2:	0e 94 49 00 	call	0x92	; 0x92 <null_ptr_check>
     3f6:	18 2f       	mov	r17, r24
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
     3f8:	81 11       	cpse	r24, r1
     3fa:	14 c0       	rjmp	.+40     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
     3fc:	97 01       	movw	r18, r14
     3fe:	41 e0       	ldi	r20, 0x01	; 1
     400:	be 01       	movw	r22, r28
     402:	6e 5f       	subi	r22, 0xFE	; 254
     404:	7f 4f       	sbci	r23, 0xFF	; 255
     406:	ce 01       	movw	r24, r28
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	0e 94 87 00 	call	0x10e	; 0x10e <bme280_set_regs>
     40e:	18 2f       	mov	r17, r24
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
     410:	d7 01       	movw	r26, r14
     412:	17 96       	adiw	r26, 0x07	; 7
     414:	ed 91       	ld	r30, X+
     416:	fc 91       	ld	r31, X
     418:	18 97       	sbiw	r26, 0x08	; 8
     41a:	62 e0       	ldi	r22, 0x02	; 2
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	09 95       	icall
	}

	return rslt;
}
     424:	81 2f       	mov	r24, r17
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	08 95       	ret

00000436 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	6b 97       	sbiw	r28, 0x1b	; 27
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	7c 01       	movw	r14, r24
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
	uint8_t chip_id = 0;
     452:	19 82       	std	Y+1, r1	; 0x01

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     454:	0e 94 49 00 	call	0x92	; 0x92 <null_ptr_check>
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
     458:	81 11       	cpse	r24, r1
     45a:	e7 c0       	rjmp	.+462    	; 0x62a <bme280_init+0x1f4>
     45c:	15 e0       	ldi	r17, 0x05	; 5
		while (try_count) {
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
     45e:	97 01       	movw	r18, r14
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	be 01       	movw	r22, r28
     466:	6f 5f       	subi	r22, 0xFF	; 255
     468:	7f 4f       	sbci	r23, 0xFF	; 255
     46a:	80 ed       	ldi	r24, 0xD0	; 208
     46c:	0e 94 62 00 	call	0xc4	; 0xc4 <bme280_get_regs>
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
     470:	81 11       	cpse	r24, r1
     472:	c9 c0       	rjmp	.+402    	; 0x606 <bme280_init+0x1d0>
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	80 36       	cpi	r24, 0x60	; 96
     478:	09 f0       	breq	.+2      	; 0x47c <bme280_init+0x46>
     47a:	c5 c0       	rjmp	.+394    	; 0x606 <bme280_init+0x1d0>
				dev->chip_id = chip_id;
     47c:	d7 01       	movw	r26, r14
     47e:	8c 93       	st	X, r24
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
     480:	c7 01       	movw	r24, r14
     482:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <bme280_soft_reset>
				if (rslt == BME280_OK) {
     486:	81 11       	cpse	r24, r1
     488:	cd c0       	rjmp	.+410    	; 0x624 <bme280_init+0x1ee>
static int8_t get_calib_data(struct bme280_dev *dev)
{
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
     48a:	be 01       	movw	r22, r28
     48c:	6e 5f       	subi	r22, 0xFE	; 254
     48e:	7f 4f       	sbci	r23, 0xFF	; 255
     490:	8a e1       	ldi	r24, 0x1A	; 26
     492:	fb 01       	movw	r30, r22
     494:	11 92       	st	Z+, r1
     496:	8a 95       	dec	r24
     498:	e9 f7       	brne	.-6      	; 0x494 <bme280_init+0x5e>

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
     49a:	97 01       	movw	r18, r14
     49c:	4a e1       	ldi	r20, 0x1A	; 26
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	88 e8       	ldi	r24, 0x88	; 136
     4a2:	0e 94 62 00 	call	0xc4	; 0xc4 <bme280_get_regs>

	if (rslt == BME280_OK) {
     4a6:	81 11       	cpse	r24, r1
     4a8:	bd c0       	rjmp	.+378    	; 0x624 <bme280_init+0x1ee>
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
	struct bme280_calib_data *calib_data = &dev->calib_data;

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
     4aa:	8b 81       	ldd	r24, Y+3	; 0x03
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	98 2f       	mov	r25, r24
     4b0:	88 27       	eor	r24, r24
     4b2:	2a 81       	ldd	r18, Y+2	; 0x02
     4b4:	82 2b       	or	r24, r18
     4b6:	d7 01       	movw	r26, r14
     4b8:	1a 96       	adiw	r26, 0x0a	; 10
     4ba:	9c 93       	st	X, r25
     4bc:	8e 93       	st	-X, r24
     4be:	19 97       	sbiw	r26, 0x09	; 9
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
     4c0:	8d 81       	ldd	r24, Y+5	; 0x05
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	98 2f       	mov	r25, r24
     4c6:	88 27       	eor	r24, r24
     4c8:	2c 81       	ldd	r18, Y+4	; 0x04
     4ca:	82 2b       	or	r24, r18
     4cc:	1c 96       	adiw	r26, 0x0c	; 12
     4ce:	9c 93       	st	X, r25
     4d0:	8e 93       	st	-X, r24
     4d2:	1b 97       	sbiw	r26, 0x0b	; 11
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
     4d4:	8f 81       	ldd	r24, Y+7	; 0x07
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	98 2f       	mov	r25, r24
     4da:	88 27       	eor	r24, r24
     4dc:	2e 81       	ldd	r18, Y+6	; 0x06
     4de:	82 2b       	or	r24, r18
     4e0:	1e 96       	adiw	r26, 0x0e	; 14
     4e2:	9c 93       	st	X, r25
     4e4:	8e 93       	st	-X, r24
     4e6:	1d 97       	sbiw	r26, 0x0d	; 13
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
     4e8:	89 85       	ldd	r24, Y+9	; 0x09
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	98 2f       	mov	r25, r24
     4ee:	88 27       	eor	r24, r24
     4f0:	28 85       	ldd	r18, Y+8	; 0x08
     4f2:	82 2b       	or	r24, r18
     4f4:	50 96       	adiw	r26, 0x10	; 16
     4f6:	9c 93       	st	X, r25
     4f8:	8e 93       	st	-X, r24
     4fa:	1f 97       	sbiw	r26, 0x0f	; 15
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
     4fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	98 2f       	mov	r25, r24
     502:	88 27       	eor	r24, r24
     504:	2a 85       	ldd	r18, Y+10	; 0x0a
     506:	82 2b       	or	r24, r18
     508:	52 96       	adiw	r26, 0x12	; 18
     50a:	9c 93       	st	X, r25
     50c:	8e 93       	st	-X, r24
     50e:	51 97       	sbiw	r26, 0x11	; 17
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
     510:	8d 85       	ldd	r24, Y+13	; 0x0d
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	98 2f       	mov	r25, r24
     516:	88 27       	eor	r24, r24
     518:	2c 85       	ldd	r18, Y+12	; 0x0c
     51a:	82 2b       	or	r24, r18
     51c:	54 96       	adiw	r26, 0x14	; 20
     51e:	9c 93       	st	X, r25
     520:	8e 93       	st	-X, r24
     522:	53 97       	sbiw	r26, 0x13	; 19
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
     524:	8f 85       	ldd	r24, Y+15	; 0x0f
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	98 2f       	mov	r25, r24
     52a:	88 27       	eor	r24, r24
     52c:	2e 85       	ldd	r18, Y+14	; 0x0e
     52e:	82 2b       	or	r24, r18
     530:	56 96       	adiw	r26, 0x16	; 22
     532:	9c 93       	st	X, r25
     534:	8e 93       	st	-X, r24
     536:	55 97       	sbiw	r26, 0x15	; 21
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
     538:	89 89       	ldd	r24, Y+17	; 0x11
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	98 2f       	mov	r25, r24
     53e:	88 27       	eor	r24, r24
     540:	28 89       	ldd	r18, Y+16	; 0x10
     542:	82 2b       	or	r24, r18
     544:	58 96       	adiw	r26, 0x18	; 24
     546:	9c 93       	st	X, r25
     548:	8e 93       	st	-X, r24
     54a:	57 97       	sbiw	r26, 0x17	; 23
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
     54c:	8b 89       	ldd	r24, Y+19	; 0x13
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	98 2f       	mov	r25, r24
     552:	88 27       	eor	r24, r24
     554:	2a 89       	ldd	r18, Y+18	; 0x12
     556:	82 2b       	or	r24, r18
     558:	5a 96       	adiw	r26, 0x1a	; 26
     55a:	9c 93       	st	X, r25
     55c:	8e 93       	st	-X, r24
     55e:	59 97       	sbiw	r26, 0x19	; 25
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
     560:	8d 89       	ldd	r24, Y+21	; 0x15
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	98 2f       	mov	r25, r24
     566:	88 27       	eor	r24, r24
     568:	2c 89       	ldd	r18, Y+20	; 0x14
     56a:	82 2b       	or	r24, r18
     56c:	5c 96       	adiw	r26, 0x1c	; 28
     56e:	9c 93       	st	X, r25
     570:	8e 93       	st	-X, r24
     572:	5b 97       	sbiw	r26, 0x1b	; 27
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
     574:	8f 89       	ldd	r24, Y+23	; 0x17
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	98 2f       	mov	r25, r24
     57a:	88 27       	eor	r24, r24
     57c:	2e 89       	ldd	r18, Y+22	; 0x16
     57e:	82 2b       	or	r24, r18
     580:	5e 96       	adiw	r26, 0x1e	; 30
     582:	9c 93       	st	X, r25
     584:	8e 93       	st	-X, r24
     586:	5d 97       	sbiw	r26, 0x1d	; 29
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
     588:	89 8d       	ldd	r24, Y+25	; 0x19
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	98 2f       	mov	r25, r24
     58e:	88 27       	eor	r24, r24
     590:	28 8d       	ldd	r18, Y+24	; 0x18
     592:	82 2b       	or	r24, r18
     594:	90 96       	adiw	r26, 0x20	; 32
     596:	9c 93       	st	X, r25
     598:	8e 93       	st	-X, r24
     59a:	5f 97       	sbiw	r26, 0x1f	; 31
	calib_data->dig_H1 = reg_data[25];
     59c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     59e:	91 96       	adiw	r26, 0x21	; 33
     5a0:	8c 93       	st	X, r24
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
     5a2:	97 01       	movw	r18, r14
     5a4:	47 e0       	ldi	r20, 0x07	; 7
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	be 01       	movw	r22, r28
     5aa:	6e 5f       	subi	r22, 0xFE	; 254
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	81 ee       	ldi	r24, 0xE1	; 225
     5b0:	0e 94 62 00 	call	0xc4	; 0xc4 <bme280_get_regs>
		if (rslt == BME280_OK) {
     5b4:	81 11       	cpse	r24, r1
     5b6:	36 c0       	rjmp	.+108    	; 0x624 <bme280_init+0x1ee>
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
     5b8:	2b 81       	ldd	r18, Y+3	; 0x03
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	32 2f       	mov	r19, r18
     5be:	22 27       	eor	r18, r18
     5c0:	9a 81       	ldd	r25, Y+2	; 0x02
     5c2:	29 2b       	or	r18, r25
     5c4:	f7 01       	movw	r30, r14
     5c6:	33 a3       	std	Z+35, r19	; 0x23
     5c8:	22 a3       	std	Z+34, r18	; 0x22
	calib_data->dig_H3 = reg_data[2];
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	94 a3       	std	Z+36, r25	; 0x24

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
     5ce:	9e 81       	ldd	r25, Y+6	; 0x06
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
     5d0:	2d 81       	ldd	r18, Y+5	; 0x05
     5d2:	f0 e1       	ldi	r31, 0x10	; 16
     5d4:	2f 02       	muls	r18, r31
     5d6:	90 01       	movw	r18, r0
     5d8:	11 24       	eor	r1, r1
     5da:	49 2f       	mov	r20, r25
     5dc:	4f 70       	andi	r20, 0x0F	; 15
     5de:	24 2b       	or	r18, r20
     5e0:	d7 01       	movw	r26, r14
     5e2:	96 96       	adiw	r26, 0x26	; 38
     5e4:	3c 93       	st	X, r19
     5e6:	2e 93       	st	-X, r18
     5e8:	95 97       	sbiw	r26, 0x25	; 37

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
     5ea:	2f 81       	ldd	r18, Y+7	; 0x07
     5ec:	b0 e1       	ldi	r27, 0x10	; 16
     5ee:	2b 02       	muls	r18, r27
     5f0:	90 01       	movw	r18, r0
     5f2:	11 24       	eor	r1, r1
     5f4:	92 95       	swap	r25
     5f6:	9f 70       	andi	r25, 0x0F	; 15
     5f8:	29 2b       	or	r18, r25
     5fa:	f7 01       	movw	r30, r14
     5fc:	30 a7       	std	Z+40, r19	; 0x28
     5fe:	27 a3       	std	Z+39, r18	; 0x27
	calib_data->dig_H6 = (int8_t)reg_data[6];
     600:	98 85       	ldd	r25, Y+8	; 0x08
     602:	91 a7       	std	Z+41, r25	; 0x29
     604:	0f c0       	rjmp	.+30     	; 0x624 <bme280_init+0x1ee>
					rslt = get_calib_data(dev);
				}
				break;
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
     606:	d7 01       	movw	r26, r14
     608:	17 96       	adiw	r26, 0x07	; 7
     60a:	ed 91       	ld	r30, X+
     60c:	fc 91       	ld	r31, X
     60e:	18 97       	sbiw	r26, 0x08	; 8
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	09 95       	icall
     61a:	11 50       	subi	r17, 0x01	; 1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
		while (try_count) {
     61c:	09 f0       	breq	.+2      	; 0x620 <bme280_init+0x1ea>
     61e:	1f cf       	rjmp	.-450    	; 0x45e <bme280_init+0x28>
			dev->delay_ms(1);
			--try_count;
		}
		/* Chip id check failed */
		if (!try_count)
			rslt = BME280_E_DEV_NOT_FOUND;
     620:	8e ef       	ldi	r24, 0xFE	; 254
     622:	03 c0       	rjmp	.+6      	; 0x62a <bme280_init+0x1f4>
			/* Wait for 1 ms */
			dev->delay_ms(1);
			--try_count;
		}
		/* Chip id check failed */
		if (!try_count)
     624:	11 11       	cpse	r17, r1
     626:	01 c0       	rjmp	.+2      	; 0x62a <bme280_init+0x1f4>
			rslt = BME280_E_DEV_NOT_FOUND;
     628:	8e ef       	ldi	r24, 0xFE	; 254
	}

	return rslt;
}
     62a:	6b 96       	adiw	r28, 0x1b	; 27
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	08 95       	ret

00000642 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	29 97       	sbiw	r28, 0x09	; 9
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	8c 01       	movw	r16, r24
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
     65c:	9c 01       	movw	r18, r24
     65e:	44 e0       	ldi	r20, 0x04	; 4
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	be 01       	movw	r22, r28
     664:	6f 5f       	subi	r22, 0xFF	; 255
     666:	7f 4f       	sbci	r23, 0xFF	; 255
     668:	82 ef       	ldi	r24, 0xF2	; 242
     66a:	0e 94 62 00 	call	0xc4	; 0xc4 <bme280_get_regs>
	if (rslt == BME280_OK) {
     66e:	81 11       	cpse	r24, r1
     670:	32 c0       	rjmp	.+100    	; 0x6d6 <put_device_to_sleep+0x94>
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	87 70       	andi	r24, 0x07	; 7
     676:	8f 83       	std	Y+7, r24	; 0x07
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
     678:	2b 81       	ldd	r18, Y+3	; 0x03
     67a:	82 2f       	mov	r24, r18
     67c:	8c 71       	andi	r24, 0x1C	; 28
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	95 95       	asr	r25
     682:	87 95       	ror	r24
     684:	95 95       	asr	r25
     686:	87 95       	ror	r24
     688:	8d 83       	std	Y+5, r24	; 0x05
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
     68a:	22 95       	swap	r18
     68c:	26 95       	lsr	r18
     68e:	27 70       	andi	r18, 0x07	; 7
     690:	2e 83       	std	Y+6, r18	; 0x06
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
     692:	2c 81       	ldd	r18, Y+4	; 0x04
     694:	82 2f       	mov	r24, r18
     696:	8c 71       	andi	r24, 0x1C	; 28
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	95 95       	asr	r25
     69c:	87 95       	ror	r24
     69e:	95 95       	asr	r25
     6a0:	87 95       	ror	r24
     6a2:	88 87       	std	Y+8, r24	; 0x08
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
     6a4:	22 95       	swap	r18
     6a6:	26 95       	lsr	r18
     6a8:	27 70       	andi	r18, 0x07	; 7
     6aa:	29 87       	std	Y+9, r18	; 0x09
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
	if (rslt == BME280_OK) {
		parse_device_settings(reg_data, &settings);
		rslt = bme280_soft_reset(dev);
     6ac:	c8 01       	movw	r24, r16
     6ae:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <bme280_soft_reset>
		if (rslt == BME280_OK)
     6b2:	81 11       	cpse	r24, r1
     6b4:	10 c0       	rjmp	.+32     	; 0x6d6 <put_device_to_sleep+0x94>
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
     6b6:	a8 01       	movw	r20, r16
     6b8:	be 01       	movw	r22, r28
     6ba:	6b 5f       	subi	r22, 0xFB	; 251
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	8f e1       	ldi	r24, 0x1F	; 31
     6c0:	0e 94 17 01 	call	0x22e	; 0x22e <set_osr_settings>
	if (rslt == BME280_OK)
     6c4:	81 11       	cpse	r24, r1
     6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <put_device_to_sleep+0x94>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
     6c8:	a8 01       	movw	r20, r16
     6ca:	be 01       	movw	r22, r28
     6cc:	6b 5f       	subi	r22, 0xFB	; 251
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	8f e1       	ldi	r24, 0x1F	; 31
     6d2:	0e 94 8b 01 	call	0x316	; 0x316 <set_filter_standby_settings>
		if (rslt == BME280_OK)
			rslt = reload_device_settings(&settings, dev);
	}

	return rslt;
}
     6d6:	29 96       	adiw	r28, 0x09	; 9
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	cd bf       	out	0x3d, r28	; 61
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	08 95       	ret

000006ec <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	1f 92       	push	r1
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	08 2f       	mov	r16, r24
     700:	7b 01       	movw	r14, r22
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     702:	cb 01       	movw	r24, r22
     704:	0e 94 49 00 	call	0x92	; 0x92 <null_ptr_check>
     708:	18 2f       	mov	r17, r24
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
     70a:	81 11       	cpse	r24, r1
     70c:	2b c0       	rjmp	.+86     	; 0x764 <bme280_set_sensor_settings+0x78>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
     70e:	b7 01       	movw	r22, r14
     710:	ce 01       	movw	r24, r28
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <bme280_get_sensor_mode>
     718:	18 2f       	mov	r17, r24
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
     71a:	81 11       	cpse	r24, r1
     71c:	23 c0       	rjmp	.+70     	; 0x764 <bme280_set_sensor_settings+0x78>
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	88 23       	and	r24, r24
     722:	29 f0       	breq	.+10     	; 0x72e <bme280_set_sensor_settings+0x42>
			rslt = put_device_to_sleep(dev);
     724:	c7 01       	movw	r24, r14
     726:	0e 94 21 03 	call	0x642	; 0x642 <put_device_to_sleep>
		if (rslt == BME280_OK) {
     72a:	81 11       	cpse	r24, r1
     72c:	18 c0       	rjmp	.+48     	; 0x75e <bme280_set_sensor_settings+0x72>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
     72e:	80 2f       	mov	r24, r16
     730:	87 70       	andi	r24, 0x07	; 7
     732:	49 f0       	breq	.+18     	; 0x746 <bme280_set_sensor_settings+0x5a>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
     734:	a7 01       	movw	r20, r14
     736:	b7 01       	movw	r22, r14
     738:	62 5d       	subi	r22, 0xD2	; 210
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	80 2f       	mov	r24, r16
     73e:	0e 94 17 01 	call	0x22e	; 0x22e <set_osr_settings>
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
     742:	81 11       	cpse	r24, r1
     744:	0e c0       	rjmp	.+28     	; 0x762 <bme280_set_sensor_settings+0x76>
     746:	80 2f       	mov	r24, r16
     748:	88 71       	andi	r24, 0x18	; 24
     74a:	61 f0       	breq	.+24     	; 0x764 <bme280_set_sensor_settings+0x78>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
     74c:	b7 01       	movw	r22, r14
     74e:	62 5d       	subi	r22, 0xD2	; 210
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	a7 01       	movw	r20, r14
     754:	80 2f       	mov	r24, r16
     756:	0e 94 8b 01 	call	0x316	; 0x316 <set_filter_standby_settings>
     75a:	18 2f       	mov	r17, r24
     75c:	03 c0       	rjmp	.+6      	; 0x764 <bme280_set_sensor_settings+0x78>
	rslt = null_ptr_check(dev);
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
			rslt = put_device_to_sleep(dev);
     75e:	18 2f       	mov	r17, r24
     760:	01 c0       	rjmp	.+2      	; 0x764 <bme280_set_sensor_settings+0x78>
		if (rslt == BME280_OK) {
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
     762:	18 2f       	mov	r17, r24
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
		}
	}

	return rslt;
}
     764:	81 2f       	mov	r24, r17
     766:	0f 90       	pop	r0
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	08 95       	ret

00000776 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	00 d0       	rcall	.+0      	; 0x782 <bme280_set_sensor_mode+0xc>
     782:	1f 92       	push	r1
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	f8 2e       	mov	r15, r24
     78a:	8b 01       	movw	r16, r22
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     78c:	cb 01       	movw	r24, r22
     78e:	0e 94 49 00 	call	0x92	; 0x92 <null_ptr_check>

	if (rslt == BME280_OK) {
     792:	81 11       	cpse	r24, r1
     794:	2b c0       	rjmp	.+86     	; 0x7ec <bme280_set_sensor_mode+0x76>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
     796:	b8 01       	movw	r22, r16
     798:	ce 01       	movw	r24, r28
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <bme280_get_sensor_mode>
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
     7a0:	81 11       	cpse	r24, r1
     7a2:	24 c0       	rjmp	.+72     	; 0x7ec <bme280_set_sensor_mode+0x76>
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	88 23       	and	r24, r24
     7a8:	29 f0       	breq	.+10     	; 0x7b4 <bme280_set_sensor_mode+0x3e>
			rslt = put_device_to_sleep(dev);
     7aa:	c8 01       	movw	r24, r16
     7ac:	0e 94 21 03 	call	0x642	; 0x642 <put_device_to_sleep>
		/* Set the power mode */
		if (rslt == BME280_OK)
     7b0:	81 11       	cpse	r24, r1
     7b2:	1c c0       	rjmp	.+56     	; 0x7ec <bme280_set_sensor_mode+0x76>
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
     7b4:	84 ef       	ldi	r24, 0xF4	; 244
     7b6:	8b 83       	std	Y+3, r24	; 0x03
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
     7b8:	98 01       	movw	r18, r16
     7ba:	41 e0       	ldi	r20, 0x01	; 1
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	be 01       	movw	r22, r28
     7c0:	6e 5f       	subi	r22, 0xFE	; 254
     7c2:	7f 4f       	sbci	r23, 0xFF	; 255
     7c4:	0e 94 62 00 	call	0xc4	; 0xc4 <bme280_get_regs>
	/* Set the power mode */
	if (rslt == BME280_OK) {
     7c8:	81 11       	cpse	r24, r1
     7ca:	10 c0       	rjmp	.+32     	; 0x7ec <bme280_set_sensor_mode+0x76>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
     7cc:	9a 81       	ldd	r25, Y+2	; 0x02
     7ce:	9c 7f       	andi	r25, 0xFC	; 252
     7d0:	8f 2d       	mov	r24, r15
     7d2:	83 70       	andi	r24, 0x03	; 3
     7d4:	f9 2e       	mov	r15, r25
     7d6:	f8 2a       	or	r15, r24
     7d8:	fa 82       	std	Y+2, r15	; 0x02
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
     7da:	98 01       	movw	r18, r16
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	be 01       	movw	r22, r28
     7e0:	6e 5f       	subi	r22, 0xFE	; 254
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	ce 01       	movw	r24, r28
     7e6:	03 96       	adiw	r24, 0x03	; 3
     7e8:	0e 94 87 00 	call	0x10e	; 0x10e <bme280_set_regs>
		if (rslt == BME280_OK)
			rslt = write_power_mode(sensor_mode, dev);
	}

	return rslt;
}
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	08 95       	ret

000007fe <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	fc 01       	movw	r30, r24
     804:	db 01       	movw	r26, r22

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
	data_lsb = (uint32_t)reg_data[1] << 4;
	data_xlsb = (uint32_t)reg_data[2] >> 4;
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
     806:	40 81       	ld	r20, Z
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	8a 01       	movw	r16, r20
     810:	9b 01       	movw	r18, r22
     812:	0f 2e       	mov	r0, r31
     814:	fc e0       	ldi	r31, 0x0C	; 12
     816:	00 0f       	add	r16, r16
     818:	11 1f       	adc	r17, r17
     81a:	22 1f       	adc	r18, r18
     81c:	33 1f       	adc	r19, r19
     81e:	fa 95       	dec	r31
     820:	d1 f7       	brne	.-12     	; 0x816 <bme280_parse_sensor_data+0x18>
     822:	f0 2d       	mov	r31, r0
     824:	81 81       	ldd	r24, Z+1	; 0x01
     826:	48 2f       	mov	r20, r24
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	44 0f       	add	r20, r20
     830:	55 1f       	adc	r21, r21
     832:	66 1f       	adc	r22, r22
     834:	77 1f       	adc	r23, r23
     836:	44 0f       	add	r20, r20
     838:	55 1f       	adc	r21, r21
     83a:	66 1f       	adc	r22, r22
     83c:	77 1f       	adc	r23, r23
     83e:	44 0f       	add	r20, r20
     840:	55 1f       	adc	r21, r21
     842:	66 1f       	adc	r22, r22
     844:	77 1f       	adc	r23, r23
     846:	44 0f       	add	r20, r20
     848:	55 1f       	adc	r21, r21
     84a:	66 1f       	adc	r22, r22
     84c:	77 1f       	adc	r23, r23
     84e:	40 2b       	or	r20, r16
     850:	51 2b       	or	r21, r17
     852:	62 2b       	or	r22, r18
     854:	73 2b       	or	r23, r19
     856:	82 81       	ldd	r24, Z+2	; 0x02
     858:	82 95       	swap	r24
     85a:	8f 70       	andi	r24, 0x0F	; 15
     85c:	48 2b       	or	r20, r24
     85e:	4d 93       	st	X+, r20
     860:	5d 93       	st	X+, r21
     862:	6d 93       	st	X+, r22
     864:	7c 93       	st	X, r23
     866:	13 97       	sbiw	r26, 0x03	; 3

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
	data_lsb = (uint32_t)reg_data[4] << 4;
	data_xlsb = (uint32_t)reg_data[5] >> 4;
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
     868:	43 81       	ldd	r20, Z+3	; 0x03
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	8a 01       	movw	r16, r20
     872:	9b 01       	movw	r18, r22
     874:	0f 2e       	mov	r0, r31
     876:	fc e0       	ldi	r31, 0x0C	; 12
     878:	00 0f       	add	r16, r16
     87a:	11 1f       	adc	r17, r17
     87c:	22 1f       	adc	r18, r18
     87e:	33 1f       	adc	r19, r19
     880:	fa 95       	dec	r31
     882:	d1 f7       	brne	.-12     	; 0x878 <__stack+0x19>
     884:	f0 2d       	mov	r31, r0
     886:	84 81       	ldd	r24, Z+4	; 0x04
     888:	48 2f       	mov	r20, r24
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	44 0f       	add	r20, r20
     892:	55 1f       	adc	r21, r21
     894:	66 1f       	adc	r22, r22
     896:	77 1f       	adc	r23, r23
     898:	44 0f       	add	r20, r20
     89a:	55 1f       	adc	r21, r21
     89c:	66 1f       	adc	r22, r22
     89e:	77 1f       	adc	r23, r23
     8a0:	44 0f       	add	r20, r20
     8a2:	55 1f       	adc	r21, r21
     8a4:	66 1f       	adc	r22, r22
     8a6:	77 1f       	adc	r23, r23
     8a8:	44 0f       	add	r20, r20
     8aa:	55 1f       	adc	r21, r21
     8ac:	66 1f       	adc	r22, r22
     8ae:	77 1f       	adc	r23, r23
     8b0:	40 2b       	or	r20, r16
     8b2:	51 2b       	or	r21, r17
     8b4:	62 2b       	or	r22, r18
     8b6:	73 2b       	or	r23, r19
     8b8:	85 81       	ldd	r24, Z+5	; 0x05
     8ba:	82 95       	swap	r24
     8bc:	8f 70       	andi	r24, 0x0F	; 15
     8be:	48 2b       	or	r20, r24
     8c0:	14 96       	adiw	r26, 0x04	; 4
     8c2:	4d 93       	st	X+, r20
     8c4:	5d 93       	st	X+, r21
     8c6:	6d 93       	st	X+, r22
     8c8:	7c 93       	st	X, r23
     8ca:	17 97       	sbiw	r26, 0x07	; 7

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
	data_msb = (uint32_t)reg_data[7];
	uncomp_data->humidity = data_msb | data_lsb;
     8cc:	46 81       	ldd	r20, Z+6	; 0x06
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	76 2f       	mov	r23, r22
     8d6:	65 2f       	mov	r22, r21
     8d8:	54 2f       	mov	r21, r20
     8da:	44 27       	eor	r20, r20
     8dc:	87 81       	ldd	r24, Z+7	; 0x07
     8de:	48 2b       	or	r20, r24
     8e0:	18 96       	adiw	r26, 0x08	; 8
     8e2:	4d 93       	st	X+, r20
     8e4:	5d 93       	st	X+, r21
     8e6:	6d 93       	st	X+, r22
     8e8:	7c 93       	st	X, r23
     8ea:	1b 97       	sbiw	r26, 0x0b	; 11
}
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	08 95       	ret

000008f2 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
     8f2:	2f 92       	push	r2
     8f4:	3f 92       	push	r3
     8f6:	4f 92       	push	r4
     8f8:	5f 92       	push	r5
     8fa:	6f 92       	push	r6
     8fc:	7f 92       	push	r7
     8fe:	8f 92       	push	r8
     900:	9f 92       	push	r9
     902:	af 92       	push	r10
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	a3 97       	sbiw	r28, 0x23	; 35
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	38 2e       	mov	r3, r24
     928:	8b 01       	movw	r16, r22
     92a:	fa 01       	movw	r30, r20
     92c:	3a 83       	std	Y+2, r19	; 0x02
     92e:	29 83       	std	Y+1, r18	; 0x01
	int8_t rslt = BME280_OK;

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
     930:	61 15       	cp	r22, r1
     932:	71 05       	cpc	r23, r1
     934:	09 f4       	brne	.+2      	; 0x938 <bme280_compensate_data+0x46>
     936:	92 c5       	rjmp	.+2852   	; 0x145c <bme280_compensate_data+0xb6a>
     938:	30 97       	sbiw	r30, 0x00	; 0
     93a:	09 f4       	brne	.+2      	; 0x93e <bme280_compensate_data+0x4c>
     93c:	91 c5       	rjmp	.+2850   	; 0x1460 <bme280_compensate_data+0xb6e>
     93e:	21 15       	cp	r18, r1
     940:	31 05       	cpc	r19, r1
     942:	09 f4       	brne	.+2      	; 0x946 <bme280_compensate_data+0x54>
     944:	8f c5       	rjmp	.+2846   	; 0x1464 <bme280_compensate_data+0xb72>
		/* Initialize to zero */
		comp_data->temperature = 0;
     946:	14 82       	std	Z+4, r1	; 0x04
     948:	15 82       	std	Z+5, r1	; 0x05
     94a:	16 82       	std	Z+6, r1	; 0x06
     94c:	17 82       	std	Z+7, r1	; 0x07
		comp_data->pressure = 0;
     94e:	10 82       	st	Z, r1
     950:	11 82       	std	Z+1, r1	; 0x01
     952:	12 82       	std	Z+2, r1	; 0x02
     954:	13 82       	std	Z+3, r1	; 0x03
		comp_data->humidity = 0;
     956:	10 86       	std	Z+8, r1	; 0x08
     958:	11 86       	std	Z+9, r1	; 0x09
     95a:	12 86       	std	Z+10, r1	; 0x0a
     95c:	13 86       	std	Z+11, r1	; 0x0b
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
     95e:	87 70       	andi	r24, 0x07	; 7
     960:	09 f4       	brne	.+2      	; 0x964 <bme280_compensate_data+0x72>
     962:	cd c0       	rjmp	.+410    	; 0xafe <bme280_compensate_data+0x20c>
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
	int32_t temperature_max = 8500;

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
     964:	db 01       	movw	r26, r22
     966:	14 96       	adiw	r26, 0x04	; 4
     968:	cd 90       	ld	r12, X+
     96a:	dd 90       	ld	r13, X+
     96c:	ed 90       	ld	r14, X+
     96e:	fc 90       	ld	r15, X
     970:	17 97       	sbiw	r26, 0x07	; 7
     972:	d9 01       	movw	r26, r18
     974:	4d 90       	ld	r4, X+
     976:	5c 90       	ld	r5, X
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
     978:	b7 01       	movw	r22, r14
     97a:	a6 01       	movw	r20, r12
     97c:	68 94       	set
     97e:	12 f8       	bld	r1, 2
     980:	76 95       	lsr	r23
     982:	67 95       	ror	r22
     984:	57 95       	ror	r21
     986:	47 95       	ror	r20
     988:	16 94       	lsr	r1
     98a:	d1 f7       	brne	.-12     	; 0x980 <bme280_compensate_data+0x8e>
     98c:	61 2c       	mov	r6, r1
     98e:	71 2c       	mov	r7, r1
     990:	d3 01       	movw	r26, r6
     992:	c2 01       	movw	r24, r4
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	aa 1f       	adc	r26, r26
     99a:	bb 1f       	adc	r27, r27
     99c:	9a 01       	movw	r18, r20
     99e:	ab 01       	movw	r20, r22
     9a0:	28 1b       	sub	r18, r24
     9a2:	39 0b       	sbc	r19, r25
     9a4:	4a 0b       	sbc	r20, r26
     9a6:	5b 0b       	sbc	r21, r27
     9a8:	a9 81       	ldd	r26, Y+1	; 0x01
     9aa:	ba 81       	ldd	r27, Y+2	; 0x02
     9ac:	12 96       	adiw	r26, 0x02	; 2
     9ae:	8d 91       	ld	r24, X+
     9b0:	9c 91       	ld	r25, X
     9b2:	13 97       	sbiw	r26, 0x03	; 3
     9b4:	dc 01       	movw	r26, r24
     9b6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__mulshisi3>
     9ba:	4b 01       	movw	r8, r22
     9bc:	5c 01       	movw	r10, r24
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
     9be:	d7 01       	movw	r26, r14
     9c0:	c6 01       	movw	r24, r12
     9c2:	68 94       	set
     9c4:	13 f8       	bld	r1, 3
     9c6:	b6 95       	lsr	r27
     9c8:	a7 95       	ror	r26
     9ca:	97 95       	ror	r25
     9cc:	87 95       	ror	r24
     9ce:	16 94       	lsr	r1
     9d0:	d1 f7       	brne	.-12     	; 0x9c6 <bme280_compensate_data+0xd4>
     9d2:	bc 01       	movw	r22, r24
     9d4:	cd 01       	movw	r24, r26
     9d6:	64 19       	sub	r22, r4
     9d8:	75 09       	sbc	r23, r5
     9da:	86 09       	sbc	r24, r6
     9dc:	97 09       	sbc	r25, r7
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
     9de:	9b 01       	movw	r18, r22
     9e0:	ac 01       	movw	r20, r24
     9e2:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__mulsi3>
     9e6:	6b 01       	movw	r12, r22
     9e8:	7c 01       	movw	r14, r24
     9ea:	99 23       	and	r25, r25
     9ec:	34 f4       	brge	.+12     	; 0x9fa <bme280_compensate_data+0x108>
     9ee:	bf ef       	ldi	r27, 0xFF	; 255
     9f0:	cb 0e       	add	r12, r27
     9f2:	bf e0       	ldi	r27, 0x0F	; 15
     9f4:	db 1e       	adc	r13, r27
     9f6:	e1 1c       	adc	r14, r1
     9f8:	f1 1c       	adc	r15, r1
     9fa:	a7 01       	movw	r20, r14
     9fc:	96 01       	movw	r18, r12
     9fe:	01 2e       	mov	r0, r17
     a00:	1c e0       	ldi	r17, 0x0C	; 12
     a02:	55 95       	asr	r21
     a04:	47 95       	ror	r20
     a06:	37 95       	ror	r19
     a08:	27 95       	ror	r18
     a0a:	1a 95       	dec	r17
     a0c:	d1 f7       	brne	.-12     	; 0xa02 <bme280_compensate_data+0x110>
     a0e:	10 2d       	mov	r17, r0
     a10:	a9 81       	ldd	r26, Y+1	; 0x01
     a12:	ba 81       	ldd	r27, Y+2	; 0x02
     a14:	14 96       	adiw	r26, 0x04	; 4
     a16:	8d 91       	ld	r24, X+
     a18:	9c 91       	ld	r25, X
     a1a:	15 97       	sbiw	r26, 0x05	; 5
     a1c:	dc 01       	movw	r26, r24
     a1e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__mulshisi3>
	calib_data->t_fine = var1 + var2;
     a22:	75 01       	movw	r14, r10
     a24:	64 01       	movw	r12, r8
     a26:	bb 20       	and	r11, r11
     a28:	34 f4       	brge	.+12     	; 0xa36 <bme280_compensate_data+0x144>
     a2a:	bf ef       	ldi	r27, 0xFF	; 255
     a2c:	cb 0e       	add	r12, r27
     a2e:	b7 e0       	ldi	r27, 0x07	; 7
     a30:	db 1e       	adc	r13, r27
     a32:	e1 1c       	adc	r14, r1
     a34:	f1 1c       	adc	r15, r1
     a36:	0b 2e       	mov	r0, r27
     a38:	bb e0       	ldi	r27, 0x0B	; 11
     a3a:	f5 94       	asr	r15
     a3c:	e7 94       	ror	r14
     a3e:	d7 94       	ror	r13
     a40:	c7 94       	ror	r12
     a42:	ba 95       	dec	r27
     a44:	d1 f7       	brne	.-12     	; 0xa3a <bme280_compensate_data+0x148>
     a46:	b0 2d       	mov	r27, r0
     a48:	4b 01       	movw	r8, r22
     a4a:	5c 01       	movw	r10, r24
     a4c:	99 23       	and	r25, r25
     a4e:	34 f4       	brge	.+12     	; 0xa5c <bme280_compensate_data+0x16a>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	82 0e       	add	r8, r18
     a54:	2f e3       	ldi	r18, 0x3F	; 63
     a56:	92 1e       	adc	r9, r18
     a58:	a1 1c       	adc	r10, r1
     a5a:	b1 1c       	adc	r11, r1
     a5c:	b5 01       	movw	r22, r10
     a5e:	a4 01       	movw	r20, r8
     a60:	03 2e       	mov	r0, r19
     a62:	3e e0       	ldi	r19, 0x0E	; 14
     a64:	75 95       	asr	r23
     a66:	67 95       	ror	r22
     a68:	57 95       	ror	r21
     a6a:	47 95       	ror	r20
     a6c:	3a 95       	dec	r19
     a6e:	d1 f7       	brne	.-12     	; 0xa64 <bme280_compensate_data+0x172>
     a70:	30 2d       	mov	r19, r0
     a72:	c4 0e       	add	r12, r20
     a74:	d5 1e       	adc	r13, r21
     a76:	e6 1e       	adc	r14, r22
     a78:	f7 1e       	adc	r15, r23
     a7a:	a9 81       	ldd	r26, Y+1	; 0x01
     a7c:	ba 81       	ldd	r27, Y+2	; 0x02
     a7e:	91 96       	adiw	r26, 0x21	; 33
     a80:	cd 92       	st	X+, r12
     a82:	dd 92       	st	X+, r13
     a84:	ed 92       	st	X+, r14
     a86:	fc 92       	st	X, r15
     a88:	94 97       	sbiw	r26, 0x24	; 36
	temperature = (calib_data->t_fine * 5 + 128) / 256;
     a8a:	b7 01       	movw	r22, r14
     a8c:	a6 01       	movw	r20, r12
     a8e:	44 0f       	add	r20, r20
     a90:	55 1f       	adc	r21, r21
     a92:	66 1f       	adc	r22, r22
     a94:	77 1f       	adc	r23, r23
     a96:	44 0f       	add	r20, r20
     a98:	55 1f       	adc	r21, r21
     a9a:	66 1f       	adc	r22, r22
     a9c:	77 1f       	adc	r23, r23
     a9e:	d7 01       	movw	r26, r14
     aa0:	c6 01       	movw	r24, r12
     aa2:	84 0f       	add	r24, r20
     aa4:	95 1f       	adc	r25, r21
     aa6:	a6 1f       	adc	r26, r22
     aa8:	b7 1f       	adc	r27, r23
     aaa:	80 58       	subi	r24, 0x80	; 128
     aac:	9f 4f       	sbci	r25, 0xFF	; 255
     aae:	af 4f       	sbci	r26, 0xFF	; 255
     ab0:	bf 4f       	sbci	r27, 0xFF	; 255
     ab2:	ac 01       	movw	r20, r24
     ab4:	bd 01       	movw	r22, r26
     ab6:	22 f4       	brpl	.+8      	; 0xac0 <bme280_compensate_data+0x1ce>
     ab8:	41 50       	subi	r20, 0x01	; 1
     aba:	5f 4f       	sbci	r21, 0xFF	; 255
     abc:	6f 4f       	sbci	r22, 0xFF	; 255
     abe:	7f 4f       	sbci	r23, 0xFF	; 255
     ac0:	bb 27       	eor	r27, r27
     ac2:	77 fd       	sbrc	r23, 7
     ac4:	ba 95       	dec	r27
     ac6:	a7 2f       	mov	r26, r23
     ac8:	96 2f       	mov	r25, r22
     aca:	85 2f       	mov	r24, r21
     acc:	85 33       	cpi	r24, 0x35	; 53
     ace:	21 e2       	ldi	r18, 0x21	; 33
     ad0:	92 07       	cpc	r25, r18
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	24 f0       	brlt	.+8      	; 0xae0 <bme280_compensate_data+0x1ee>
     ad8:	84 e3       	ldi	r24, 0x34	; 52
     ada:	91 e2       	ldi	r25, 0x21	; 33
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
		comp_data->pressure = 0;
		comp_data->humidity = 0;
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
     ae0:	80 36       	cpi	r24, 0x60	; 96
     ae2:	30 ef       	ldi	r19, 0xF0	; 240
     ae4:	93 07       	cpc	r25, r19
     ae6:	3f ef       	ldi	r19, 0xFF	; 255
     ae8:	a3 07       	cpc	r26, r19
     aea:	b3 07       	cpc	r27, r19
     aec:	24 f4       	brge	.+8      	; 0xaf6 <bme280_compensate_data+0x204>
     aee:	80 e6       	ldi	r24, 0x60	; 96
     af0:	90 ef       	ldi	r25, 0xF0	; 240
     af2:	af ef       	ldi	r26, 0xFF	; 255
     af4:	bf ef       	ldi	r27, 0xFF	; 255
     af6:	84 83       	std	Z+4, r24	; 0x04
     af8:	95 83       	std	Z+5, r25	; 0x05
     afa:	a6 83       	std	Z+6, r26	; 0x06
     afc:	b7 83       	std	Z+7, r27	; 0x07
     afe:	49 81       	ldd	r20, Y+1	; 0x01
     b00:	5a 81       	ldd	r21, Y+2	; 0x02
     b02:	5b a3       	std	Y+35, r21	; 0x23
     b04:	4a a3       	std	Y+34, r20	; 0x22
     b06:	fa 8b       	std	Y+18, r31	; 0x12
     b08:	e9 8b       	std	Y+17, r30	; 0x11
     b0a:	1f 8b       	std	Y+23, r17	; 0x17
     b0c:	0e 8b       	std	Y+22, r16	; 0x16
     b0e:	3d 86       	std	Y+13, r3	; 0x0d
		}
		if (sensor_comp & BME280_PRESS) {
     b10:	30 fe       	sbrs	r3, 0
     b12:	52 c3       	rjmp	.+1700   	; 0x11b8 <bme280_compensate_data+0x8c6>
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
	uint32_t pressure_max = 11000000;

	var1 = ((int64_t)calib_data->t_fine) - 128000;
     b14:	fa 01       	movw	r30, r20
     b16:	81 a1       	ldd	r24, Z+33	; 0x21
     b18:	92 a1       	ldd	r25, Z+34	; 0x22
     b1a:	a3 a1       	ldd	r26, Z+35	; 0x23
     b1c:	b4 a1       	ldd	r27, Z+36	; 0x24
     b1e:	6c 01       	movw	r12, r24
     b20:	7d 01       	movw	r14, r26
     b22:	ff 0c       	add	r15, r15
     b24:	cc 08       	sbc	r12, r12
     b26:	dc 2c       	mov	r13, r12
     b28:	76 01       	movw	r14, r12
     b2a:	28 2f       	mov	r18, r24
     b2c:	39 2f       	mov	r19, r25
     b2e:	4a 2f       	mov	r20, r26
     b30:	5b 2f       	mov	r21, r27
     b32:	6c 2d       	mov	r22, r12
     b34:	7c 2d       	mov	r23, r12
     b36:	8c 2d       	mov	r24, r12
     b38:	9c 2d       	mov	r25, r12
     b3a:	34 5f       	subi	r19, 0xF4	; 244
     b3c:	41 40       	sbci	r20, 0x01	; 1
     b3e:	51 09       	sbc	r21, r1
     b40:	61 09       	sbc	r22, r1
     b42:	71 09       	sbc	r23, r1
     b44:	81 09       	sbc	r24, r1
     b46:	91 09       	sbc	r25, r1
     b48:	29 83       	std	Y+1, r18	; 0x01
     b4a:	3b 87       	std	Y+11, r19	; 0x0b
     b4c:	4c 87       	std	Y+12, r20	; 0x0c
     b4e:	59 87       	std	Y+9, r21	; 0x09
     b50:	6a 87       	std	Y+10, r22	; 0x0a
     b52:	7e 87       	std	Y+14, r23	; 0x0e
     b54:	8f 87       	std	Y+15, r24	; 0x0f
     b56:	98 8b       	std	Y+16, r25	; 0x10
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
     b58:	a2 2e       	mov	r10, r18
     b5a:	b3 2e       	mov	r11, r19
     b5c:	c4 2e       	mov	r12, r20
     b5e:	d5 2e       	mov	r13, r21
     b60:	e6 2e       	mov	r14, r22
     b62:	f7 2e       	mov	r15, r23
     b64:	08 2f       	mov	r16, r24
     b66:	19 2f       	mov	r17, r25
     b68:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__muldi3>
     b6c:	2b 8b       	std	Y+19, r18	; 0x13
     b6e:	3c 8b       	std	Y+20, r19	; 0x14
     b70:	4d 8b       	std	Y+21, r20	; 0x15
     b72:	58 8f       	std	Y+24, r21	; 0x18
     b74:	69 8f       	std	Y+25, r22	; 0x19
     b76:	7a 8f       	std	Y+26, r23	; 0x1a
     b78:	8b 8f       	std	Y+27, r24	; 0x1b
     b7a:	9c 8f       	std	Y+28, r25	; 0x1c
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
     b7c:	aa a1       	ldd	r26, Y+34	; 0x22
     b7e:	bb a1       	ldd	r27, Y+35	; 0x23
     b80:	19 96       	adiw	r26, 0x09	; 9
     b82:	3c 91       	ld	r19, X
     b84:	19 97       	sbiw	r26, 0x09	; 9
     b86:	18 96       	adiw	r26, 0x08	; 8
     b88:	2c 91       	ld	r18, X
     b8a:	93 2f       	mov	r25, r19
     b8c:	99 0f       	add	r25, r25
     b8e:	99 0b       	sbc	r25, r25
     b90:	49 2f       	mov	r20, r25
     b92:	59 2f       	mov	r21, r25
     b94:	69 2f       	mov	r22, r25
     b96:	79 2f       	mov	r23, r25
     b98:	89 2f       	mov	r24, r25
     b9a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__muldi3>
     b9e:	0c e0       	ldi	r16, 0x0C	; 12
     ba0:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__ashldi3>
     ba4:	52 2e       	mov	r5, r18
     ba6:	63 2e       	mov	r6, r19
     ba8:	74 2e       	mov	r7, r20
     baa:	5d 8f       	std	Y+29, r21	; 0x1d
     bac:	6e 8f       	std	Y+30, r22	; 0x1e
     bae:	7f 8f       	std	Y+31, r23	; 0x1f
     bb0:	88 a3       	std	Y+32, r24	; 0x20
     bb2:	99 a3       	std	Y+33, r25	; 0x21
	var3 = ((int64_t)1) * 140737488355328;
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
     bb4:	ea a1       	ldd	r30, Y+34	; 0x22
     bb6:	fb a1       	ldd	r31, Y+35	; 0x23
     bb8:	33 85       	ldd	r19, Z+11	; 0x0b
     bba:	22 85       	ldd	r18, Z+10	; 0x0a
     bbc:	93 2f       	mov	r25, r19
     bbe:	99 0f       	add	r25, r25
     bc0:	99 0b       	sbc	r25, r25
     bc2:	ab 88       	ldd	r10, Y+19	; 0x13
     bc4:	bc 88       	ldd	r11, Y+20	; 0x14
     bc6:	cd 88       	ldd	r12, Y+21	; 0x15
     bc8:	d8 8c       	ldd	r13, Y+24	; 0x18
     bca:	e9 8c       	ldd	r14, Y+25	; 0x19
     bcc:	fa 8c       	ldd	r15, Y+26	; 0x1a
     bce:	0b 8d       	ldd	r16, Y+27	; 0x1b
     bd0:	1c 8d       	ldd	r17, Y+28	; 0x1c
     bd2:	49 2f       	mov	r20, r25
     bd4:	59 2f       	mov	r21, r25
     bd6:	69 2f       	mov	r22, r25
     bd8:	79 2f       	mov	r23, r25
     bda:	89 2f       	mov	r24, r25
     bdc:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__muldi3>
     be0:	42 2e       	mov	r4, r18
     be2:	a3 2e       	mov	r10, r19
     be4:	b4 2e       	mov	r11, r20
     be6:	c5 2e       	mov	r12, r21
     be8:	d6 2e       	mov	r13, r22
     bea:	e7 2e       	mov	r14, r23
     bec:	28 2e       	mov	r2, r24
     bee:	39 2e       	mov	r3, r25
     bf0:	a0 e0       	ldi	r26, 0x00	; 0
     bf2:	0e 94 43 11 	call	0x2286	; 0x2286 <__cmpdi2_s8>
     bf6:	84 f4       	brge	.+32     	; 0xc18 <bme280_compensate_data+0x326>
     bf8:	21 50       	subi	r18, 0x01	; 1
     bfa:	3f 4f       	sbci	r19, 0xFF	; 255
     bfc:	4f 4f       	sbci	r20, 0xFF	; 255
     bfe:	5f 4f       	sbci	r21, 0xFF	; 255
     c00:	6f 4f       	sbci	r22, 0xFF	; 255
     c02:	7f 4f       	sbci	r23, 0xFF	; 255
     c04:	8f 4f       	sbci	r24, 0xFF	; 255
     c06:	9f 4f       	sbci	r25, 0xFF	; 255
     c08:	42 2e       	mov	r4, r18
     c0a:	a3 2e       	mov	r10, r19
     c0c:	b4 2e       	mov	r11, r20
     c0e:	c5 2e       	mov	r12, r21
     c10:	d6 2e       	mov	r13, r22
     c12:	e7 2e       	mov	r14, r23
     c14:	28 2e       	mov	r2, r24
     c16:	39 2e       	mov	r3, r25
     c18:	24 2d       	mov	r18, r4
     c1a:	3a 2d       	mov	r19, r10
     c1c:	4b 2d       	mov	r20, r11
     c1e:	5c 2d       	mov	r21, r12
     c20:	6d 2d       	mov	r22, r13
     c22:	7e 2d       	mov	r23, r14
     c24:	82 2d       	mov	r24, r2
     c26:	93 2d       	mov	r25, r3
     c28:	08 e0       	ldi	r16, 0x08	; 8
     c2a:	0e 94 07 11 	call	0x220e	; 0x220e <__ashrdi3>
     c2e:	a5 2c       	mov	r10, r5
     c30:	b6 2c       	mov	r11, r6
     c32:	c7 2c       	mov	r12, r7
     c34:	dd 8c       	ldd	r13, Y+29	; 0x1d
     c36:	ee 8c       	ldd	r14, Y+30	; 0x1e
     c38:	ff 8c       	ldd	r15, Y+31	; 0x1f
     c3a:	08 a1       	ldd	r16, Y+32	; 0x20
     c3c:	19 a1       	ldd	r17, Y+33	; 0x21
     c3e:	0e 94 25 11 	call	0x224a	; 0x224a <__adddi3>
     c42:	70 58       	subi	r23, 0x80	; 128
     c44:	8f 4f       	sbci	r24, 0xFF	; 255
     c46:	9f 4f       	sbci	r25, 0xFF	; 255
     c48:	aa a1       	ldd	r26, Y+34	; 0x22
     c4a:	bb a1       	ldd	r27, Y+35	; 0x23
     c4c:	16 96       	adiw	r26, 0x06	; 6
     c4e:	ad 90       	ld	r10, X+
     c50:	bc 90       	ld	r11, X
     c52:	17 97       	sbiw	r26, 0x07	; 7
     c54:	15 01       	movw	r2, r10
     c56:	b3 2c       	mov	r11, r3
     c58:	c1 2c       	mov	r12, r1
     c5a:	d1 2c       	mov	r13, r1
     c5c:	e1 2c       	mov	r14, r1
     c5e:	f1 2c       	mov	r15, r1
     c60:	00 e0       	ldi	r16, 0x00	; 0
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__muldi3>
     c68:	92 2e       	mov	r9, r18
     c6a:	a3 2e       	mov	r10, r19
     c6c:	b4 2e       	mov	r11, r20
     c6e:	c5 2e       	mov	r12, r21
     c70:	d6 2e       	mov	r13, r22
     c72:	e7 2e       	mov	r14, r23
     c74:	78 2e       	mov	r7, r24
     c76:	89 2e       	mov	r8, r25
     c78:	a0 e0       	ldi	r26, 0x00	; 0
     c7a:	0e 94 43 11 	call	0x2286	; 0x2286 <__cmpdi2_s8>
     c7e:	84 f4       	brge	.+32     	; 0xca0 <bme280_compensate_data+0x3ae>
     c80:	21 50       	subi	r18, 0x01	; 1
     c82:	31 09       	sbc	r19, r1
     c84:	41 09       	sbc	r20, r1
     c86:	51 09       	sbc	r21, r1
     c88:	6e 4f       	sbci	r22, 0xFE	; 254
     c8a:	7f 4f       	sbci	r23, 0xFF	; 255
     c8c:	8f 4f       	sbci	r24, 0xFF	; 255
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	92 2e       	mov	r9, r18
     c92:	a3 2e       	mov	r10, r19
     c94:	b4 2e       	mov	r11, r20
     c96:	c5 2e       	mov	r12, r21
     c98:	d6 2e       	mov	r13, r22
     c9a:	e7 2e       	mov	r14, r23
     c9c:	78 2e       	mov	r7, r24
     c9e:	89 2e       	mov	r8, r25
     ca0:	29 2d       	mov	r18, r9
     ca2:	3a 2d       	mov	r19, r10
     ca4:	4b 2d       	mov	r20, r11
     ca6:	5c 2d       	mov	r21, r12
     ca8:	6d 2d       	mov	r22, r13
     caa:	7e 2d       	mov	r23, r14
     cac:	87 2d       	mov	r24, r7
     cae:	98 2d       	mov	r25, r8
     cb0:	01 e2       	ldi	r16, 0x21	; 33
     cb2:	0e 94 07 11 	call	0x220e	; 0x220e <__ashrdi3>
     cb6:	62 2e       	mov	r6, r18
     cb8:	73 2e       	mov	r7, r19
     cba:	24 2e       	mov	r2, r20
     cbc:	35 2e       	mov	r3, r21
     cbe:	86 2e       	mov	r8, r22
     cc0:	97 2e       	mov	r9, r23
     cc2:	48 2e       	mov	r4, r24
     cc4:	59 2e       	mov	r5, r25

	/* To avoid divide by zero exception */
	if (var1 != 0) {
     cc6:	a0 e0       	ldi	r26, 0x00	; 0
     cc8:	0e 94 43 11 	call	0x2286	; 0x2286 <__cmpdi2_s8>
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <bme280_compensate_data+0x3de>
     cce:	65 c2       	rjmp	.+1226   	; 0x119a <bme280_compensate_data+0x8a8>
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
	uint32_t pressure_max = 11000000;

	var1 = ((int64_t)calib_data->t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
     cd0:	ea a1       	ldd	r30, Y+34	; 0x22
     cd2:	fb a1       	ldd	r31, Y+35	; 0x23
     cd4:	31 89       	ldd	r19, Z+17	; 0x11
     cd6:	20 89       	ldd	r18, Z+16	; 0x10
     cd8:	93 2f       	mov	r25, r19
     cda:	99 0f       	add	r25, r25
     cdc:	99 0b       	sbc	r25, r25
     cde:	ab 88       	ldd	r10, Y+19	; 0x13
     ce0:	bc 88       	ldd	r11, Y+20	; 0x14
     ce2:	cd 88       	ldd	r12, Y+21	; 0x15
     ce4:	d8 8c       	ldd	r13, Y+24	; 0x18
     ce6:	e9 8c       	ldd	r14, Y+25	; 0x19
     ce8:	fa 8c       	ldd	r15, Y+26	; 0x1a
     cea:	0b 8d       	ldd	r16, Y+27	; 0x1b
     cec:	1c 8d       	ldd	r17, Y+28	; 0x1c
     cee:	49 2f       	mov	r20, r25
     cf0:	59 2f       	mov	r21, r25
     cf2:	69 2f       	mov	r22, r25
     cf4:	79 2f       	mov	r23, r25
     cf6:	89 2f       	mov	r24, r25
     cf8:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__muldi3>
     cfc:	2b 8b       	std	Y+19, r18	; 0x13
     cfe:	3c 8b       	std	Y+20, r19	; 0x14
     d00:	4d 8b       	std	Y+21, r20	; 0x15
     d02:	58 8f       	std	Y+24, r21	; 0x18
     d04:	69 8f       	std	Y+25, r22	; 0x19
     d06:	7a 8f       	std	Y+26, r23	; 0x1a
     d08:	8b 8f       	std	Y+27, r24	; 0x1b
     d0a:	9c 8f       	std	Y+28, r25	; 0x1c
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
     d0c:	aa a1       	ldd	r26, Y+34	; 0x22
     d0e:	bb a1       	ldd	r27, Y+35	; 0x23
     d10:	1f 96       	adiw	r26, 0x0f	; 15
     d12:	3c 91       	ld	r19, X
     d14:	1f 97       	sbiw	r26, 0x0f	; 15
     d16:	1e 96       	adiw	r26, 0x0e	; 14
     d18:	2c 91       	ld	r18, X
     d1a:	93 2f       	mov	r25, r19
     d1c:	99 0f       	add	r25, r25
     d1e:	99 0b       	sbc	r25, r25
     d20:	a9 80       	ldd	r10, Y+1	; 0x01
     d22:	bb 84       	ldd	r11, Y+11	; 0x0b
     d24:	cc 84       	ldd	r12, Y+12	; 0x0c
     d26:	d9 84       	ldd	r13, Y+9	; 0x09
     d28:	ea 84       	ldd	r14, Y+10	; 0x0a
     d2a:	fe 84       	ldd	r15, Y+14	; 0x0e
     d2c:	0f 85       	ldd	r16, Y+15	; 0x0f
     d2e:	18 89       	ldd	r17, Y+16	; 0x10
     d30:	49 2f       	mov	r20, r25
     d32:	59 2f       	mov	r21, r25
     d34:	69 2f       	mov	r22, r25
     d36:	79 2f       	mov	r23, r25
     d38:	89 2f       	mov	r24, r25
     d3a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__muldi3>
     d3e:	01 e1       	ldi	r16, 0x11	; 17
     d40:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__ashldi3>
     d44:	ab 88       	ldd	r10, Y+19	; 0x13
     d46:	bc 88       	ldd	r11, Y+20	; 0x14
     d48:	cd 88       	ldd	r12, Y+21	; 0x15
     d4a:	d8 8c       	ldd	r13, Y+24	; 0x18
     d4c:	e9 8c       	ldd	r14, Y+25	; 0x19
     d4e:	fa 8c       	ldd	r15, Y+26	; 0x1a
     d50:	0b 8d       	ldd	r16, Y+27	; 0x1b
     d52:	1c 8d       	ldd	r17, Y+28	; 0x1c
     d54:	0e 94 25 11 	call	0x224a	; 0x224a <__adddi3>
     d58:	a2 2e       	mov	r10, r18
     d5a:	b3 2e       	mov	r11, r19
     d5c:	c4 2e       	mov	r12, r20
     d5e:	d5 2e       	mov	r13, r21
     d60:	e6 2e       	mov	r14, r22
     d62:	f7 2e       	mov	r15, r23
     d64:	8b 87       	std	Y+11, r24	; 0x0b
     d66:	9e 87       	std	Y+14, r25	; 0x0e
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;

	/* To avoid divide by zero exception */
	if (var1 != 0) {
		var4 = 1048576 - uncomp_data->pressure;
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
     d68:	ee 89       	ldd	r30, Y+22	; 0x16
     d6a:	ff 89       	ldd	r31, Y+23	; 0x17
     d6c:	40 81       	ld	r20, Z
     d6e:	51 81       	ldd	r21, Z+1	; 0x01
     d70:	62 81       	ldd	r22, Z+2	; 0x02
     d72:	73 81       	ldd	r23, Z+3	; 0x03
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a0 e1       	ldi	r26, 0x10	; 16
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	84 1b       	sub	r24, r20
     d7e:	95 0b       	sbc	r25, r21
     d80:	a6 0b       	sbc	r26, r22
     d82:	b7 0b       	sbc	r27, r23
     d84:	8c 01       	movw	r16, r24
     d86:	9d 01       	movw	r18, r26
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	ba 01       	movw	r22, r20
     d8e:	1a 83       	std	Y+2, r17	; 0x02
     d90:	2b 83       	std	Y+3, r18	; 0x03
     d92:	3c 83       	std	Y+4, r19	; 0x04
     d94:	4d 83       	std	Y+5, r20	; 0x05
     d96:	5e 83       	std	Y+6, r21	; 0x06
     d98:	6f 83       	std	Y+7, r22	; 0x07
     d9a:	78 87       	std	Y+8, r23	; 0x08
     d9c:	28 2f       	mov	r18, r24
     d9e:	31 2f       	mov	r19, r17
     da0:	4b 81       	ldd	r20, Y+3	; 0x03
     da2:	5c 81       	ldd	r21, Y+4	; 0x04
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0f e1       	ldi	r16, 0x1F	; 31
     dae:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__ashldi3>
     db2:	29 83       	std	Y+1, r18	; 0x01
     db4:	3c 87       	std	Y+12, r19	; 0x0c
     db6:	49 87       	std	Y+9, r20	; 0x09
     db8:	5a 87       	std	Y+10, r21	; 0x0a
     dba:	b6 2f       	mov	r27, r22
     dbc:	a7 2f       	mov	r26, r23
     dbe:	8f 87       	std	Y+15, r24	; 0x0f
     dc0:	98 8b       	std	Y+16, r25	; 0x10
     dc2:	ea a1       	ldd	r30, Y+34	; 0x22
     dc4:	fb a1       	ldd	r31, Y+35	; 0x23
     dc6:	35 85       	ldd	r19, Z+13	; 0x0d
     dc8:	24 85       	ldd	r18, Z+12	; 0x0c
     dca:	93 2f       	mov	r25, r19
     dcc:	99 0f       	add	r25, r25
     dce:	99 0b       	sbc	r25, r25
     dd0:	49 2f       	mov	r20, r25
     dd2:	59 2f       	mov	r21, r25
     dd4:	69 2f       	mov	r22, r25
     dd6:	79 2f       	mov	r23, r25
     dd8:	89 2f       	mov	r24, r25
     dda:	03 e2       	ldi	r16, 0x23	; 35
     ddc:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__ashldi3>
     de0:	0b 85       	ldd	r16, Y+11	; 0x0b
     de2:	1e 85       	ldd	r17, Y+14	; 0x0e
     de4:	0e 94 25 11 	call	0x224a	; 0x224a <__adddi3>
     de8:	a2 2e       	mov	r10, r18
     dea:	b3 2e       	mov	r11, r19
     dec:	c4 2e       	mov	r12, r20
     dee:	d5 2e       	mov	r13, r21
     df0:	e6 2e       	mov	r14, r22
     df2:	f7 2e       	mov	r15, r23
     df4:	08 2f       	mov	r16, r24
     df6:	19 2f       	mov	r17, r25
     df8:	29 81       	ldd	r18, Y+1	; 0x01
     dfa:	3c 85       	ldd	r19, Y+12	; 0x0c
     dfc:	49 85       	ldd	r20, Y+9	; 0x09
     dfe:	5a 85       	ldd	r21, Y+10	; 0x0a
     e00:	6b 2f       	mov	r22, r27
     e02:	7a 2f       	mov	r23, r26
     e04:	8f 85       	ldd	r24, Y+15	; 0x0f
     e06:	98 89       	ldd	r25, Y+16	; 0x10
     e08:	0e 94 3a 11 	call	0x2274	; 0x2274 <__subdi3>
     e0c:	0f 2e       	mov	r0, r31
     e0e:	f5 e3       	ldi	r31, 0x35	; 53
     e10:	af 2e       	mov	r10, r31
     e12:	f0 2d       	mov	r31, r0
     e14:	0f 2e       	mov	r0, r31
     e16:	fc e0       	ldi	r31, 0x0C	; 12
     e18:	bf 2e       	mov	r11, r31
     e1a:	f0 2d       	mov	r31, r0
     e1c:	c1 2c       	mov	r12, r1
     e1e:	d1 2c       	mov	r13, r1
     e20:	e1 2c       	mov	r14, r1
     e22:	f1 2c       	mov	r15, r1
     e24:	00 e0       	ldi	r16, 0x00	; 0
     e26:	10 e0       	ldi	r17, 0x00	; 0
     e28:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__muldi3>
     e2c:	a6 2c       	mov	r10, r6
     e2e:	b7 2c       	mov	r11, r7
     e30:	c2 2c       	mov	r12, r2
     e32:	d3 2c       	mov	r13, r3
     e34:	e8 2c       	mov	r14, r8
     e36:	f9 2c       	mov	r15, r9
     e38:	04 2d       	mov	r16, r4
     e3a:	15 2d       	mov	r17, r5
     e3c:	0e 94 19 10 	call	0x2032	; 0x2032 <__divdi3>
     e40:	32 2e       	mov	r3, r18
     e42:	23 2e       	mov	r2, r19
     e44:	49 83       	std	Y+1, r20	; 0x01
     e46:	5b 87       	std	Y+11, r21	; 0x0b
     e48:	6c 87       	std	Y+12, r22	; 0x0c
     e4a:	47 2e       	mov	r4, r23
     e4c:	58 2e       	mov	r5, r24
     e4e:	69 2e       	mov	r6, r25
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
     e50:	12 2f       	mov	r17, r18
     e52:	d3 2e       	mov	r13, r19
     e54:	e4 2e       	mov	r14, r20
     e56:	b5 2f       	mov	r27, r21
     e58:	f6 2f       	mov	r31, r22
     e5a:	e7 2f       	mov	r30, r23
     e5c:	f8 2e       	mov	r15, r24
     e5e:	09 2f       	mov	r16, r25
     e60:	a0 e0       	ldi	r26, 0x00	; 0
     e62:	0e 94 43 11 	call	0x2286	; 0x2286 <__cmpdi2_s8>
     e66:	84 f4       	brge	.+32     	; 0xe88 <bme280_compensate_data+0x596>
     e68:	21 50       	subi	r18, 0x01	; 1
     e6a:	30 4e       	sbci	r19, 0xE0	; 224
     e6c:	4f 4f       	sbci	r20, 0xFF	; 255
     e6e:	5f 4f       	sbci	r21, 0xFF	; 255
     e70:	6f 4f       	sbci	r22, 0xFF	; 255
     e72:	7f 4f       	sbci	r23, 0xFF	; 255
     e74:	8f 4f       	sbci	r24, 0xFF	; 255
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	12 2f       	mov	r17, r18
     e7a:	d3 2e       	mov	r13, r19
     e7c:	e4 2e       	mov	r14, r20
     e7e:	b5 2f       	mov	r27, r21
     e80:	f6 2f       	mov	r31, r22
     e82:	e7 2f       	mov	r30, r23
     e84:	f8 2e       	mov	r15, r24
     e86:	09 2f       	mov	r16, r25
     e88:	21 2f       	mov	r18, r17
     e8a:	3d 2d       	mov	r19, r13
     e8c:	4e 2d       	mov	r20, r14
     e8e:	5b 2f       	mov	r21, r27
     e90:	6f 2f       	mov	r22, r31
     e92:	7e 2f       	mov	r23, r30
     e94:	8f 2d       	mov	r24, r15
     e96:	90 2f       	mov	r25, r16
     e98:	0d e0       	ldi	r16, 0x0D	; 13
     e9a:	0e 94 07 11 	call	0x220e	; 0x220e <__ashrdi3>
     e9e:	29 87       	std	Y+9, r18	; 0x09
     ea0:	3a 87       	std	Y+10, r19	; 0x0a
     ea2:	4e 87       	std	Y+14, r20	; 0x0e
     ea4:	75 2e       	mov	r7, r21
     ea6:	86 2e       	mov	r8, r22
     ea8:	97 2e       	mov	r9, r23
     eaa:	8f 87       	std	Y+15, r24	; 0x0f
     eac:	98 8b       	std	Y+16, r25	; 0x10
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
     eae:	aa a1       	ldd	r26, Y+34	; 0x22
     eb0:	bb a1       	ldd	r27, Y+35	; 0x23
     eb2:	57 96       	adiw	r26, 0x17	; 23
     eb4:	3c 91       	ld	r19, X
     eb6:	57 97       	sbiw	r26, 0x17	; 23
     eb8:	56 96       	adiw	r26, 0x16	; 22
     eba:	2c 91       	ld	r18, X
     ebc:	93 2f       	mov	r25, r19
     ebe:	99 0f       	add	r25, r25
     ec0:	99 0b       	sbc	r25, r25
     ec2:	a9 84       	ldd	r10, Y+9	; 0x09
     ec4:	ba 84       	ldd	r11, Y+10	; 0x0a
     ec6:	c4 2e       	mov	r12, r20
     ec8:	d7 2c       	mov	r13, r7
     eca:	e8 2c       	mov	r14, r8
     ecc:	f9 2c       	mov	r15, r9
     ece:	08 2f       	mov	r16, r24
     ed0:	18 89       	ldd	r17, Y+16	; 0x10
     ed2:	49 2f       	mov	r20, r25
     ed4:	59 2f       	mov	r21, r25
     ed6:	69 2f       	mov	r22, r25
     ed8:	79 2f       	mov	r23, r25
     eda:	89 2f       	mov	r24, r25
     edc:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__muldi3>
     ee0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__muldi3>
     ee4:	92 2e       	mov	r9, r18
     ee6:	a3 2e       	mov	r10, r19
     ee8:	b4 2e       	mov	r11, r20
     eea:	c5 2e       	mov	r12, r21
     eec:	69 87       	std	Y+9, r22	; 0x09
     eee:	7a 87       	std	Y+10, r23	; 0x0a
     ef0:	78 2e       	mov	r7, r24
     ef2:	89 2e       	mov	r8, r25
     ef4:	a0 e0       	ldi	r26, 0x00	; 0
     ef6:	0e 94 43 11 	call	0x2286	; 0x2286 <__cmpdi2_s8>
     efa:	84 f4       	brge	.+32     	; 0xf1c <bme280_compensate_data+0x62a>
     efc:	21 50       	subi	r18, 0x01	; 1
     efe:	31 09       	sbc	r19, r1
     f00:	41 09       	sbc	r20, r1
     f02:	5e 4f       	sbci	r21, 0xFE	; 254
     f04:	6f 4f       	sbci	r22, 0xFF	; 255
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	8f 4f       	sbci	r24, 0xFF	; 255
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	92 2e       	mov	r9, r18
     f0e:	a3 2e       	mov	r10, r19
     f10:	b4 2e       	mov	r11, r20
     f12:	c5 2e       	mov	r12, r21
     f14:	69 87       	std	Y+9, r22	; 0x09
     f16:	7a 87       	std	Y+10, r23	; 0x0a
     f18:	78 2e       	mov	r7, r24
     f1a:	89 2e       	mov	r8, r25
     f1c:	29 2d       	mov	r18, r9
     f1e:	3a 2d       	mov	r19, r10
     f20:	4b 2d       	mov	r20, r11
     f22:	5c 2d       	mov	r21, r12
     f24:	69 85       	ldd	r22, Y+9	; 0x09
     f26:	7a 85       	ldd	r23, Y+10	; 0x0a
     f28:	87 2d       	mov	r24, r7
     f2a:	98 2d       	mov	r25, r8
     f2c:	09 e1       	ldi	r16, 0x19	; 25
     f2e:	0e 94 07 11 	call	0x220e	; 0x220e <__ashrdi3>
     f32:	a3 2c       	mov	r10, r3
     f34:	b2 2c       	mov	r11, r2
     f36:	c9 80       	ldd	r12, Y+1	; 0x01
     f38:	db 84       	ldd	r13, Y+11	; 0x0b
     f3a:	ec 84       	ldd	r14, Y+12	; 0x0c
     f3c:	f4 2c       	mov	r15, r4
     f3e:	05 2d       	mov	r16, r5
     f40:	16 2d       	mov	r17, r6
     f42:	0e 94 25 11 	call	0x224a	; 0x224a <__adddi3>
     f46:	29 87       	std	Y+9, r18	; 0x09
     f48:	3a 87       	std	Y+10, r19	; 0x0a
     f4a:	4e 87       	std	Y+14, r20	; 0x0e
     f4c:	5f 87       	std	Y+15, r21	; 0x0f
     f4e:	68 8b       	std	Y+16, r22	; 0x10
     f50:	7b 8b       	std	Y+19, r23	; 0x13
     f52:	8c 8b       	std	Y+20, r24	; 0x14
     f54:	9d 8b       	std	Y+21, r25	; 0x15
     f56:	ea a1       	ldd	r30, Y+34	; 0x22
     f58:	fb a1       	ldd	r31, Y+35	; 0x23
     f5a:	35 89       	ldd	r19, Z+21	; 0x15
     f5c:	24 89       	ldd	r18, Z+20	; 0x14
     f5e:	93 2f       	mov	r25, r19
     f60:	99 0f       	add	r25, r25
     f62:	99 0b       	sbc	r25, r25
     f64:	49 2f       	mov	r20, r25
     f66:	59 2f       	mov	r21, r25
     f68:	69 2f       	mov	r22, r25
     f6a:	79 2f       	mov	r23, r25
     f6c:	89 2f       	mov	r24, r25
     f6e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__muldi3>
     f72:	a2 2e       	mov	r10, r18
     f74:	b3 2e       	mov	r11, r19
     f76:	c4 2e       	mov	r12, r20
     f78:	75 2e       	mov	r7, r21
     f7a:	86 2e       	mov	r8, r22
     f7c:	97 2e       	mov	r9, r23
     f7e:	28 2e       	mov	r2, r24
     f80:	39 2e       	mov	r3, r25
     f82:	a0 e0       	ldi	r26, 0x00	; 0
     f84:	0e 94 43 11 	call	0x2286	; 0x2286 <__cmpdi2_s8>
     f88:	84 f4       	brge	.+32     	; 0xfaa <bme280_compensate_data+0x6b8>
     f8a:	21 50       	subi	r18, 0x01	; 1
     f8c:	31 09       	sbc	r19, r1
     f8e:	48 4f       	sbci	r20, 0xF8	; 248
     f90:	5f 4f       	sbci	r21, 0xFF	; 255
     f92:	6f 4f       	sbci	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	8f 4f       	sbci	r24, 0xFF	; 255
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	a2 2e       	mov	r10, r18
     f9c:	b3 2e       	mov	r11, r19
     f9e:	c4 2e       	mov	r12, r20
     fa0:	75 2e       	mov	r7, r21
     fa2:	86 2e       	mov	r8, r22
     fa4:	97 2e       	mov	r9, r23
     fa6:	28 2e       	mov	r2, r24
     fa8:	39 2e       	mov	r3, r25
     faa:	2a 2d       	mov	r18, r10
     fac:	3b 2d       	mov	r19, r11
     fae:	4c 2d       	mov	r20, r12
     fb0:	57 2d       	mov	r21, r7
     fb2:	68 2d       	mov	r22, r8
     fb4:	79 2d       	mov	r23, r9
     fb6:	82 2d       	mov	r24, r2
     fb8:	93 2d       	mov	r25, r3
     fba:	03 e1       	ldi	r16, 0x13	; 19
     fbc:	0e 94 07 11 	call	0x220e	; 0x220e <__ashrdi3>
     fc0:	a2 2e       	mov	r10, r18
     fc2:	b3 2e       	mov	r11, r19
     fc4:	c4 2e       	mov	r12, r20
     fc6:	d5 2e       	mov	r13, r21
     fc8:	e6 2e       	mov	r14, r22
     fca:	f7 2e       	mov	r15, r23
     fcc:	08 2f       	mov	r16, r24
     fce:	19 2f       	mov	r17, r25
     fd0:	29 85       	ldd	r18, Y+9	; 0x09
     fd2:	3a 85       	ldd	r19, Y+10	; 0x0a
     fd4:	4e 85       	ldd	r20, Y+14	; 0x0e
     fd6:	5f 85       	ldd	r21, Y+15	; 0x0f
     fd8:	68 89       	ldd	r22, Y+16	; 0x10
     fda:	7b 89       	ldd	r23, Y+19	; 0x13
     fdc:	8c 89       	ldd	r24, Y+20	; 0x14
     fde:	9d 89       	ldd	r25, Y+21	; 0x15
     fe0:	0e 94 25 11 	call	0x224a	; 0x224a <__adddi3>
     fe4:	92 2e       	mov	r9, r18
     fe6:	a3 2e       	mov	r10, r19
     fe8:	b4 2e       	mov	r11, r20
     fea:	c5 2e       	mov	r12, r21
     fec:	d6 2e       	mov	r13, r22
     fee:	e7 2e       	mov	r14, r23
     ff0:	78 2e       	mov	r7, r24
     ff2:	89 2e       	mov	r8, r25
     ff4:	a0 e0       	ldi	r26, 0x00	; 0
     ff6:	0e 94 43 11 	call	0x2286	; 0x2286 <__cmpdi2_s8>
     ffa:	84 f4       	brge	.+32     	; 0x101c <bme280_compensate_data+0x72a>
     ffc:	21 50       	subi	r18, 0x01	; 1
     ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    1000:	4f 4f       	sbci	r20, 0xFF	; 255
    1002:	5f 4f       	sbci	r21, 0xFF	; 255
    1004:	6f 4f       	sbci	r22, 0xFF	; 255
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	8f 4f       	sbci	r24, 0xFF	; 255
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	92 2e       	mov	r9, r18
    100e:	a3 2e       	mov	r10, r19
    1010:	b4 2e       	mov	r11, r20
    1012:	c5 2e       	mov	r12, r21
    1014:	d6 2e       	mov	r13, r22
    1016:	e7 2e       	mov	r14, r23
    1018:	78 2e       	mov	r7, r24
    101a:	89 2e       	mov	r8, r25
    101c:	29 2d       	mov	r18, r9
    101e:	3a 2d       	mov	r19, r10
    1020:	4b 2d       	mov	r20, r11
    1022:	5c 2d       	mov	r21, r12
    1024:	6d 2d       	mov	r22, r13
    1026:	7e 2d       	mov	r23, r14
    1028:	87 2d       	mov	r24, r7
    102a:	98 2d       	mov	r25, r8
    102c:	08 e0       	ldi	r16, 0x08	; 8
    102e:	0e 94 07 11 	call	0x220e	; 0x220e <__ashrdi3>
    1032:	a2 2e       	mov	r10, r18
    1034:	b3 2e       	mov	r11, r19
    1036:	c4 2e       	mov	r12, r20
    1038:	d5 2e       	mov	r13, r21
    103a:	e6 2e       	mov	r14, r22
    103c:	f7 2e       	mov	r15, r23
    103e:	e8 2f       	mov	r30, r24
    1040:	19 2f       	mov	r17, r25
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
    1042:	aa a1       	ldd	r26, Y+34	; 0x22
    1044:	bb a1       	ldd	r27, Y+35	; 0x23
    1046:	53 96       	adiw	r26, 0x13	; 19
    1048:	3c 91       	ld	r19, X
    104a:	53 97       	sbiw	r26, 0x13	; 19
    104c:	52 96       	adiw	r26, 0x12	; 18
    104e:	2c 91       	ld	r18, X
    1050:	93 2f       	mov	r25, r19
    1052:	99 0f       	add	r25, r25
    1054:	99 0b       	sbc	r25, r25
    1056:	49 2f       	mov	r20, r25
    1058:	59 2f       	mov	r21, r25
    105a:	69 2f       	mov	r22, r25
    105c:	79 2f       	mov	r23, r25
    105e:	89 2f       	mov	r24, r25
    1060:	04 e0       	ldi	r16, 0x04	; 4
    1062:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__ashldi3>
    1066:	0e 2f       	mov	r16, r30
    1068:	0e 94 25 11 	call	0x224a	; 0x224a <__adddi3>
    106c:	92 2e       	mov	r9, r18
    106e:	a3 2e       	mov	r10, r19
    1070:	b4 2e       	mov	r11, r20
    1072:	c5 2e       	mov	r12, r21
    1074:	d6 2e       	mov	r13, r22
    1076:	e7 2e       	mov	r14, r23
    1078:	78 2e       	mov	r7, r24
    107a:	89 2e       	mov	r8, r25
    107c:	a0 e0       	ldi	r26, 0x00	; 0
    107e:	0e 94 43 11 	call	0x2286	; 0x2286 <__cmpdi2_s8>
    1082:	5c f4       	brge	.+22     	; 0x109a <bme280_compensate_data+0x7a8>
    1084:	a1 e0       	ldi	r26, 0x01	; 1
    1086:	0e 94 2e 11 	call	0x225c	; 0x225c <__adddi3_s8>
    108a:	92 2e       	mov	r9, r18
    108c:	a3 2e       	mov	r10, r19
    108e:	b4 2e       	mov	r11, r20
    1090:	c5 2e       	mov	r12, r21
    1092:	d6 2e       	mov	r13, r22
    1094:	e7 2e       	mov	r14, r23
    1096:	78 2e       	mov	r7, r24
    1098:	89 2e       	mov	r8, r25
    109a:	29 2d       	mov	r18, r9
    109c:	3a 2d       	mov	r19, r10
    109e:	4b 2d       	mov	r20, r11
    10a0:	5c 2d       	mov	r21, r12
    10a2:	6d 2d       	mov	r22, r13
    10a4:	7e 2d       	mov	r23, r14
    10a6:	87 2d       	mov	r24, r7
    10a8:	98 2d       	mov	r25, r8
    10aa:	01 e0       	ldi	r16, 0x01	; 1
    10ac:	0e 94 07 11 	call	0x220e	; 0x220e <__ashrdi3>
    10b0:	02 e0       	ldi	r16, 0x02	; 2
    10b2:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__ashldi3>
    10b6:	82 2e       	mov	r8, r18
    10b8:	93 2e       	mov	r9, r19
    10ba:	64 2e       	mov	r6, r20
    10bc:	75 2e       	mov	r7, r21
    10be:	b6 2f       	mov	r27, r22
    10c0:	a7 2f       	mov	r26, r23
    10c2:	f8 2f       	mov	r31, r24
    10c4:	e9 2f       	mov	r30, r25
    10c6:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__ashldi3>
    10ca:	a2 2e       	mov	r10, r18
    10cc:	b3 2e       	mov	r11, r19
    10ce:	c4 2e       	mov	r12, r20
    10d0:	d5 2e       	mov	r13, r21
    10d2:	e6 2e       	mov	r14, r22
    10d4:	f7 2e       	mov	r15, r23
    10d6:	08 2f       	mov	r16, r24
    10d8:	19 2f       	mov	r17, r25
    10da:	28 2d       	mov	r18, r8
    10dc:	39 2d       	mov	r19, r9
    10de:	46 2d       	mov	r20, r6
    10e0:	57 2d       	mov	r21, r7
    10e2:	6b 2f       	mov	r22, r27
    10e4:	7a 2f       	mov	r23, r26
    10e6:	8f 2f       	mov	r24, r31
    10e8:	9e 2f       	mov	r25, r30
    10ea:	0e 94 25 11 	call	0x224a	; 0x224a <__adddi3>
    10ee:	82 2e       	mov	r8, r18
    10f0:	93 2e       	mov	r9, r19
    10f2:	64 2e       	mov	r6, r20
    10f4:	75 2e       	mov	r7, r21
    10f6:	b6 2f       	mov	r27, r22
    10f8:	a7 2f       	mov	r26, r23
    10fa:	f8 2f       	mov	r31, r24
    10fc:	e9 2f       	mov	r30, r25
    10fe:	02 e0       	ldi	r16, 0x02	; 2
    1100:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__ashldi3>
    1104:	a2 2e       	mov	r10, r18
    1106:	b3 2e       	mov	r11, r19
    1108:	c4 2e       	mov	r12, r20
    110a:	d5 2e       	mov	r13, r21
    110c:	e6 2e       	mov	r14, r22
    110e:	f7 2e       	mov	r15, r23
    1110:	08 2f       	mov	r16, r24
    1112:	19 2f       	mov	r17, r25
    1114:	28 2d       	mov	r18, r8
    1116:	39 2d       	mov	r19, r9
    1118:	46 2d       	mov	r20, r6
    111a:	57 2d       	mov	r21, r7
    111c:	6b 2f       	mov	r22, r27
    111e:	7a 2f       	mov	r23, r26
    1120:	8f 2f       	mov	r24, r31
    1122:	9e 2f       	mov	r25, r30
    1124:	0e 94 25 11 	call	0x224a	; 0x224a <__adddi3>
    1128:	92 2e       	mov	r9, r18
    112a:	a3 2e       	mov	r10, r19
    112c:	b4 2e       	mov	r11, r20
    112e:	c5 2e       	mov	r12, r21
    1130:	d6 2e       	mov	r13, r22
    1132:	e7 2e       	mov	r14, r23
    1134:	78 2e       	mov	r7, r24
    1136:	89 2e       	mov	r8, r25
    1138:	a0 e0       	ldi	r26, 0x00	; 0
    113a:	0e 94 43 11 	call	0x2286	; 0x2286 <__cmpdi2_s8>
    113e:	5c f4       	brge	.+22     	; 0x1156 <bme280_compensate_data+0x864>
    1140:	af e7       	ldi	r26, 0x7F	; 127
    1142:	0e 94 2e 11 	call	0x225c	; 0x225c <__adddi3_s8>
    1146:	92 2e       	mov	r9, r18
    1148:	a3 2e       	mov	r10, r19
    114a:	b4 2e       	mov	r11, r20
    114c:	c5 2e       	mov	r12, r21
    114e:	d6 2e       	mov	r13, r22
    1150:	e7 2e       	mov	r14, r23
    1152:	78 2e       	mov	r7, r24
    1154:	89 2e       	mov	r8, r25
    1156:	29 2d       	mov	r18, r9
    1158:	3a 2d       	mov	r19, r10
    115a:	4b 2d       	mov	r20, r11
    115c:	5c 2d       	mov	r21, r12
    115e:	6d 2d       	mov	r22, r13
    1160:	7e 2d       	mov	r23, r14
    1162:	87 2d       	mov	r24, r7
    1164:	98 2d       	mov	r25, r8
    1166:	07 e0       	ldi	r16, 0x07	; 7
    1168:	0e 94 07 11 	call	0x220e	; 0x220e <__ashrdi3>
    116c:	82 2f       	mov	r24, r18
    116e:	93 2f       	mov	r25, r19
    1170:	a4 2f       	mov	r26, r20
    1172:	b5 2f       	mov	r27, r21

		if (pressure < pressure_min)
    1174:	80 3c       	cpi	r24, 0xC0	; 192
    1176:	e6 ec       	ldi	r30, 0xC6	; 198
    1178:	9e 07       	cpc	r25, r30
    117a:	ed e2       	ldi	r30, 0x2D	; 45
    117c:	ae 07       	cpc	r26, r30
    117e:	b1 05       	cpc	r27, r1
    1180:	88 f0       	brcs	.+34     	; 0x11a4 <bme280_compensate_data+0x8b2>
    1182:	81 3c       	cpi	r24, 0xC1	; 193
    1184:	f8 ed       	ldi	r31, 0xD8	; 216
    1186:	9f 07       	cpc	r25, r31
    1188:	f7 ea       	ldi	r31, 0xA7	; 167
    118a:	af 07       	cpc	r26, r31
    118c:	b1 05       	cpc	r27, r1
    118e:	70 f0       	brcs	.+28     	; 0x11ac <bme280_compensate_data+0x8ba>
    1190:	80 ec       	ldi	r24, 0xC0	; 192
    1192:	98 ed       	ldi	r25, 0xD8	; 216
    1194:	a7 ea       	ldi	r26, 0xA7	; 167
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	09 c0       	rjmp	.+18     	; 0x11ac <bme280_compensate_data+0x8ba>
			pressure = pressure_min;
		else if (pressure > pressure_max)
			pressure = pressure_max;
	} else {
		pressure = pressure_min;
    119a:	80 ec       	ldi	r24, 0xC0	; 192
    119c:	96 ec       	ldi	r25, 0xC6	; 198
    119e:	ad e2       	ldi	r26, 0x2D	; 45
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <bme280_compensate_data+0x8ba>
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);

		if (pressure < pressure_min)
			pressure = pressure_min;
    11a4:	80 ec       	ldi	r24, 0xC0	; 192
    11a6:	96 ec       	ldi	r25, 0xC6	; 198
    11a8:	ad e2       	ldi	r26, 0x2D	; 45
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
		}
		if (sensor_comp & BME280_PRESS) {
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
    11ac:	e9 89       	ldd	r30, Y+17	; 0x11
    11ae:	fa 89       	ldd	r31, Y+18	; 0x12
    11b0:	80 83       	st	Z, r24
    11b2:	91 83       	std	Z+1, r25	; 0x01
    11b4:	a2 83       	std	Z+2, r26	; 0x02
    11b6:	b3 83       	std	Z+3, r27	; 0x03
		}
		if (sensor_comp & BME280_HUM) {
    11b8:	fd 85       	ldd	r31, Y+13	; 0x0d
    11ba:	f2 ff       	sbrs	r31, 2
    11bc:	55 c1       	rjmp	.+682    	; 0x1468 <bme280_compensate_data+0xb76>
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;

	var1 = calib_data->t_fine - ((int32_t)76800);
    11be:	aa a1       	ldd	r26, Y+34	; 0x22
    11c0:	bb a1       	ldd	r27, Y+35	; 0x23
    11c2:	91 96       	adiw	r26, 0x21	; 33
    11c4:	8d 90       	ld	r8, X+
    11c6:	9d 90       	ld	r9, X+
    11c8:	ad 90       	ld	r10, X+
    11ca:	bc 90       	ld	r11, X
    11cc:	94 97       	sbiw	r26, 0x24	; 36
    11ce:	bc e2       	ldi	r27, 0x2C	; 44
    11d0:	9b 1a       	sub	r9, r27
    11d2:	b1 e0       	ldi	r27, 0x01	; 1
    11d4:	ab 0a       	sbc	r10, r27
    11d6:	b1 08       	sbc	r11, r1
	var2 = (int32_t)(uncomp_data->humidity * 16384);
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
	var4 = ((int32_t)calib_data->dig_H5) * var1;
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
    11d8:	ee 89       	ldd	r30, Y+22	; 0x16
    11da:	ff 89       	ldd	r31, Y+23	; 0x17
    11dc:	c0 84       	ldd	r12, Z+8	; 0x08
    11de:	d1 84       	ldd	r13, Z+9	; 0x09
    11e0:	e2 84       	ldd	r14, Z+10	; 0x0a
    11e2:	f3 84       	ldd	r15, Z+11	; 0x0b
    11e4:	0b 2e       	mov	r0, r27
    11e6:	be e0       	ldi	r27, 0x0E	; 14
    11e8:	cc 0c       	add	r12, r12
    11ea:	dd 1c       	adc	r13, r13
    11ec:	ee 1c       	adc	r14, r14
    11ee:	ff 1c       	adc	r15, r15
    11f0:	ba 95       	dec	r27
    11f2:	d1 f7       	brne	.-12     	; 0x11e8 <bme280_compensate_data+0x8f6>
    11f4:	b0 2d       	mov	r27, r0
    11f6:	aa a1       	ldd	r26, Y+34	; 0x22
    11f8:	bb a1       	ldd	r27, Y+35	; 0x23
    11fa:	5c 96       	adiw	r26, 0x1c	; 28
    11fc:	4d 91       	ld	r20, X+
    11fe:	5c 91       	ld	r21, X
    1200:	5d 97       	sbiw	r26, 0x1d	; 29
    1202:	05 2e       	mov	r0, r21
    1204:	00 0c       	add	r0, r0
    1206:	66 0b       	sbc	r22, r22
    1208:	77 0b       	sbc	r23, r23
    120a:	03 2e       	mov	r0, r19
    120c:	34 e1       	ldi	r19, 0x14	; 20
    120e:	44 0f       	add	r20, r20
    1210:	55 1f       	adc	r21, r21
    1212:	66 1f       	adc	r22, r22
    1214:	77 1f       	adc	r23, r23
    1216:	3a 95       	dec	r19
    1218:	d1 f7       	brne	.-12     	; 0x120e <bme280_compensate_data+0x91c>
    121a:	30 2d       	mov	r19, r0
    121c:	c4 1a       	sub	r12, r20
    121e:	d5 0a       	sbc	r13, r21
    1220:	e6 0a       	sbc	r14, r22
    1222:	f7 0a       	sbc	r15, r23
    1224:	5e 96       	adiw	r26, 0x1e	; 30
    1226:	0d 90       	ld	r0, X+
    1228:	bc 91       	ld	r27, X
    122a:	a0 2d       	mov	r26, r0
    122c:	a5 01       	movw	r20, r10
    122e:	94 01       	movw	r18, r8
    1230:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__mulshisi3>
    1234:	97 01       	movw	r18, r14
    1236:	86 01       	movw	r16, r12
    1238:	06 1b       	sub	r16, r22
    123a:	17 0b       	sbc	r17, r23
    123c:	28 0b       	sbc	r18, r24
    123e:	39 0b       	sbc	r19, r25
    1240:	d9 01       	movw	r26, r18
    1242:	c8 01       	movw	r24, r16
    1244:	90 5c       	subi	r25, 0xC0	; 192
    1246:	af 4f       	sbci	r26, 0xFF	; 255
    1248:	bf 4f       	sbci	r27, 0xFF	; 255
    124a:	6c 01       	movw	r12, r24
    124c:	7d 01       	movw	r14, r26
    124e:	bb 23       	and	r27, r27
    1250:	34 f4       	brge	.+12     	; 0x125e <bme280_compensate_data+0x96c>
    1252:	1f ef       	ldi	r17, 0xFF	; 255
    1254:	c1 0e       	add	r12, r17
    1256:	1f e7       	ldi	r17, 0x7F	; 127
    1258:	d1 1e       	adc	r13, r17
    125a:	e1 1c       	adc	r14, r1
    125c:	f1 1c       	adc	r15, r1
    125e:	0b 2e       	mov	r0, r27
    1260:	bf e0       	ldi	r27, 0x0F	; 15
    1262:	f5 94       	asr	r15
    1264:	e7 94       	ror	r14
    1266:	d7 94       	ror	r13
    1268:	c7 94       	ror	r12
    126a:	ba 95       	dec	r27
    126c:	d1 f7       	brne	.-12     	; 0x1262 <bme280_compensate_data+0x970>
    126e:	b0 2d       	mov	r27, r0
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
    1270:	ea a1       	ldd	r30, Y+34	; 0x22
    1272:	fb a1       	ldd	r31, Y+35	; 0x23
    1274:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	a5 01       	movw	r20, r10
    127a:	94 01       	movw	r18, r8
    127c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__muluhisi3>
    1280:	2b 01       	movw	r4, r22
    1282:	3c 01       	movw	r6, r24
    1284:	99 23       	and	r25, r25
    1286:	34 f4       	brge	.+12     	; 0x1294 <bme280_compensate_data+0x9a2>
    1288:	ff ef       	ldi	r31, 0xFF	; 255
    128a:	4f 0e       	add	r4, r31
    128c:	f7 e0       	ldi	r31, 0x07	; 7
    128e:	5f 1e       	adc	r5, r31
    1290:	61 1c       	adc	r6, r1
    1292:	71 1c       	adc	r7, r1
    1294:	03 2e       	mov	r0, r19
    1296:	3b e0       	ldi	r19, 0x0B	; 11
    1298:	75 94       	asr	r7
    129a:	67 94       	ror	r6
    129c:	57 94       	ror	r5
    129e:	47 94       	ror	r4
    12a0:	3a 95       	dec	r19
    12a2:	d1 f7       	brne	.-12     	; 0x1298 <bme280_compensate_data+0x9a6>
    12a4:	30 2d       	mov	r19, r0
    12a6:	00 e8       	ldi	r16, 0x80	; 128
    12a8:	50 0e       	add	r5, r16
    12aa:	61 1c       	adc	r6, r1
    12ac:	71 1c       	adc	r7, r1
    12ae:	ea a1       	ldd	r30, Y+34	; 0x22
    12b0:	fb a1       	ldd	r31, Y+35	; 0x23
    12b2:	a0 a1       	ldd	r26, Z+32	; 0x20
    12b4:	0a 2e       	mov	r0, r26
    12b6:	00 0c       	add	r0, r0
    12b8:	bb 0b       	sbc	r27, r27
    12ba:	a5 01       	movw	r20, r10
    12bc:	94 01       	movw	r18, r8
    12be:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__mulshisi3>
    12c2:	8b 01       	movw	r16, r22
    12c4:	9c 01       	movw	r18, r24
    12c6:	99 23       	and	r25, r25
    12c8:	24 f4       	brge	.+8      	; 0x12d2 <bme280_compensate_data+0x9e0>
    12ca:	01 50       	subi	r16, 0x01	; 1
    12cc:	1c 4f       	sbci	r17, 0xFC	; 252
    12ce:	2f 4f       	sbci	r18, 0xFF	; 255
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
    12d2:	c9 01       	movw	r24, r18
    12d4:	b8 01       	movw	r22, r16
    12d6:	05 2e       	mov	r0, r21
    12d8:	5a e0       	ldi	r21, 0x0A	; 10
    12da:	95 95       	asr	r25
    12dc:	87 95       	ror	r24
    12de:	77 95       	ror	r23
    12e0:	67 95       	ror	r22
    12e2:	5a 95       	dec	r21
    12e4:	d1 f7       	brne	.-12     	; 0x12da <bme280_compensate_data+0x9e8>
    12e6:	50 2d       	mov	r21, r0
    12e8:	a3 01       	movw	r20, r6
    12ea:	92 01       	movw	r18, r4
    12ec:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__mulsi3>
    12f0:	8b 01       	movw	r16, r22
    12f2:	9c 01       	movw	r18, r24
    12f4:	99 23       	and	r25, r25
    12f6:	24 f4       	brge	.+8      	; 0x1300 <bme280_compensate_data+0xa0e>
    12f8:	01 50       	subi	r16, 0x01	; 1
    12fa:	1c 4f       	sbci	r17, 0xFC	; 252
    12fc:	2f 4f       	sbci	r18, 0xFF	; 255
    12fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1300:	d9 01       	movw	r26, r18
    1302:	c8 01       	movw	r24, r16
    1304:	07 2e       	mov	r0, r23
    1306:	7a e0       	ldi	r23, 0x0A	; 10
    1308:	b5 95       	asr	r27
    130a:	a7 95       	ror	r26
    130c:	97 95       	ror	r25
    130e:	87 95       	ror	r24
    1310:	7a 95       	dec	r23
    1312:	d1 f7       	brne	.-12     	; 0x1308 <bme280_compensate_data+0xa16>
    1314:	70 2d       	mov	r23, r0
    1316:	9c 01       	movw	r18, r24
    1318:	ad 01       	movw	r20, r26
    131a:	40 5e       	subi	r20, 0xE0	; 224
    131c:	5f 4f       	sbci	r21, 0xFF	; 255
    131e:	ea a1       	ldd	r30, Y+34	; 0x22
    1320:	fb a1       	ldd	r31, Y+35	; 0x23
    1322:	a1 8d       	ldd	r26, Z+25	; 0x19
    1324:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1326:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__mulshisi3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	90 5e       	subi	r25, 0xE0	; 224
    1330:	af 4f       	sbci	r26, 0xFF	; 255
    1332:	bf 4f       	sbci	r27, 0xFF	; 255
	var3 = var5 * var2;
    1334:	8c 01       	movw	r16, r24
    1336:	9d 01       	movw	r18, r26
    1338:	bb 23       	and	r27, r27
    133a:	24 f4       	brge	.+8      	; 0x1344 <bme280_compensate_data+0xa52>
    133c:	01 50       	subi	r16, 0x01	; 1
    133e:	10 4c       	sbci	r17, 0xC0	; 192
    1340:	2f 4f       	sbci	r18, 0xFF	; 255
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	a9 01       	movw	r20, r18
    1346:	98 01       	movw	r18, r16
    1348:	01 2e       	mov	r0, r17
    134a:	1e e0       	ldi	r17, 0x0E	; 14
    134c:	55 95       	asr	r21
    134e:	47 95       	ror	r20
    1350:	37 95       	ror	r19
    1352:	27 95       	ror	r18
    1354:	1a 95       	dec	r17
    1356:	d1 f7       	brne	.-12     	; 0x134c <bme280_compensate_data+0xa5a>
    1358:	10 2d       	mov	r17, r0
    135a:	c7 01       	movw	r24, r14
    135c:	b6 01       	movw	r22, r12
    135e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__mulsi3>
    1362:	6b 01       	movw	r12, r22
    1364:	7c 01       	movw	r14, r24
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	ff 20       	and	r15, r15
    136c:	24 f4       	brge	.+8      	; 0x1376 <bme280_compensate_data+0xa84>
    136e:	81 50       	subi	r24, 0x01	; 1
    1370:	90 48       	sbci	r25, 0x80	; 128
    1372:	af 4f       	sbci	r26, 0xFF	; 255
    1374:	bf 4f       	sbci	r27, 0xFF	; 255
    1376:	bc 01       	movw	r22, r24
    1378:	cd 01       	movw	r24, r26
    137a:	05 2e       	mov	r0, r21
    137c:	5f e0       	ldi	r21, 0x0F	; 15
    137e:	95 95       	asr	r25
    1380:	87 95       	ror	r24
    1382:	77 95       	ror	r23
    1384:	67 95       	ror	r22
    1386:	5a 95       	dec	r21
    1388:	d1 f7       	brne	.-12     	; 0x137e <bme280_compensate_data+0xa8c>
    138a:	50 2d       	mov	r21, r0
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
    138c:	9b 01       	movw	r18, r22
    138e:	ac 01       	movw	r20, r24
    1390:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__mulsi3>
    1394:	8b 01       	movw	r16, r22
    1396:	9c 01       	movw	r18, r24
    1398:	99 23       	and	r25, r25
    139a:	24 f4       	brge	.+8      	; 0x13a4 <bme280_compensate_data+0xab2>
    139c:	01 58       	subi	r16, 0x81	; 129
    139e:	1f 4f       	sbci	r17, 0xFF	; 255
    13a0:	2f 4f       	sbci	r18, 0xFF	; 255
    13a2:	3f 4f       	sbci	r19, 0xFF	; 255
    13a4:	a9 01       	movw	r20, r18
    13a6:	98 01       	movw	r18, r16
    13a8:	68 94       	set
    13aa:	16 f8       	bld	r1, 6
    13ac:	55 95       	asr	r21
    13ae:	47 95       	ror	r20
    13b0:	37 95       	ror	r19
    13b2:	27 95       	ror	r18
    13b4:	16 94       	lsr	r1
    13b6:	d1 f7       	brne	.-12     	; 0x13ac <bme280_compensate_data+0xaba>
    13b8:	ea a1       	ldd	r30, Y+34	; 0x22
    13ba:	fb a1       	ldd	r31, Y+35	; 0x23
    13bc:	a0 8d       	ldd	r26, Z+24	; 0x18
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__muluhisi3>
    13c4:	8b 01       	movw	r16, r22
    13c6:	9c 01       	movw	r18, r24
    13c8:	99 23       	and	r25, r25
    13ca:	24 f4       	brge	.+8      	; 0x13d4 <bme280_compensate_data+0xae2>
    13cc:	01 5f       	subi	r16, 0xF1	; 241
    13ce:	1f 4f       	sbci	r17, 0xFF	; 255
    13d0:	2f 4f       	sbci	r18, 0xFF	; 255
    13d2:	3f 4f       	sbci	r19, 0xFF	; 255
    13d4:	d9 01       	movw	r26, r18
    13d6:	c8 01       	movw	r24, r16
    13d8:	68 94       	set
    13da:	13 f8       	bld	r1, 3
    13dc:	b5 95       	asr	r27
    13de:	a7 95       	ror	r26
    13e0:	97 95       	ror	r25
    13e2:	87 95       	ror	r24
    13e4:	16 94       	lsr	r1
    13e6:	d1 f7       	brne	.-12     	; 0x13dc <bme280_compensate_data+0xaea>
	var5 = (var5 < 0 ? 0 : var5);
    13e8:	c8 1a       	sub	r12, r24
    13ea:	d9 0a       	sbc	r13, r25
    13ec:	ea 0a       	sbc	r14, r26
    13ee:	fb 0a       	sbc	r15, r27
    13f0:	1a f4       	brpl	.+6      	; 0x13f8 <bme280_compensate_data+0xb06>
    13f2:	c1 2c       	mov	r12, r1
    13f4:	d1 2c       	mov	r13, r1
    13f6:	76 01       	movw	r14, r12
	var5 = (var5 > 419430400 ? 419430400 : var5);
	humidity = (uint32_t)(var5 / 4096);
    13f8:	f1 e0       	ldi	r31, 0x01	; 1
    13fa:	cf 16       	cp	r12, r31
    13fc:	d1 04       	cpc	r13, r1
    13fe:	e1 04       	cpc	r14, r1
    1400:	f9 e1       	ldi	r31, 0x19	; 25
    1402:	ff 06       	cpc	r15, r31
    1404:	3c f0       	brlt	.+14     	; 0x1414 <bme280_compensate_data+0xb22>
    1406:	0f 2e       	mov	r0, r31
    1408:	c1 2c       	mov	r12, r1
    140a:	d1 2c       	mov	r13, r1
    140c:	e1 2c       	mov	r14, r1
    140e:	f9 e1       	ldi	r31, 0x19	; 25
    1410:	ff 2e       	mov	r15, r31
    1412:	f0 2d       	mov	r31, r0
    1414:	d7 01       	movw	r26, r14
    1416:	c6 01       	movw	r24, r12
    1418:	ff 20       	and	r15, r15
    141a:	24 f4       	brge	.+8      	; 0x1424 <bme280_compensate_data+0xb32>
    141c:	81 50       	subi	r24, 0x01	; 1
    141e:	90 4f       	sbci	r25, 0xF0	; 240
    1420:	af 4f       	sbci	r26, 0xFF	; 255
    1422:	bf 4f       	sbci	r27, 0xFF	; 255
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
		}
		if (sensor_comp & BME280_HUM) {
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
    1424:	07 2e       	mov	r0, r23
    1426:	7c e0       	ldi	r23, 0x0C	; 12
    1428:	b5 95       	asr	r27
    142a:	a7 95       	ror	r26
    142c:	97 95       	ror	r25
    142e:	87 95       	ror	r24
    1430:	7a 95       	dec	r23
    1432:	d1 f7       	brne	.-12     	; 0x1428 <bme280_compensate_data+0xb36>
    1434:	70 2d       	mov	r23, r0
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	00 e9       	ldi	r16, 0x90	; 144
    143a:	90 07       	cpc	r25, r16
    143c:	01 e0       	ldi	r16, 0x01	; 1
    143e:	a0 07       	cpc	r26, r16
    1440:	b1 05       	cpc	r27, r1
    1442:	20 f0       	brcs	.+8      	; 0x144c <bme280_compensate_data+0xb5a>
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e9       	ldi	r25, 0x90	; 144
    1448:	a1 e0       	ldi	r26, 0x01	; 1
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e9 89       	ldd	r30, Y+17	; 0x11
    144e:	fa 89       	ldd	r31, Y+18	; 0x12
    1450:	80 87       	std	Z+8, r24	; 0x08
    1452:	91 87       	std	Z+9, r25	; 0x09
    1454:	a2 87       	std	Z+10, r26	; 0x0a
    1456:	b3 87       	std	Z+11, r27	; 0x0b
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
	int8_t rslt = BME280_OK;
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	07 c0       	rjmp	.+14     	; 0x146a <bme280_compensate_data+0xb78>
		if (sensor_comp & BME280_HUM) {
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
		}
	} else {
		rslt = BME280_E_NULL_PTR;
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	05 c0       	rjmp	.+10     	; 0x146a <bme280_compensate_data+0xb78>
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	03 c0       	rjmp	.+6      	; 0x146a <bme280_compensate_data+0xb78>
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	01 c0       	rjmp	.+2      	; 0x146a <bme280_compensate_data+0xb78>
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
	int8_t rslt = BME280_OK;
    1468:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		rslt = BME280_E_NULL_PTR;
	}

	return rslt;
}
    146a:	a3 96       	adiw	r28, 0x23	; 35
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	df 90       	pop	r13
    1484:	cf 90       	pop	r12
    1486:	bf 90       	pop	r11
    1488:	af 90       	pop	r10
    148a:	9f 90       	pop	r9
    148c:	8f 90       	pop	r8
    148e:	7f 90       	pop	r7
    1490:	6f 90       	pop	r6
    1492:	5f 90       	pop	r5
    1494:	4f 90       	pop	r4
    1496:	3f 90       	pop	r3
    1498:	2f 90       	pop	r2
    149a:	08 95       	ret

0000149c <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	64 97       	sbiw	r28, 0x14	; 20
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	d8 2e       	mov	r13, r24
    14bc:	7b 01       	movw	r14, r22
    14be:	8a 01       	movw	r16, r20
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
    14c0:	fe 01       	movw	r30, r28
    14c2:	31 96       	adiw	r30, 0x01	; 1
    14c4:	88 e0       	ldi	r24, 0x08	; 8
    14c6:	df 01       	movw	r26, r30
    14c8:	1d 92       	st	X+, r1
    14ca:	8a 95       	dec	r24
    14cc:	e9 f7       	brne	.-6      	; 0x14c8 <bme280_get_sensor_data+0x2c>
	struct bme280_uncomp_data uncomp_data = {0};
    14ce:	38 96       	adiw	r30, 0x08	; 8
    14d0:	8c e0       	ldi	r24, 0x0C	; 12
    14d2:	df 01       	movw	r26, r30
    14d4:	1d 92       	st	X+, r1
    14d6:	8a 95       	dec	r24
    14d8:	e9 f7       	brne	.-6      	; 0x14d4 <bme280_get_sensor_data+0x38>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
    14da:	ca 01       	movw	r24, r20
    14dc:	0e 94 49 00 	call	0x92	; 0x92 <null_ptr_check>

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
    14e0:	81 11       	cpse	r24, r1
    14e2:	20 c0       	rjmp	.+64     	; 0x1524 <bme280_get_sensor_data+0x88>
    14e4:	e1 14       	cp	r14, r1
    14e6:	f1 04       	cpc	r15, r1
    14e8:	f9 f0       	breq	.+62     	; 0x1528 <bme280_get_sensor_data+0x8c>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
    14ea:	98 01       	movw	r18, r16
    14ec:	48 e0       	ldi	r20, 0x08	; 8
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	be 01       	movw	r22, r28
    14f2:	6f 5f       	subi	r22, 0xFF	; 255
    14f4:	7f 4f       	sbci	r23, 0xFF	; 255
    14f6:	87 ef       	ldi	r24, 0xF7	; 247
    14f8:	0e 94 62 00 	call	0xc4	; 0xc4 <bme280_get_regs>

		if (rslt == BME280_OK) {
    14fc:	81 11       	cpse	r24, r1
    14fe:	15 c0       	rjmp	.+42     	; 0x152a <bme280_get_sensor_data+0x8e>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
    1500:	be 01       	movw	r22, r28
    1502:	67 5f       	subi	r22, 0xF7	; 247
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	ce 01       	movw	r24, r28
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
    150e:	98 01       	movw	r18, r16
    1510:	27 5f       	subi	r18, 0xF7	; 247
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
    1514:	a7 01       	movw	r20, r14
    1516:	be 01       	movw	r22, r28
    1518:	67 5f       	subi	r22, 0xF7	; 247
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	8d 2d       	mov	r24, r13
    151e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <bme280_compensate_data>
    1522:	03 c0       	rjmp	.+6      	; 0x152a <bme280_get_sensor_data+0x8e>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
    1524:	8f ef       	ldi	r24, 0xFF	; 255
    1526:	01 c0       	rjmp	.+2      	; 0x152a <bme280_get_sensor_data+0x8e>
    1528:	8f ef       	ldi	r24, 0xFF	; 255
	}

	return rslt;
}
    152a:	64 96       	adiw	r28, 0x14	; 20
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	ff 90       	pop	r15
    1540:	ef 90       	pop	r14
    1542:	df 90       	pop	r13
    1544:	08 95       	ret

00001546 <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
    1546:	88 e4       	ldi	r24, 0x48	; 72
    1548:	80 b9       	out	0x00, r24	; 0
    154a:	08 95       	ret

0000154c <i2c_start>:
    154c:	16 be       	out	0x36, r1	; 54
    154e:	94 ea       	ldi	r25, 0xA4	; 164
    1550:	96 bf       	out	0x36, r25	; 54
    1552:	06 b6       	in	r0, 0x36	; 54
    1554:	07 fe       	sbrs	r0, 7
    1556:	fd cf       	rjmp	.-6      	; 0x1552 <i2c_start+0x6>
    1558:	91 b1       	in	r25, 0x01	; 1
    155a:	98 7f       	andi	r25, 0xF8	; 248
    155c:	98 30       	cpi	r25, 0x08	; 8
    155e:	79 f4       	brne	.+30     	; 0x157e <i2c_start+0x32>
    1560:	83 b9       	out	0x03, r24	; 3
    1562:	84 e8       	ldi	r24, 0x84	; 132
    1564:	86 bf       	out	0x36, r24	; 54
    1566:	06 b6       	in	r0, 0x36	; 54
    1568:	07 fe       	sbrs	r0, 7
    156a:	fd cf       	rjmp	.-6      	; 0x1566 <i2c_start+0x1a>
    156c:	91 b1       	in	r25, 0x01	; 1
    156e:	98 7f       	andi	r25, 0xF8	; 248
    1570:	98 31       	cpi	r25, 0x18	; 24
    1572:	39 f0       	breq	.+14     	; 0x1582 <i2c_start+0x36>
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 34       	cpi	r25, 0x40	; 64
    1578:	29 f4       	brne	.+10     	; 0x1584 <i2c_start+0x38>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	08 95       	ret
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	08 95       	ret
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	08 95       	ret

00001586 <i2c_write>:
    1586:	83 b9       	out	0x03, r24	; 3
    1588:	84 e8       	ldi	r24, 0x84	; 132
    158a:	86 bf       	out	0x36, r24	; 54
    158c:	06 b6       	in	r0, 0x36	; 54
    158e:	07 fe       	sbrs	r0, 7
    1590:	fd cf       	rjmp	.-6      	; 0x158c <i2c_write+0x6>
    1592:	91 b1       	in	r25, 0x01	; 1
    1594:	98 7f       	andi	r25, 0xF8	; 248
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	98 32       	cpi	r25, 0x28	; 40
    159a:	09 f4       	brne	.+2      	; 0x159e <i2c_write+0x18>
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	08 95       	ret

000015a0 <i2c_read_ack>:
    15a0:	84 ec       	ldi	r24, 0xC4	; 196
    15a2:	86 bf       	out	0x36, r24	; 54
    15a4:	06 b6       	in	r0, 0x36	; 54
    15a6:	07 fe       	sbrs	r0, 7
    15a8:	fd cf       	rjmp	.-6      	; 0x15a4 <i2c_read_ack+0x4>
    15aa:	83 b1       	in	r24, 0x03	; 3
    15ac:	08 95       	ret

000015ae <i2c_read_nack>:
    15ae:	84 e8       	ldi	r24, 0x84	; 132
    15b0:	86 bf       	out	0x36, r24	; 54
    15b2:	06 b6       	in	r0, 0x36	; 54
    15b4:	07 fe       	sbrs	r0, 7
    15b6:	fd cf       	rjmp	.-6      	; 0x15b2 <i2c_read_nack+0x4>
    15b8:	83 b1       	in	r24, 0x03	; 3
    15ba:	08 95       	ret

000015bc <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    15bc:	84 e9       	ldi	r24, 0x94	; 148
    15be:	86 bf       	out	0x36, r24	; 54
    15c0:	08 95       	ret

000015c2 <lcd_write_nibble>:
void lcd_create_char(uint8_t location, uint8_t *charmap) {
	lcd_command(LCD_SETCGRAMADDR | ((location & 0x7) << 3));
	for (int i = 0; i < 8; i++) {
		lcd_write(charmap[i]);
	}
}
    15c2:	9b b3       	in	r25, 0x1b	; 27
    15c4:	8f 70       	andi	r24, 0x0F	; 15
    15c6:	88 0f       	add	r24, r24
    15c8:	88 0f       	add	r24, r24
    15ca:	88 0f       	add	r24, r24
    15cc:	97 78       	andi	r25, 0x87	; 135
    15ce:	98 2b       	or	r25, r24
    15d0:	9b bb       	out	0x1b, r25	; 27
    15d2:	da 98       	cbi	0x1b, 2	; 27
    15d4:	da 9a       	sbi	0x1b, 2	; 27
    15d6:	da 98       	cbi	0x1b, 2	; 27
    15d8:	84 e6       	ldi	r24, 0x64	; 100
    15da:	8a 95       	dec	r24
    15dc:	f1 f7       	brne	.-4      	; 0x15da <lcd_write_nibble+0x18>
    15de:	08 95       	ret

000015e0 <lcd_send>:
    15e0:	cf 93       	push	r28
    15e2:	c8 2f       	mov	r28, r24
    15e4:	66 23       	and	r22, r22
    15e6:	11 f0       	breq	.+4      	; 0x15ec <lcd_send+0xc>
    15e8:	d8 9a       	sbi	0x1b, 0	; 27
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <lcd_send+0xe>
    15ec:	d8 98       	cbi	0x1b, 0	; 27
    15ee:	d9 98       	cbi	0x1b, 1	; 27
    15f0:	8c 2f       	mov	r24, r28
    15f2:	82 95       	swap	r24
    15f4:	8f 70       	andi	r24, 0x0F	; 15
    15f6:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_write_nibble>
    15fa:	8c 2f       	mov	r24, r28
    15fc:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_write_nibble>
    1600:	cf 91       	pop	r28
    1602:	08 95       	ret

00001604 <lcd_command>:
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <lcd_send>
    160a:	08 95       	ret

0000160c <lcd_write>:
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <lcd_send>
    1612:	08 95       	ret

00001614 <lcd_init>:
    1614:	8a b3       	in	r24, 0x1a	; 26
    1616:	8f 67       	ori	r24, 0x7F	; 127
    1618:	8a bb       	out	0x1a, r24	; 26
    161a:	85 ea       	ldi	r24, 0xA5	; 165
    161c:	9e e0       	ldi	r25, 0x0E	; 14
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	f1 f7       	brne	.-4      	; 0x161e <lcd_init+0xa>
    1622:	00 c0       	rjmp	.+0      	; 0x1624 <lcd_init+0x10>
    1624:	00 00       	nop
    1626:	8b b3       	in	r24, 0x1b	; 27
    1628:	88 7f       	andi	r24, 0xF8	; 248
    162a:	8b bb       	out	0x1b, r24	; 27
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	94 e0       	ldi	r25, 0x04	; 4
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <lcd_init+0x1c>
    1634:	00 c0       	rjmp	.+0      	; 0x1636 <lcd_init+0x22>
    1636:	00 00       	nop
    1638:	83 e0       	ldi	r24, 0x03	; 3
    163a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_write_nibble>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	94 e0       	ldi	r25, 0x04	; 4
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <lcd_init+0x2e>
    1646:	00 c0       	rjmp	.+0      	; 0x1648 <lcd_init+0x34>
    1648:	00 00       	nop
    164a:	83 e0       	ldi	r24, 0x03	; 3
    164c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_write_nibble>
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	94 e0       	ldi	r25, 0x04	; 4
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <lcd_init+0x40>
    1658:	00 c0       	rjmp	.+0      	; 0x165a <lcd_init+0x46>
    165a:	00 00       	nop
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_write_nibble>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	94 e0       	ldi	r25, 0x04	; 4
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	f1 f7       	brne	.-4      	; 0x1666 <lcd_init+0x52>
    166a:	00 c0       	rjmp	.+0      	; 0x166c <lcd_init+0x58>
    166c:	00 00       	nop
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_write_nibble>
    1674:	88 e2       	ldi	r24, 0x28	; 40
    1676:	0e 94 02 0b 	call	0x1604	; 0x1604 <lcd_command>
    167a:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <lcd_displayparams>
    167e:	88 e0       	ldi	r24, 0x08	; 8
    1680:	0e 94 02 0b 	call	0x1604	; 0x1604 <lcd_command>
    1684:	08 95       	ret

00001686 <lcd_on>:
    1686:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <lcd_displayparams>
    168a:	98 2f       	mov	r25, r24
    168c:	94 60       	ori	r25, 0x04	; 4
    168e:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <lcd_displayparams>
    1692:	8c 60       	ori	r24, 0x0C	; 12
    1694:	0e 94 02 0b 	call	0x1604	; 0x1604 <lcd_command>
    1698:	08 95       	ret

0000169a <lcd_clear>:
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	0e 94 02 0b 	call	0x1604	; 0x1604 <lcd_command>
    16a0:	83 ef       	ldi	r24, 0xF3	; 243
    16a2:	91 e0       	ldi	r25, 0x01	; 1
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <lcd_clear+0xa>
    16a8:	00 c0       	rjmp	.+0      	; 0x16aa <lcd_clear+0x10>
    16aa:	00 00       	nop
    16ac:	08 95       	ret

000016ae <lcd_disable_cursor>:
    16ae:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <lcd_displayparams>
    16b2:	8d 7f       	andi	r24, 0xFD	; 253
    16b4:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <lcd_displayparams>
    16b8:	88 60       	ori	r24, 0x08	; 8
    16ba:	0e 94 02 0b 	call	0x1604	; 0x1604 <lcd_command>
    16be:	08 95       	ret

000016c0 <lcd_scroll_right>:
    16c0:	8c e1       	ldi	r24, 0x1C	; 28
    16c2:	0e 94 02 0b 	call	0x1604	; 0x1604 <lcd_command>
    16c6:	08 95       	ret

000016c8 <lcd_set_left_to_right>:
    16c8:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <lcd_displayparams>
    16cc:	98 2f       	mov	r25, r24
    16ce:	92 60       	ori	r25, 0x02	; 2
    16d0:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <lcd_displayparams>
    16d4:	86 60       	ori	r24, 0x06	; 6
    16d6:	0e 94 02 0b 	call	0x1604	; 0x1604 <lcd_command>
    16da:	08 95       	ret

000016dc <lcd_set_cursor>:

	if (row > 1) {
		row = 1;
	}

	lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
    16dc:	61 11       	cpse	r22, r1
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	e6 2f       	mov	r30, r22
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	e0 5a       	subi	r30, 0xA0	; 160
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	90 81       	ld	r25, Z
    16ea:	89 0f       	add	r24, r25
    16ec:	80 68       	ori	r24, 0x80	; 128
    16ee:	0e 94 02 0b 	call	0x1604	; 0x1604 <lcd_command>
    16f2:	08 95       	ret

000016f4 <lcd_puts>:
}

void lcd_puts(char *string) {
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ec 01       	movw	r28, r24
	for (char *it = string; *it; it++) {
    16fa:	88 81       	ld	r24, Y
    16fc:	88 23       	and	r24, r24
    16fe:	31 f0       	breq	.+12     	; 0x170c <lcd_puts+0x18>
    1700:	21 96       	adiw	r28, 0x01	; 1
		lcd_write(*it);
    1702:	0e 94 06 0b 	call	0x160c	; 0x160c <lcd_write>

	lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
	for (char *it = string; *it; it++) {
    1706:	89 91       	ld	r24, Y+
    1708:	81 11       	cpse	r24, r1
    170a:	fb cf       	rjmp	.-10     	; 0x1702 <lcd_puts+0xe>
		lcd_write(*it);
	}
}
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	08 95       	ret

00001712 <lcd_printf>:

void lcd_printf(char *format, ...) {
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	9e 01       	movw	r18, r28
    171c:	2b 5f       	subi	r18, 0xFB	; 251
    171e:	3f 4f       	sbci	r19, 0xFF	; 255
    1720:	f9 01       	movw	r30, r18
    1722:	41 91       	ld	r20, Z+
    1724:	51 91       	ld	r21, Z+
    1726:	9f 01       	movw	r18, r30
	va_list args;

	va_start(args, format);
	vsnprintf(lcd_buffer, LCD_COL_COUNT + 1, format, args);
    1728:	61 e1       	ldi	r22, 0x11	; 17
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	84 ea       	ldi	r24, 0xA4	; 164
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 72 11 	call	0x22e4	; 0x22e4 <vsnprintf>
	va_end(args);

	lcd_puts(lcd_buffer);
    1734:	84 ea       	ldi	r24, 0xA4	; 164
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <lcd_puts>
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	08 95       	ret

00001742 <bme280_delay_ms>:


//BME280 Functions - Required by the bme280 library
//Use the i2c_master library for reading and writing using I2C

void bme280_delay_ms(uint32_t period){
    1742:	8f 92       	push	r8
    1744:	9f 92       	push	r9
    1746:	af 92       	push	r10
    1748:	bf 92       	push	r11
    174a:	cf 92       	push	r12
    174c:	df 92       	push	r13
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
	_delay_ms(period);
    1752:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__floatunsisf>
    1756:	4b 01       	movw	r8, r22
    1758:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	4a e7       	ldi	r20, 0x7A	; 122
    1760:	53 e4       	ldi	r21, 0x43	; 67
    1762:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__mulsf3>
    1766:	6b 01       	movw	r12, r22
    1768:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	5f e3       	ldi	r21, 0x3F	; 63
    1772:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__cmpsf2>
    1776:	88 23       	and	r24, r24
    1778:	2c f1       	brlt	.+74     	; 0x17c4 <bme280_delay_ms+0x82>
		__ticks = 1;
	else if (__tmp > 65535)
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	3f ef       	ldi	r19, 0xFF	; 255
    177e:	4f e7       	ldi	r20, 0x7F	; 127
    1780:	57 e4       	ldi	r21, 0x47	; 71
    1782:	c7 01       	movw	r24, r14
    1784:	b6 01       	movw	r22, r12
    1786:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__gesf2>
    178a:	18 16       	cp	r1, r24
    178c:	b4 f4       	brge	.+44     	; 0x17ba <bme280_delay_ms+0x78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e2       	ldi	r20, 0x20	; 32
    1794:	51 e4       	ldi	r21, 0x41	; 65
    1796:	c5 01       	movw	r24, r10
    1798:	b4 01       	movw	r22, r8
    179a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__mulsf3>
    179e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__fixunssfsi>
		while(__ticks)
    17a2:	61 15       	cp	r22, r1
    17a4:	71 05       	cpc	r23, r1
    17a6:	99 f0       	breq	.+38     	; 0x17ce <bme280_delay_ms+0x8c>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17a8:	29 e1       	ldi	r18, 0x19	; 25
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	c9 01       	movw	r24, r18
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <bme280_delay_ms+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b2:	61 50       	subi	r22, 0x01	; 1
    17b4:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b6:	d1 f7       	brne	.-12     	; 0x17ac <bme280_delay_ms+0x6a>
    17b8:	0a c0       	rjmp	.+20     	; 0x17ce <bme280_delay_ms+0x8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ba:	c7 01       	movw	r24, r14
    17bc:	b6 01       	movw	r22, r12
    17be:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__fixunssfsi>
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <bme280_delay_ms+0x86>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	cb 01       	movw	r24, r22
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <bme280_delay_ms+0x88>
}
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	bf 90       	pop	r11
    17d8:	af 90       	pop	r10
    17da:	9f 90       	pop	r9
    17dc:	8f 90       	pop	r8
    17de:	08 95       	ret

000017e0 <bme280_i2c_write>:
	i2c_stop();
	
	return rslt;
}

int8_t bme280_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len){
    17e0:	ef 92       	push	r14
    17e2:	ff 92       	push	r15
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	c6 2f       	mov	r28, r22
    17ee:	7a 01       	movw	r14, r20
    17f0:	89 01       	movw	r16, r18
	int8_t rslt = 0;
	
	if(i2c_start(dev_id<<1 | I2C_WRITE)) return 1;
    17f2:	88 0f       	add	r24, r24
    17f4:	0e 94 a6 0a 	call	0x154c	; 0x154c <i2c_start>
    17f8:	81 11       	cpse	r24, r1
    17fa:	14 c0       	rjmp	.+40     	; 0x1824 <bme280_i2c_write+0x44>
	i2c_write(reg_addr);
    17fc:	8c 2f       	mov	r24, r28
    17fe:	0e 94 c3 0a 	call	0x1586	; 0x1586 <i2c_write>
	
	int i;
	for(i=0;i<len;i++){
    1802:	01 15       	cp	r16, r1
    1804:	11 05       	cpc	r17, r1
    1806:	51 f0       	breq	.+20     	; 0x181c <bme280_i2c_write+0x3c>
    1808:	c0 e0       	ldi	r28, 0x00	; 0
    180a:	d0 e0       	ldi	r29, 0x00	; 0
		i2c_write(reg_data[0]);
    180c:	f7 01       	movw	r30, r14
    180e:	80 81       	ld	r24, Z
    1810:	0e 94 c3 0a 	call	0x1586	; 0x1586 <i2c_write>
	
	if(i2c_start(dev_id<<1 | I2C_WRITE)) return 1;
	i2c_write(reg_addr);
	
	int i;
	for(i=0;i<len;i++){
    1814:	21 96       	adiw	r28, 0x01	; 1
    1816:	c0 17       	cp	r28, r16
    1818:	d1 07       	cpc	r29, r17
    181a:	c1 f7       	brne	.-16     	; 0x180c <bme280_i2c_write+0x2c>
		i2c_write(reg_data[0]);
	}
	i2c_stop();
    181c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <i2c_stop>

	return rslt;
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <bme280_i2c_write+0x46>
}

int8_t bme280_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len){
	int8_t rslt = 0;
	
	if(i2c_start(dev_id<<1 | I2C_WRITE)) return 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
		i2c_write(reg_data[0]);
	}
	i2c_stop();

	return rslt;
}
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	08 95       	ret

00001834 <bme280_i2c_read>:

void bme280_delay_ms(uint32_t period){
	_delay_ms(period);
}

int8_t bme280_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len){
    1834:	cf 92       	push	r12
    1836:	df 92       	push	r13
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	c8 2f       	mov	r28, r24
    1846:	d6 2f       	mov	r29, r22
    1848:	7a 01       	movw	r14, r20
    184a:	89 01       	movw	r16, r18
	int8_t rslt = 0;

	if(i2c_start(dev_id<<1 | I2C_WRITE)) return 1;
    184c:	88 0f       	add	r24, r24
    184e:	0e 94 a6 0a 	call	0x154c	; 0x154c <i2c_start>
    1852:	81 11       	cpse	r24, r1
    1854:	23 c0       	rjmp	.+70     	; 0x189c <bme280_i2c_read+0x68>
	i2c_write(reg_addr);
    1856:	8d 2f       	mov	r24, r29
    1858:	0e 94 c3 0a 	call	0x1586	; 0x1586 <i2c_write>
	i2c_stop();
    185c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <i2c_stop>
	
	if (i2c_start(dev_id<<1 | I2C_READ)) return 1;
    1860:	8c 2f       	mov	r24, r28
    1862:	88 0f       	add	r24, r24
    1864:	81 60       	ori	r24, 0x01	; 1
    1866:	0e 94 a6 0a 	call	0x154c	; 0x154c <i2c_start>
    186a:	81 11       	cpse	r24, r1
    186c:	19 c0       	rjmp	.+50     	; 0x18a0 <bme280_i2c_read+0x6c>
	int i;
	for(i=0;i<len-1;i++){
    186e:	01 50       	subi	r16, 0x01	; 1
    1870:	11 09       	sbc	r17, r1
    1872:	51 f0       	breq	.+20     	; 0x1888 <bme280_i2c_read+0x54>
    1874:	e7 01       	movw	r28, r14
    1876:	67 01       	movw	r12, r14
    1878:	c0 0e       	add	r12, r16
    187a:	d1 1e       	adc	r13, r17
		reg_data[i] = i2c_read_ack();
    187c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <i2c_read_ack>
    1880:	89 93       	st	Y+, r24
	i2c_write(reg_addr);
	i2c_stop();
	
	if (i2c_start(dev_id<<1 | I2C_READ)) return 1;
	int i;
	for(i=0;i<len-1;i++){
    1882:	cc 15       	cp	r28, r12
    1884:	dd 05       	cpc	r29, r13
    1886:	d1 f7       	brne	.-12     	; 0x187c <bme280_i2c_read+0x48>
		reg_data[i] = i2c_read_ack();
	}
	reg_data[len-1] = i2c_read_nack();
    1888:	e7 01       	movw	r28, r14
    188a:	c0 0f       	add	r28, r16
    188c:	d1 1f       	adc	r29, r17
    188e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <i2c_read_nack>
    1892:	88 83       	st	Y, r24
	i2c_stop();
    1894:	0e 94 de 0a 	call	0x15bc	; 0x15bc <i2c_stop>
	
	return rslt;
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <bme280_i2c_read+0x6e>
}

int8_t bme280_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len){
	int8_t rslt = 0;

	if(i2c_start(dev_id<<1 | I2C_WRITE)) return 1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <bme280_i2c_read+0x6e>
	i2c_write(reg_addr);
	i2c_stop();
	
	if (i2c_start(dev_id<<1 | I2C_READ)) return 1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
	}
	reg_data[len-1] = i2c_read_nack();
	i2c_stop();
	
	return rslt;
}
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	ff 90       	pop	r15
    18ac:	ef 90       	pop	r14
    18ae:	df 90       	pop	r13
    18b0:	cf 90       	pop	r12
    18b2:	08 95       	ret

000018b4 <io_init>:
int button_status = 0;
int selected_reading = TEMPERATURE_SELECTED;

//Initialise button and LED
void io_init(void){
	IO_DIR |= (1<<LED_PIN);
    18b4:	8e 9a       	sbi	0x11, 6	; 17
	IO_DIR &= ~(1<<BUTTON_PIN);
    18b6:	8d 98       	cbi	0x11, 5	; 17
	IO_OUTPUT &= ~(1<<LED_PIN);
    18b8:	96 98       	cbi	0x12, 6	; 18
    18ba:	08 95       	ret

000018bc <check_button_release>:
}

//Check if the button is released
int check_button_release(void){
	int new_status = (IO_INPUT&(1<<BUTTON_PIN))>>BUTTON_PIN;
    18bc:	80 b3       	in	r24, 0x10	; 16
    18be:	85 fb       	bst	r24, 5
    18c0:	22 27       	eor	r18, r18
    18c2:	20 f9       	bld	r18, 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
	if(new_status!=button_status){
    18c6:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <button_status>
    18ca:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <button_status+0x1>
    18ce:	28 17       	cp	r18, r24
    18d0:	39 07       	cpc	r19, r25
    18d2:	51 f0       	breq	.+20     	; 0x18e8 <check_button_release+0x2c>
		button_status = new_status;
    18d4:	30 93 b9 00 	sts	0x00B9, r19	; 0x8000b9 <button_status+0x1>
    18d8:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <button_status>
		if(button_status==0){
			return 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	23 2b       	or	r18, r19
    18e2:	21 f0       	breq	.+8      	; 0x18ec <check_button_release+0x30>
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	08 95       	ret
		}
	}
	return 0;
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
}
    18ec:	08 95       	ret

000018ee <sensor_init>:
	return rslt;
}

//Initialise the bme280 device, which is passed as a pointer
//Note: Can't name the function bme280_init, since this is already defined
uint8_t sensor_init(struct bme280_dev* dev){
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	ec 01       	movw	r28, r24
	
	int8_t result = BME280_OK;

	dev->dev_id = BME280_I2C_ADDR_SEC;
    18f4:	87 e7       	ldi	r24, 0x77	; 119
    18f6:	89 83       	std	Y+1, r24	; 0x01
	dev->intf = BME280_I2C_INTF;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	8a 83       	std	Y+2, r24	; 0x02
	dev->read = bme280_i2c_read;
    18fc:	8a e1       	ldi	r24, 0x1A	; 26
    18fe:	9c e0       	ldi	r25, 0x0C	; 12
    1900:	9c 83       	std	Y+4, r25	; 0x04
    1902:	8b 83       	std	Y+3, r24	; 0x03
	dev->write = bme280_i2c_write;
    1904:	80 ef       	ldi	r24, 0xF0	; 240
    1906:	9b e0       	ldi	r25, 0x0B	; 11
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	8d 83       	std	Y+5, r24	; 0x05
	dev->delay_ms = bme280_delay_ms;
    190c:	81 ea       	ldi	r24, 0xA1	; 161
    190e:	9b e0       	ldi	r25, 0x0B	; 11
    1910:	98 87       	std	Y+8, r25	; 0x08
    1912:	8f 83       	std	Y+7, r24	; 0x07
	
	result = bme280_init(dev);
    1914:	ce 01       	movw	r24, r28
    1916:	0e 94 1b 02 	call	0x436	; 0x436 <bme280_init>
	
	if(result!=BME280_OK){
    191a:	81 11       	cpse	r24, r1
    191c:	0c c0       	rjmp	.+24     	; 0x1936 <sensor_init+0x48>
		return result;
	}

	// Recommended mode of operation: Indoor navigation
	dev->settings.osr_h = BME280_OVERSAMPLING_2X;
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	88 ab       	std	Y+48, r24	; 0x30
	dev->settings.osr_p = BME280_OVERSAMPLING_16X;
    1922:	85 e0       	ldi	r24, 0x05	; 5
    1924:	8e a7       	std	Y+46, r24	; 0x2e
	dev->settings.osr_t = BME280_OVERSAMPLING_1X;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	8f a7       	std	Y+47, r24	; 0x2f
	dev->settings.filter = BME280_FILTER_COEFF_16;
    192a:	84 e0       	ldi	r24, 0x04	; 4
    192c:	89 ab       	std	Y+49, r24	; 0x31
	settings_sel = BME280_OSR_PRESS_SEL;
	settings_sel |= BME280_OSR_TEMP_SEL;
	settings_sel |= BME280_OSR_HUM_SEL;
	settings_sel |= BME280_FILTER_SEL;
	
	result = bme280_set_sensor_settings(settings_sel, dev);
    192e:	be 01       	movw	r22, r28
    1930:	8f e0       	ldi	r24, 0x0F	; 15
    1932:	0e 94 76 03 	call	0x6ec	; 0x6ec <bme280_set_sensor_settings>
	
	return result;
}
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	08 95       	ret

0000193c <update_reading>:


//Update the bme280 measurements and print the current selected reading to the LCD screen
uint8_t update_reading(struct bme280_dev* dev,struct bme280_data* component_data){
    193c:	cf 92       	push	r12
    193e:	df 92       	push	r13
    1940:	ef 92       	push	r14
    1942:	ff 92       	push	r15
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	ec 01       	movw	r28, r24
    194e:	8b 01       	movw	r16, r22
	
	uint8_t result = BME280_OK;
	
	result = bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
    1950:	bc 01       	movw	r22, r24
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	0e 94 bb 03 	call	0x776	; 0x776 <bme280_set_sensor_mode>
	
	if(result!=BME280_OK){
    1958:	81 11       	cpse	r24, r1
    195a:	cf c0       	rjmp	.+414    	; 0x1afa <update_reading+0x1be>
		return result;
	}
	
	dev->delay_ms(40);
    195c:	ef 81       	ldd	r30, Y+7	; 0x07
    195e:	f8 85       	ldd	r31, Y+8	; 0x08
    1960:	68 e2       	ldi	r22, 0x28	; 40
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	09 95       	icall
	
	result = bme280_get_sensor_data(BME280_ALL, component_data, dev);
    196a:	ae 01       	movw	r20, r28
    196c:	b8 01       	movw	r22, r16
    196e:	87 e0       	ldi	r24, 0x07	; 7
    1970:	0e 94 4e 0a 	call	0x149c	; 0x149c <bme280_get_sensor_data>
	
	if(result!=BME280_OK){
    1974:	81 11       	cpse	r24, r1
    1976:	c1 c0       	rjmp	.+386    	; 0x1afa <update_reading+0x1be>
		return result;
	}
	
	lcd_clear();
    1978:	0e 94 4d 0b 	call	0x169a	; 0x169a <lcd_clear>
	
	switch(selected_reading){
    197c:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <selected_reading>
    1980:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <selected_reading+0x1>
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	91 05       	cpc	r25, r1
    1988:	09 f4       	brne	.+2      	; 0x198c <update_reading+0x50>
    198a:	4d c0       	rjmp	.+154    	; 0x1a26 <update_reading+0xea>
    198c:	82 30       	cpi	r24, 0x02	; 2
    198e:	91 05       	cpc	r25, r1
    1990:	09 f4       	brne	.+2      	; 0x1994 <update_reading+0x58>
    1992:	77 c0       	rjmp	.+238    	; 0x1a82 <update_reading+0x146>
    1994:	89 2b       	or	r24, r25
    1996:	09 f0       	breq	.+2      	; 0x199a <update_reading+0x5e>
    1998:	a2 c0       	rjmp	.+324    	; 0x1ade <update_reading+0x1a2>
		case TEMPERATURE_SELECTED:
			lcd_printf("Temperature");
    199a:	84 e6       	ldi	r24, 0x64	; 100
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9f 93       	push	r25
    19a0:	8f 93       	push	r24
    19a2:	0e 94 89 0b 	call	0x1712	; 0x1712 <lcd_printf>
			lcd_set_cursor(0,1);
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <lcd_set_cursor>
			lcd_printf("%ld",component_data->temperature/100);
    19ae:	f8 01       	movw	r30, r16
    19b0:	64 81       	ldd	r22, Z+4	; 0x04
    19b2:	75 81       	ldd	r23, Z+5	; 0x05
    19b4:	86 81       	ldd	r24, Z+6	; 0x06
    19b6:	97 81       	ldd	r25, Z+7	; 0x07
    19b8:	0f 2e       	mov	r0, r31
    19ba:	f4 e6       	ldi	r31, 0x64	; 100
    19bc:	cf 2e       	mov	r12, r31
    19be:	d1 2c       	mov	r13, r1
    19c0:	e1 2c       	mov	r14, r1
    19c2:	f1 2c       	mov	r15, r1
    19c4:	f0 2d       	mov	r31, r0
    19c6:	a7 01       	movw	r20, r14
    19c8:	96 01       	movw	r18, r12
    19ca:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divmodsi4>
    19ce:	5f 93       	push	r21
    19d0:	4f 93       	push	r20
    19d2:	3f 93       	push	r19
    19d4:	2f 93       	push	r18
    19d6:	81 e7       	ldi	r24, 0x71	; 113
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	9f 93       	push	r25
    19dc:	8f 93       	push	r24
    19de:	0e 94 89 0b 	call	0x1712	; 0x1712 <lcd_printf>
			lcd_printf(".%ld",component_data->temperature%100);
    19e2:	f8 01       	movw	r30, r16
    19e4:	64 81       	ldd	r22, Z+4	; 0x04
    19e6:	75 81       	ldd	r23, Z+5	; 0x05
    19e8:	86 81       	ldd	r24, Z+6	; 0x06
    19ea:	97 81       	ldd	r25, Z+7	; 0x07
    19ec:	a7 01       	movw	r20, r14
    19ee:	96 01       	movw	r18, r12
    19f0:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divmodsi4>
    19f4:	9f 93       	push	r25
    19f6:	8f 93       	push	r24
    19f8:	7f 93       	push	r23
    19fa:	6f 93       	push	r22
    19fc:	80 e7       	ldi	r24, 0x70	; 112
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9f 93       	push	r25
    1a02:	8f 93       	push	r24
    1a04:	0e 94 89 0b 	call	0x1712	; 0x1712 <lcd_printf>
			lcd_printf(" (Celsius)");
    1a08:	85 e7       	ldi	r24, 0x75	; 117
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9f 93       	push	r25
    1a0e:	8f 93       	push	r24
    1a10:	0e 94 89 0b 	call	0x1712	; 0x1712 <lcd_printf>
			break;
    1a14:	8d b7       	in	r24, 0x3d	; 61
    1a16:	9e b7       	in	r25, 0x3e	; 62
    1a18:	40 96       	adiw	r24, 0x10	; 16
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	9e bf       	out	0x3e, r25	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	8d bf       	out	0x3d, r24	; 61
    1a24:	5c c0       	rjmp	.+184    	; 0x1ade <update_reading+0x1a2>
		case PRESSURE_SELECTED:
			lcd_printf("Pressure");
    1a26:	80 e8       	ldi	r24, 0x80	; 128
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9f 93       	push	r25
    1a2c:	8f 93       	push	r24
    1a2e:	0e 94 89 0b 	call	0x1712	; 0x1712 <lcd_printf>
			lcd_set_cursor(0,1);
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <lcd_set_cursor>
			lcd_printf("%ld",component_data->pressure/100);
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	24 e6       	ldi	r18, 0x64	; 100
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__udivmodsi4>
    1a50:	5f 93       	push	r21
    1a52:	4f 93       	push	r20
    1a54:	3f 93       	push	r19
    1a56:	2f 93       	push	r18
    1a58:	81 e7       	ldi	r24, 0x71	; 113
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9f 93       	push	r25
    1a5e:	8f 93       	push	r24
    1a60:	0e 94 89 0b 	call	0x1712	; 0x1712 <lcd_printf>
			lcd_printf(" (Pa)");
    1a64:	89 e8       	ldi	r24, 0x89	; 137
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9f 93       	push	r25
    1a6a:	8f 93       	push	r24
    1a6c:	0e 94 89 0b 	call	0x1712	; 0x1712 <lcd_printf>
			break;
    1a70:	8d b7       	in	r24, 0x3d	; 61
    1a72:	9e b7       	in	r25, 0x3e	; 62
    1a74:	0a 96       	adiw	r24, 0x0a	; 10
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	9e bf       	out	0x3e, r25	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	8d bf       	out	0x3d, r24	; 61
    1a80:	2e c0       	rjmp	.+92     	; 0x1ade <update_reading+0x1a2>
		case HUMIDITY_SELECTED:
			lcd_printf("Humidity");
    1a82:	8f e8       	ldi	r24, 0x8F	; 143
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9f 93       	push	r25
    1a88:	8f 93       	push	r24
    1a8a:	0e 94 89 0b 	call	0x1712	; 0x1712 <lcd_printf>
			lcd_set_cursor(0,1);
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <lcd_set_cursor>
			lcd_printf("%ld",(component_data->humidity/1024));
    1a96:	f8 01       	movw	r30, r16
    1a98:	80 85       	ldd	r24, Z+8	; 0x08
    1a9a:	91 85       	ldd	r25, Z+9	; 0x09
    1a9c:	a2 85       	ldd	r26, Z+10	; 0x0a
    1a9e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1aa0:	07 2e       	mov	r0, r23
    1aa2:	7a e0       	ldi	r23, 0x0A	; 10
    1aa4:	b6 95       	lsr	r27
    1aa6:	a7 95       	ror	r26
    1aa8:	97 95       	ror	r25
    1aaa:	87 95       	ror	r24
    1aac:	7a 95       	dec	r23
    1aae:	d1 f7       	brne	.-12     	; 0x1aa4 <update_reading+0x168>
    1ab0:	70 2d       	mov	r23, r0
    1ab2:	bf 93       	push	r27
    1ab4:	af 93       	push	r26
    1ab6:	9f 93       	push	r25
    1ab8:	8f 93       	push	r24
    1aba:	81 e7       	ldi	r24, 0x71	; 113
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9f 93       	push	r25
    1ac0:	8f 93       	push	r24
    1ac2:	0e 94 89 0b 	call	0x1712	; 0x1712 <lcd_printf>
			lcd_puts("%");
    1ac6:	88 e9       	ldi	r24, 0x98	; 152
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <lcd_puts>
			break;
    1ace:	8d b7       	in	r24, 0x3d	; 61
    1ad0:	9e b7       	in	r25, 0x3e	; 62
    1ad2:	08 96       	adiw	r24, 0x08	; 8
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	9e bf       	out	0x3e, r25	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	8d bf       	out	0x3d, r24	; 61
	}
	
	selected_reading += 1;
	selected_reading %= 3;
    1ade:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <selected_reading>
    1ae2:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <selected_reading+0x1>
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	63 e0       	ldi	r22, 0x03	; 3
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__divmodhi4>
    1af0:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <selected_reading+0x1>
    1af4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <selected_reading>
	
	return result;
    1af8:	80 e0       	ldi	r24, 0x00	; 0
}
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	ff 90       	pop	r15
    1b04:	ef 90       	pop	r14
    1b06:	df 90       	pop	r13
    1b08:	cf 90       	pop	r12
    1b0a:	08 95       	ret

00001b0c <main>:


int main(void) {
    1b0c:	ef 92       	push	r14
    1b0e:	ff 92       	push	r15
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	ef 97       	sbiw	r28, 0x3f	; 63
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
	
	//Initialise IO (button and LED)
	
	io_init();
    1b28:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <io_init>
	
	//Initialise LCD
	
	lcd_init();
    1b2c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <lcd_init>
	lcd_scroll_right();
    1b30:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <lcd_scroll_right>
	lcd_set_left_to_right();
    1b34:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <lcd_set_left_to_right>
	lcd_disable_cursor();
    1b38:	0e 94 57 0b 	call	0x16ae	; 0x16ae <lcd_disable_cursor>
	lcd_clear();
    1b3c:	0e 94 4d 0b 	call	0x169a	; 0x169a <lcd_clear>
	lcd_on();
    1b40:	0e 94 43 0b 	call	0x1686	; 0x1686 <lcd_on>
	
	//Initialise I2C
	
	i2c_init();
    1b44:	0e 94 a3 0a 	call	0x1546	; 0x1546 <i2c_init>
	
	struct bme280_dev dev;
	struct bme280_data component_data;
	uint8_t result = BME280_OK;
	
	result = sensor_init(&dev);
    1b48:	ce 01       	movw	r24, r28
    1b4a:	01 96       	adiw	r24, 0x01	; 1
    1b4c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <sensor_init>
    1b50:	18 2f       	mov	r17, r24
	
	//If BME280 initialisation was successful, start the main loop
	
	if(result==BME280_OK){
    1b52:	81 11       	cpse	r24, r1
    1b54:	26 c0       	rjmp	.+76     	; 0x1ba2 <main+0x96>
		//Setup complete, turn green LED on
		IO_OUTPUT |= (1<<LED_PIN);
    1b56:	96 9a       	sbi	0x12, 6	; 18
		
		//Display an initial reading
		result = update_reading(&dev,&component_data);
    1b58:	be 01       	movw	r22, r28
    1b5a:	6c 5c       	subi	r22, 0xCC	; 204
    1b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5e:	ce 01       	movw	r24, r28
    1b60:	01 96       	adiw	r24, 0x01	; 1
    1b62:	0e 94 9e 0c 	call	0x193c	; 0x193c <update_reading>
		
		//Continue to check the button and change the reading on the LCD
		//when the button is released
		while(result==BME280_OK){
    1b66:	81 11       	cpse	r24, r1
    1b68:	1b c0       	rjmp	.+54     	; 0x1ba0 <main+0x94>
    1b6a:	08 2f       	mov	r16, r24
    1b6c:	0f 2e       	mov	r0, r31
    1b6e:	f4 ec       	ldi	r31, 0xC4	; 196
    1b70:	ef 2e       	mov	r14, r31
    1b72:	f9 e0       	ldi	r31, 0x09	; 9
    1b74:	ff 2e       	mov	r15, r31
    1b76:	f0 2d       	mov	r31, r0
			if(check_button_release()){
    1b78:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <check_button_release>
    1b7c:	89 2b       	or	r24, r25
    1b7e:	49 f0       	breq	.+18     	; 0x1b92 <main+0x86>
				result = update_reading(&dev,&component_data);
    1b80:	be 01       	movw	r22, r28
    1b82:	6c 5c       	subi	r22, 0xCC	; 204
    1b84:	7f 4f       	sbci	r23, 0xFF	; 255
    1b86:	ce 01       	movw	r24, r28
    1b88:	01 96       	adiw	r24, 0x01	; 1
    1b8a:	0e 94 9e 0c 	call	0x193c	; 0x193c <update_reading>
    1b8e:	18 2f       	mov	r17, r24
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <main+0x88>
    1b92:	10 2f       	mov	r17, r16
    1b94:	f7 01       	movw	r30, r14
    1b96:	31 97       	sbiw	r30, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <main+0x8a>
		//Display an initial reading
		result = update_reading(&dev,&component_data);
		
		//Continue to check the button and change the reading on the LCD
		//when the button is released
		while(result==BME280_OK){
    1b9a:	11 23       	and	r17, r17
    1b9c:	69 f3       	breq	.-38     	; 0x1b78 <main+0x6c>
    1b9e:	01 c0       	rjmp	.+2      	; 0x1ba2 <main+0x96>
	if(result==BME280_OK){
		//Setup complete, turn green LED on
		IO_OUTPUT |= (1<<LED_PIN);
		
		//Display an initial reading
		result = update_reading(&dev,&component_data);
    1ba0:	18 2f       	mov	r17, r24
			_delay_ms(10);
		}
	}
	
	//If the code reaches here, there has been an error
	lcd_clear();
    1ba2:	0e 94 4d 0b 	call	0x169a	; 0x169a <lcd_clear>
	lcd_printf("Error: %i",result);
    1ba6:	1f 92       	push	r1
    1ba8:	1f 93       	push	r17
    1baa:	8a e9       	ldi	r24, 0x9A	; 154
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9f 93       	push	r25
    1bb0:	8f 93       	push	r24
    1bb2:	0e 94 89 0b 	call	0x1712	; 0x1712 <lcd_printf>
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
	return 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	ef 96       	adiw	r28, 0x3f	; 63
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	ff 90       	pop	r15
    1bd8:	ef 90       	pop	r14
    1bda:	08 95       	ret

00001bdc <__cmpsf2>:
    1bdc:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__fp_cmp>
    1be0:	08 f4       	brcc	.+2      	; 0x1be4 <__cmpsf2+0x8>
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	08 95       	ret

00001be6 <__fixunssfsi>:
    1be6:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__fp_splitA>
    1bea:	88 f0       	brcs	.+34     	; 0x1c0e <__fixunssfsi+0x28>
    1bec:	9f 57       	subi	r25, 0x7F	; 127
    1bee:	98 f0       	brcs	.+38     	; 0x1c16 <__fixunssfsi+0x30>
    1bf0:	b9 2f       	mov	r27, r25
    1bf2:	99 27       	eor	r25, r25
    1bf4:	b7 51       	subi	r27, 0x17	; 23
    1bf6:	b0 f0       	brcs	.+44     	; 0x1c24 <__fixunssfsi+0x3e>
    1bf8:	e1 f0       	breq	.+56     	; 0x1c32 <__fixunssfsi+0x4c>
    1bfa:	66 0f       	add	r22, r22
    1bfc:	77 1f       	adc	r23, r23
    1bfe:	88 1f       	adc	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	1a f0       	brmi	.+6      	; 0x1c0a <__fixunssfsi+0x24>
    1c04:	ba 95       	dec	r27
    1c06:	c9 f7       	brne	.-14     	; 0x1bfa <__fixunssfsi+0x14>
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <__fixunssfsi+0x4c>
    1c0a:	b1 30       	cpi	r27, 0x01	; 1
    1c0c:	91 f0       	breq	.+36     	; 0x1c32 <__fixunssfsi+0x4c>
    1c0e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__fp_zero>
    1c12:	b1 e0       	ldi	r27, 0x01	; 1
    1c14:	08 95       	ret
    1c16:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__fp_zero>
    1c1a:	67 2f       	mov	r22, r23
    1c1c:	78 2f       	mov	r23, r24
    1c1e:	88 27       	eor	r24, r24
    1c20:	b8 5f       	subi	r27, 0xF8	; 248
    1c22:	39 f0       	breq	.+14     	; 0x1c32 <__fixunssfsi+0x4c>
    1c24:	b9 3f       	cpi	r27, 0xF9	; 249
    1c26:	cc f3       	brlt	.-14     	; 0x1c1a <__fixunssfsi+0x34>
    1c28:	86 95       	lsr	r24
    1c2a:	77 95       	ror	r23
    1c2c:	67 95       	ror	r22
    1c2e:	b3 95       	inc	r27
    1c30:	d9 f7       	brne	.-10     	; 0x1c28 <__fixunssfsi+0x42>
    1c32:	3e f4       	brtc	.+14     	; 0x1c42 <__fixunssfsi+0x5c>
    1c34:	90 95       	com	r25
    1c36:	80 95       	com	r24
    1c38:	70 95       	com	r23
    1c3a:	61 95       	neg	r22
    1c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c40:	9f 4f       	sbci	r25, 0xFF	; 255
    1c42:	08 95       	ret

00001c44 <__floatunsisf>:
    1c44:	e8 94       	clt
    1c46:	09 c0       	rjmp	.+18     	; 0x1c5a <__floatsisf+0x12>

00001c48 <__floatsisf>:
    1c48:	97 fb       	bst	r25, 7
    1c4a:	3e f4       	brtc	.+14     	; 0x1c5a <__floatsisf+0x12>
    1c4c:	90 95       	com	r25
    1c4e:	80 95       	com	r24
    1c50:	70 95       	com	r23
    1c52:	61 95       	neg	r22
    1c54:	7f 4f       	sbci	r23, 0xFF	; 255
    1c56:	8f 4f       	sbci	r24, 0xFF	; 255
    1c58:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5a:	99 23       	and	r25, r25
    1c5c:	a9 f0       	breq	.+42     	; 0x1c88 <__floatsisf+0x40>
    1c5e:	f9 2f       	mov	r31, r25
    1c60:	96 e9       	ldi	r25, 0x96	; 150
    1c62:	bb 27       	eor	r27, r27
    1c64:	93 95       	inc	r25
    1c66:	f6 95       	lsr	r31
    1c68:	87 95       	ror	r24
    1c6a:	77 95       	ror	r23
    1c6c:	67 95       	ror	r22
    1c6e:	b7 95       	ror	r27
    1c70:	f1 11       	cpse	r31, r1
    1c72:	f8 cf       	rjmp	.-16     	; 0x1c64 <__floatsisf+0x1c>
    1c74:	fa f4       	brpl	.+62     	; 0x1cb4 <__floatsisf+0x6c>
    1c76:	bb 0f       	add	r27, r27
    1c78:	11 f4       	brne	.+4      	; 0x1c7e <__floatsisf+0x36>
    1c7a:	60 ff       	sbrs	r22, 0
    1c7c:	1b c0       	rjmp	.+54     	; 0x1cb4 <__floatsisf+0x6c>
    1c7e:	6f 5f       	subi	r22, 0xFF	; 255
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	8f 4f       	sbci	r24, 0xFF	; 255
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	16 c0       	rjmp	.+44     	; 0x1cb4 <__floatsisf+0x6c>
    1c88:	88 23       	and	r24, r24
    1c8a:	11 f0       	breq	.+4      	; 0x1c90 <__floatsisf+0x48>
    1c8c:	96 e9       	ldi	r25, 0x96	; 150
    1c8e:	11 c0       	rjmp	.+34     	; 0x1cb2 <__floatsisf+0x6a>
    1c90:	77 23       	and	r23, r23
    1c92:	21 f0       	breq	.+8      	; 0x1c9c <__floatsisf+0x54>
    1c94:	9e e8       	ldi	r25, 0x8E	; 142
    1c96:	87 2f       	mov	r24, r23
    1c98:	76 2f       	mov	r23, r22
    1c9a:	05 c0       	rjmp	.+10     	; 0x1ca6 <__floatsisf+0x5e>
    1c9c:	66 23       	and	r22, r22
    1c9e:	71 f0       	breq	.+28     	; 0x1cbc <__floatsisf+0x74>
    1ca0:	96 e8       	ldi	r25, 0x86	; 134
    1ca2:	86 2f       	mov	r24, r22
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	2a f0       	brmi	.+10     	; 0x1cb4 <__floatsisf+0x6c>
    1caa:	9a 95       	dec	r25
    1cac:	66 0f       	add	r22, r22
    1cae:	77 1f       	adc	r23, r23
    1cb0:	88 1f       	adc	r24, r24
    1cb2:	da f7       	brpl	.-10     	; 0x1caa <__floatsisf+0x62>
    1cb4:	88 0f       	add	r24, r24
    1cb6:	96 95       	lsr	r25
    1cb8:	87 95       	ror	r24
    1cba:	97 f9       	bld	r25, 7
    1cbc:	08 95       	ret

00001cbe <__fp_cmp>:
    1cbe:	99 0f       	add	r25, r25
    1cc0:	00 08       	sbc	r0, r0
    1cc2:	55 0f       	add	r21, r21
    1cc4:	aa 0b       	sbc	r26, r26
    1cc6:	e0 e8       	ldi	r30, 0x80	; 128
    1cc8:	fe ef       	ldi	r31, 0xFE	; 254
    1cca:	16 16       	cp	r1, r22
    1ccc:	17 06       	cpc	r1, r23
    1cce:	e8 07       	cpc	r30, r24
    1cd0:	f9 07       	cpc	r31, r25
    1cd2:	c0 f0       	brcs	.+48     	; 0x1d04 <__fp_cmp+0x46>
    1cd4:	12 16       	cp	r1, r18
    1cd6:	13 06       	cpc	r1, r19
    1cd8:	e4 07       	cpc	r30, r20
    1cda:	f5 07       	cpc	r31, r21
    1cdc:	98 f0       	brcs	.+38     	; 0x1d04 <__fp_cmp+0x46>
    1cde:	62 1b       	sub	r22, r18
    1ce0:	73 0b       	sbc	r23, r19
    1ce2:	84 0b       	sbc	r24, r20
    1ce4:	95 0b       	sbc	r25, r21
    1ce6:	39 f4       	brne	.+14     	; 0x1cf6 <__fp_cmp+0x38>
    1ce8:	0a 26       	eor	r0, r26
    1cea:	61 f0       	breq	.+24     	; 0x1d04 <__fp_cmp+0x46>
    1cec:	23 2b       	or	r18, r19
    1cee:	24 2b       	or	r18, r20
    1cf0:	25 2b       	or	r18, r21
    1cf2:	21 f4       	brne	.+8      	; 0x1cfc <__fp_cmp+0x3e>
    1cf4:	08 95       	ret
    1cf6:	0a 26       	eor	r0, r26
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <__fp_cmp+0x3e>
    1cfa:	a1 40       	sbci	r26, 0x01	; 1
    1cfc:	a6 95       	lsr	r26
    1cfe:	8f ef       	ldi	r24, 0xFF	; 255
    1d00:	81 1d       	adc	r24, r1
    1d02:	81 1d       	adc	r24, r1
    1d04:	08 95       	ret

00001d06 <__fp_split3>:
    1d06:	57 fd       	sbrc	r21, 7
    1d08:	90 58       	subi	r25, 0x80	; 128
    1d0a:	44 0f       	add	r20, r20
    1d0c:	55 1f       	adc	r21, r21
    1d0e:	59 f0       	breq	.+22     	; 0x1d26 <__fp_splitA+0x10>
    1d10:	5f 3f       	cpi	r21, 0xFF	; 255
    1d12:	71 f0       	breq	.+28     	; 0x1d30 <__fp_splitA+0x1a>
    1d14:	47 95       	ror	r20

00001d16 <__fp_splitA>:
    1d16:	88 0f       	add	r24, r24
    1d18:	97 fb       	bst	r25, 7
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	61 f0       	breq	.+24     	; 0x1d36 <__fp_splitA+0x20>
    1d1e:	9f 3f       	cpi	r25, 0xFF	; 255
    1d20:	79 f0       	breq	.+30     	; 0x1d40 <__fp_splitA+0x2a>
    1d22:	87 95       	ror	r24
    1d24:	08 95       	ret
    1d26:	12 16       	cp	r1, r18
    1d28:	13 06       	cpc	r1, r19
    1d2a:	14 06       	cpc	r1, r20
    1d2c:	55 1f       	adc	r21, r21
    1d2e:	f2 cf       	rjmp	.-28     	; 0x1d14 <__fp_split3+0xe>
    1d30:	46 95       	lsr	r20
    1d32:	f1 df       	rcall	.-30     	; 0x1d16 <__fp_splitA>
    1d34:	08 c0       	rjmp	.+16     	; 0x1d46 <__fp_splitA+0x30>
    1d36:	16 16       	cp	r1, r22
    1d38:	17 06       	cpc	r1, r23
    1d3a:	18 06       	cpc	r1, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	f1 cf       	rjmp	.-30     	; 0x1d22 <__fp_splitA+0xc>
    1d40:	86 95       	lsr	r24
    1d42:	71 05       	cpc	r23, r1
    1d44:	61 05       	cpc	r22, r1
    1d46:	08 94       	sec
    1d48:	08 95       	ret

00001d4a <__fp_zero>:
    1d4a:	e8 94       	clt

00001d4c <__fp_szero>:
    1d4c:	bb 27       	eor	r27, r27
    1d4e:	66 27       	eor	r22, r22
    1d50:	77 27       	eor	r23, r23
    1d52:	cb 01       	movw	r24, r22
    1d54:	97 f9       	bld	r25, 7
    1d56:	08 95       	ret

00001d58 <__gesf2>:
    1d58:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__fp_cmp>
    1d5c:	08 f4       	brcc	.+2      	; 0x1d60 <__gesf2+0x8>
    1d5e:	8f ef       	ldi	r24, 0xFF	; 255
    1d60:	08 95       	ret

00001d62 <__mulsf3>:
    1d62:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <__mulsf3x>
    1d66:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__fp_round>
    1d6a:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__fp_pscA>
    1d6e:	38 f0       	brcs	.+14     	; 0x1d7e <__mulsf3+0x1c>
    1d70:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__fp_pscB>
    1d74:	20 f0       	brcs	.+8      	; 0x1d7e <__mulsf3+0x1c>
    1d76:	95 23       	and	r25, r21
    1d78:	11 f0       	breq	.+4      	; 0x1d7e <__mulsf3+0x1c>
    1d7a:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__fp_inf>
    1d7e:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__fp_nan>
    1d82:	11 24       	eor	r1, r1
    1d84:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__fp_szero>

00001d88 <__mulsf3x>:
    1d88:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__fp_split3>
    1d8c:	70 f3       	brcs	.-36     	; 0x1d6a <__mulsf3+0x8>

00001d8e <__mulsf3_pse>:
    1d8e:	95 9f       	mul	r25, r21
    1d90:	c1 f3       	breq	.-16     	; 0x1d82 <__mulsf3+0x20>
    1d92:	95 0f       	add	r25, r21
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	55 1f       	adc	r21, r21
    1d98:	62 9f       	mul	r22, r18
    1d9a:	f0 01       	movw	r30, r0
    1d9c:	72 9f       	mul	r23, r18
    1d9e:	bb 27       	eor	r27, r27
    1da0:	f0 0d       	add	r31, r0
    1da2:	b1 1d       	adc	r27, r1
    1da4:	63 9f       	mul	r22, r19
    1da6:	aa 27       	eor	r26, r26
    1da8:	f0 0d       	add	r31, r0
    1daa:	b1 1d       	adc	r27, r1
    1dac:	aa 1f       	adc	r26, r26
    1dae:	64 9f       	mul	r22, r20
    1db0:	66 27       	eor	r22, r22
    1db2:	b0 0d       	add	r27, r0
    1db4:	a1 1d       	adc	r26, r1
    1db6:	66 1f       	adc	r22, r22
    1db8:	82 9f       	mul	r24, r18
    1dba:	22 27       	eor	r18, r18
    1dbc:	b0 0d       	add	r27, r0
    1dbe:	a1 1d       	adc	r26, r1
    1dc0:	62 1f       	adc	r22, r18
    1dc2:	73 9f       	mul	r23, r19
    1dc4:	b0 0d       	add	r27, r0
    1dc6:	a1 1d       	adc	r26, r1
    1dc8:	62 1f       	adc	r22, r18
    1dca:	83 9f       	mul	r24, r19
    1dcc:	a0 0d       	add	r26, r0
    1dce:	61 1d       	adc	r22, r1
    1dd0:	22 1f       	adc	r18, r18
    1dd2:	74 9f       	mul	r23, r20
    1dd4:	33 27       	eor	r19, r19
    1dd6:	a0 0d       	add	r26, r0
    1dd8:	61 1d       	adc	r22, r1
    1dda:	23 1f       	adc	r18, r19
    1ddc:	84 9f       	mul	r24, r20
    1dde:	60 0d       	add	r22, r0
    1de0:	21 1d       	adc	r18, r1
    1de2:	82 2f       	mov	r24, r18
    1de4:	76 2f       	mov	r23, r22
    1de6:	6a 2f       	mov	r22, r26
    1de8:	11 24       	eor	r1, r1
    1dea:	9f 57       	subi	r25, 0x7F	; 127
    1dec:	50 40       	sbci	r21, 0x00	; 0
    1dee:	9a f0       	brmi	.+38     	; 0x1e16 <__mulsf3_pse+0x88>
    1df0:	f1 f0       	breq	.+60     	; 0x1e2e <__mulsf3_pse+0xa0>
    1df2:	88 23       	and	r24, r24
    1df4:	4a f0       	brmi	.+18     	; 0x1e08 <__mulsf3_pse+0x7a>
    1df6:	ee 0f       	add	r30, r30
    1df8:	ff 1f       	adc	r31, r31
    1dfa:	bb 1f       	adc	r27, r27
    1dfc:	66 1f       	adc	r22, r22
    1dfe:	77 1f       	adc	r23, r23
    1e00:	88 1f       	adc	r24, r24
    1e02:	91 50       	subi	r25, 0x01	; 1
    1e04:	50 40       	sbci	r21, 0x00	; 0
    1e06:	a9 f7       	brne	.-22     	; 0x1df2 <__mulsf3_pse+0x64>
    1e08:	9e 3f       	cpi	r25, 0xFE	; 254
    1e0a:	51 05       	cpc	r21, r1
    1e0c:	80 f0       	brcs	.+32     	; 0x1e2e <__mulsf3_pse+0xa0>
    1e0e:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__fp_inf>
    1e12:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__fp_szero>
    1e16:	5f 3f       	cpi	r21, 0xFF	; 255
    1e18:	e4 f3       	brlt	.-8      	; 0x1e12 <__mulsf3_pse+0x84>
    1e1a:	98 3e       	cpi	r25, 0xE8	; 232
    1e1c:	d4 f3       	brlt	.-12     	; 0x1e12 <__mulsf3_pse+0x84>
    1e1e:	86 95       	lsr	r24
    1e20:	77 95       	ror	r23
    1e22:	67 95       	ror	r22
    1e24:	b7 95       	ror	r27
    1e26:	f7 95       	ror	r31
    1e28:	e7 95       	ror	r30
    1e2a:	9f 5f       	subi	r25, 0xFF	; 255
    1e2c:	c1 f7       	brne	.-16     	; 0x1e1e <__mulsf3_pse+0x90>
    1e2e:	fe 2b       	or	r31, r30
    1e30:	88 0f       	add	r24, r24
    1e32:	91 1d       	adc	r25, r1
    1e34:	96 95       	lsr	r25
    1e36:	87 95       	ror	r24
    1e38:	97 f9       	bld	r25, 7
    1e3a:	08 95       	ret

00001e3c <__fp_inf>:
    1e3c:	97 f9       	bld	r25, 7
    1e3e:	9f 67       	ori	r25, 0x7F	; 127
    1e40:	80 e8       	ldi	r24, 0x80	; 128
    1e42:	70 e0       	ldi	r23, 0x00	; 0
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	08 95       	ret

00001e48 <__fp_nan>:
    1e48:	9f ef       	ldi	r25, 0xFF	; 255
    1e4a:	80 ec       	ldi	r24, 0xC0	; 192
    1e4c:	08 95       	ret

00001e4e <__fp_pscA>:
    1e4e:	00 24       	eor	r0, r0
    1e50:	0a 94       	dec	r0
    1e52:	16 16       	cp	r1, r22
    1e54:	17 06       	cpc	r1, r23
    1e56:	18 06       	cpc	r1, r24
    1e58:	09 06       	cpc	r0, r25
    1e5a:	08 95       	ret

00001e5c <__fp_pscB>:
    1e5c:	00 24       	eor	r0, r0
    1e5e:	0a 94       	dec	r0
    1e60:	12 16       	cp	r1, r18
    1e62:	13 06       	cpc	r1, r19
    1e64:	14 06       	cpc	r1, r20
    1e66:	05 06       	cpc	r0, r21
    1e68:	08 95       	ret

00001e6a <__fp_round>:
    1e6a:	09 2e       	mov	r0, r25
    1e6c:	03 94       	inc	r0
    1e6e:	00 0c       	add	r0, r0
    1e70:	11 f4       	brne	.+4      	; 0x1e76 <__fp_round+0xc>
    1e72:	88 23       	and	r24, r24
    1e74:	52 f0       	brmi	.+20     	; 0x1e8a <__fp_round+0x20>
    1e76:	bb 0f       	add	r27, r27
    1e78:	40 f4       	brcc	.+16     	; 0x1e8a <__fp_round+0x20>
    1e7a:	bf 2b       	or	r27, r31
    1e7c:	11 f4       	brne	.+4      	; 0x1e82 <__fp_round+0x18>
    1e7e:	60 ff       	sbrs	r22, 0
    1e80:	04 c0       	rjmp	.+8      	; 0x1e8a <__fp_round+0x20>
    1e82:	6f 5f       	subi	r22, 0xFF	; 255
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
    1e86:	8f 4f       	sbci	r24, 0xFF	; 255
    1e88:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8a:	08 95       	ret

00001e8c <__mulsi3>:
    1e8c:	db 01       	movw	r26, r22
    1e8e:	8f 93       	push	r24
    1e90:	9f 93       	push	r25
    1e92:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__muluhisi3>
    1e96:	bf 91       	pop	r27
    1e98:	af 91       	pop	r26
    1e9a:	a2 9f       	mul	r26, r18
    1e9c:	80 0d       	add	r24, r0
    1e9e:	91 1d       	adc	r25, r1
    1ea0:	a3 9f       	mul	r26, r19
    1ea2:	90 0d       	add	r25, r0
    1ea4:	b2 9f       	mul	r27, r18
    1ea6:	90 0d       	add	r25, r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	08 95       	ret

00001eac <__divmodhi4>:
    1eac:	97 fb       	bst	r25, 7
    1eae:	07 2e       	mov	r0, r23
    1eb0:	16 f4       	brtc	.+4      	; 0x1eb6 <__divmodhi4+0xa>
    1eb2:	00 94       	com	r0
    1eb4:	07 d0       	rcall	.+14     	; 0x1ec4 <__divmodhi4_neg1>
    1eb6:	77 fd       	sbrc	r23, 7
    1eb8:	09 d0       	rcall	.+18     	; 0x1ecc <__divmodhi4_neg2>
    1eba:	0e 94 4f 11 	call	0x229e	; 0x229e <__udivmodhi4>
    1ebe:	07 fc       	sbrc	r0, 7
    1ec0:	05 d0       	rcall	.+10     	; 0x1ecc <__divmodhi4_neg2>
    1ec2:	3e f4       	brtc	.+14     	; 0x1ed2 <__divmodhi4_exit>

00001ec4 <__divmodhi4_neg1>:
    1ec4:	90 95       	com	r25
    1ec6:	81 95       	neg	r24
    1ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eca:	08 95       	ret

00001ecc <__divmodhi4_neg2>:
    1ecc:	70 95       	com	r23
    1ece:	61 95       	neg	r22
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255

00001ed2 <__divmodhi4_exit>:
    1ed2:	08 95       	ret

00001ed4 <__udivmodsi4>:
    1ed4:	a1 e2       	ldi	r26, 0x21	; 33
    1ed6:	1a 2e       	mov	r1, r26
    1ed8:	aa 1b       	sub	r26, r26
    1eda:	bb 1b       	sub	r27, r27
    1edc:	fd 01       	movw	r30, r26
    1ede:	0d c0       	rjmp	.+26     	; 0x1efa <__udivmodsi4_ep>

00001ee0 <__udivmodsi4_loop>:
    1ee0:	aa 1f       	adc	r26, r26
    1ee2:	bb 1f       	adc	r27, r27
    1ee4:	ee 1f       	adc	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	a2 17       	cp	r26, r18
    1eea:	b3 07       	cpc	r27, r19
    1eec:	e4 07       	cpc	r30, r20
    1eee:	f5 07       	cpc	r31, r21
    1ef0:	20 f0       	brcs	.+8      	; 0x1efa <__udivmodsi4_ep>
    1ef2:	a2 1b       	sub	r26, r18
    1ef4:	b3 0b       	sbc	r27, r19
    1ef6:	e4 0b       	sbc	r30, r20
    1ef8:	f5 0b       	sbc	r31, r21

00001efa <__udivmodsi4_ep>:
    1efa:	66 1f       	adc	r22, r22
    1efc:	77 1f       	adc	r23, r23
    1efe:	88 1f       	adc	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	1a 94       	dec	r1
    1f04:	69 f7       	brne	.-38     	; 0x1ee0 <__udivmodsi4_loop>
    1f06:	60 95       	com	r22
    1f08:	70 95       	com	r23
    1f0a:	80 95       	com	r24
    1f0c:	90 95       	com	r25
    1f0e:	9b 01       	movw	r18, r22
    1f10:	ac 01       	movw	r20, r24
    1f12:	bd 01       	movw	r22, r26
    1f14:	cf 01       	movw	r24, r30
    1f16:	08 95       	ret

00001f18 <__divmodsi4>:
    1f18:	05 2e       	mov	r0, r21
    1f1a:	97 fb       	bst	r25, 7
    1f1c:	1e f4       	brtc	.+6      	; 0x1f24 <__divmodsi4+0xc>
    1f1e:	00 94       	com	r0
    1f20:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__negsi2>
    1f24:	57 fd       	sbrc	r21, 7
    1f26:	07 d0       	rcall	.+14     	; 0x1f36 <__divmodsi4_neg2>
    1f28:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__udivmodsi4>
    1f2c:	07 fc       	sbrc	r0, 7
    1f2e:	03 d0       	rcall	.+6      	; 0x1f36 <__divmodsi4_neg2>
    1f30:	4e f4       	brtc	.+18     	; 0x1f44 <__divmodsi4_exit>
    1f32:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__negsi2>

00001f36 <__divmodsi4_neg2>:
    1f36:	50 95       	com	r21
    1f38:	40 95       	com	r20
    1f3a:	30 95       	com	r19
    1f3c:	21 95       	neg	r18
    1f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f40:	4f 4f       	sbci	r20, 0xFF	; 255
    1f42:	5f 4f       	sbci	r21, 0xFF	; 255

00001f44 <__divmodsi4_exit>:
    1f44:	08 95       	ret

00001f46 <__negsi2>:
    1f46:	90 95       	com	r25
    1f48:	80 95       	com	r24
    1f4a:	70 95       	com	r23
    1f4c:	61 95       	neg	r22
    1f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f50:	8f 4f       	sbci	r24, 0xFF	; 255
    1f52:	9f 4f       	sbci	r25, 0xFF	; 255
    1f54:	08 95       	ret

00001f56 <__muluhisi3>:
    1f56:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__umulhisi3>
    1f5a:	a5 9f       	mul	r26, r21
    1f5c:	90 0d       	add	r25, r0
    1f5e:	b4 9f       	mul	r27, r20
    1f60:	90 0d       	add	r25, r0
    1f62:	a4 9f       	mul	r26, r20
    1f64:	80 0d       	add	r24, r0
    1f66:	91 1d       	adc	r25, r1
    1f68:	11 24       	eor	r1, r1
    1f6a:	08 95       	ret

00001f6c <__mulshisi3>:
    1f6c:	b7 ff       	sbrs	r27, 7
    1f6e:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__muluhisi3>

00001f72 <__mulohisi3>:
    1f72:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__muluhisi3>
    1f76:	82 1b       	sub	r24, r18
    1f78:	93 0b       	sbc	r25, r19
    1f7a:	08 95       	ret

00001f7c <__muldi3>:
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	1f 93       	push	r17
    1f82:	0f 93       	push	r16
    1f84:	9a 9d       	mul	r25, r10
    1f86:	f0 2d       	mov	r31, r0
    1f88:	21 9f       	mul	r18, r17
    1f8a:	f0 0d       	add	r31, r0
    1f8c:	8b 9d       	mul	r24, r11
    1f8e:	f0 0d       	add	r31, r0
    1f90:	8a 9d       	mul	r24, r10
    1f92:	e0 2d       	mov	r30, r0
    1f94:	f1 0d       	add	r31, r1
    1f96:	03 9f       	mul	r16, r19
    1f98:	f0 0d       	add	r31, r0
    1f9a:	02 9f       	mul	r16, r18
    1f9c:	e0 0d       	add	r30, r0
    1f9e:	f1 1d       	adc	r31, r1
    1fa0:	4e 9d       	mul	r20, r14
    1fa2:	e0 0d       	add	r30, r0
    1fa4:	f1 1d       	adc	r31, r1
    1fa6:	5e 9d       	mul	r21, r14
    1fa8:	f0 0d       	add	r31, r0
    1faa:	4f 9d       	mul	r20, r15
    1fac:	f0 0d       	add	r31, r0
    1fae:	7f 93       	push	r23
    1fb0:	6f 93       	push	r22
    1fb2:	bf 92       	push	r11
    1fb4:	af 92       	push	r10
    1fb6:	5f 93       	push	r21
    1fb8:	4f 93       	push	r20
    1fba:	d5 01       	movw	r26, r10
    1fbc:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__umulhisi3>
    1fc0:	8b 01       	movw	r16, r22
    1fc2:	ac 01       	movw	r20, r24
    1fc4:	d7 01       	movw	r26, r14
    1fc6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__umulhisi3>
    1fca:	eb 01       	movw	r28, r22
    1fcc:	e8 0f       	add	r30, r24
    1fce:	f9 1f       	adc	r31, r25
    1fd0:	d6 01       	movw	r26, r12
    1fd2:	0e 94 0e 10 	call	0x201c	; 0x201c <__muldi3_6>
    1fd6:	2f 91       	pop	r18
    1fd8:	3f 91       	pop	r19
    1fda:	d6 01       	movw	r26, r12
    1fdc:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__umulhisi3>
    1fe0:	c6 0f       	add	r28, r22
    1fe2:	d7 1f       	adc	r29, r23
    1fe4:	e8 1f       	adc	r30, r24
    1fe6:	f9 1f       	adc	r31, r25
    1fe8:	af 91       	pop	r26
    1fea:	bf 91       	pop	r27
    1fec:	0e 94 0e 10 	call	0x201c	; 0x201c <__muldi3_6>
    1ff0:	2f 91       	pop	r18
    1ff2:	3f 91       	pop	r19
    1ff4:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__umulhisi3>
    1ff8:	c6 0f       	add	r28, r22
    1ffa:	d7 1f       	adc	r29, r23
    1ffc:	e8 1f       	adc	r30, r24
    1ffe:	f9 1f       	adc	r31, r25
    2000:	d6 01       	movw	r26, r12
    2002:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__umulhisi3>
    2006:	e6 0f       	add	r30, r22
    2008:	f7 1f       	adc	r31, r23
    200a:	98 01       	movw	r18, r16
    200c:	be 01       	movw	r22, r28
    200e:	cf 01       	movw	r24, r30
    2010:	11 24       	eor	r1, r1
    2012:	0f 91       	pop	r16
    2014:	1f 91       	pop	r17
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <__muldi3_6>:
    201c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__umulhisi3>
    2020:	46 0f       	add	r20, r22
    2022:	57 1f       	adc	r21, r23
    2024:	c8 1f       	adc	r28, r24
    2026:	d9 1f       	adc	r29, r25
    2028:	08 f4       	brcc	.+2      	; 0x202c <__muldi3_6+0x10>
    202a:	31 96       	adiw	r30, 0x01	; 1
    202c:	08 95       	ret

0000202e <__moddi3>:
    202e:	68 94       	set
    2030:	01 c0       	rjmp	.+2      	; 0x2034 <__divdi3_moddi3>

00002032 <__divdi3>:
    2032:	e8 94       	clt

00002034 <__divdi3_moddi3>:
    2034:	f9 2f       	mov	r31, r25
    2036:	f1 2b       	or	r31, r17
    2038:	12 f0       	brmi	.+4      	; 0x203e <__divdi3_moddi3+0xa>
    203a:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__udivdi3_umoddi3>
    203e:	a0 e0       	ldi	r26, 0x00	; 0
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e5 e2       	ldi	r30, 0x25	; 37
    2044:	f0 e1       	ldi	r31, 0x10	; 16
    2046:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__prologue_saves__+0xc>
    204a:	09 2e       	mov	r0, r25
    204c:	05 94       	asr	r0
    204e:	22 f4       	brpl	.+8      	; 0x2058 <__divdi3_moddi3+0x24>
    2050:	0e 94 a7 10 	call	0x214e	; 0x214e <__negdi2>
    2054:	11 23       	and	r17, r17
    2056:	92 f4       	brpl	.+36     	; 0x207c <__divdi3_moddi3+0x48>
    2058:	f0 e8       	ldi	r31, 0x80	; 128
    205a:	0f 26       	eor	r0, r31
    205c:	ff ef       	ldi	r31, 0xFF	; 255
    205e:	e0 94       	com	r14
    2060:	f0 94       	com	r15
    2062:	00 95       	com	r16
    2064:	10 95       	com	r17
    2066:	b0 94       	com	r11
    2068:	c0 94       	com	r12
    206a:	d0 94       	com	r13
    206c:	a1 94       	neg	r10
    206e:	bf 0a       	sbc	r11, r31
    2070:	cf 0a       	sbc	r12, r31
    2072:	df 0a       	sbc	r13, r31
    2074:	ef 0a       	sbc	r14, r31
    2076:	ff 0a       	sbc	r15, r31
    2078:	0f 0b       	sbc	r16, r31
    207a:	1f 0b       	sbc	r17, r31
    207c:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmod64>
    2080:	07 fc       	sbrc	r0, 7
    2082:	0e 94 a7 10 	call	0x214e	; 0x214e <__negdi2>
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	ec e0       	ldi	r30, 0x0C	; 12
    208c:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__epilogue_restores__+0xc>

00002090 <__umoddi3>:
    2090:	68 94       	set
    2092:	01 c0       	rjmp	.+2      	; 0x2096 <__udivdi3_umoddi3>

00002094 <__udivdi3>:
    2094:	e8 94       	clt

00002096 <__udivdi3_umoddi3>:
    2096:	8f 92       	push	r8
    2098:	9f 92       	push	r9
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
    209e:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmod64>
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	9f 90       	pop	r9
    20a8:	8f 90       	pop	r8
    20aa:	08 95       	ret

000020ac <__udivmod64>:
    20ac:	88 24       	eor	r8, r8
    20ae:	99 24       	eor	r9, r9
    20b0:	f4 01       	movw	r30, r8
    20b2:	e4 01       	movw	r28, r8
    20b4:	b0 e4       	ldi	r27, 0x40	; 64
    20b6:	9f 93       	push	r25
    20b8:	aa 27       	eor	r26, r26
    20ba:	9a 15       	cp	r25, r10
    20bc:	8b 04       	cpc	r8, r11
    20be:	9c 04       	cpc	r9, r12
    20c0:	ed 05       	cpc	r30, r13
    20c2:	fe 05       	cpc	r31, r14
    20c4:	cf 05       	cpc	r28, r15
    20c6:	d0 07       	cpc	r29, r16
    20c8:	a1 07       	cpc	r26, r17
    20ca:	98 f4       	brcc	.+38     	; 0x20f2 <__udivmod64+0x46>
    20cc:	ad 2f       	mov	r26, r29
    20ce:	dc 2f       	mov	r29, r28
    20d0:	cf 2f       	mov	r28, r31
    20d2:	fe 2f       	mov	r31, r30
    20d4:	e9 2d       	mov	r30, r9
    20d6:	98 2c       	mov	r9, r8
    20d8:	89 2e       	mov	r8, r25
    20da:	98 2f       	mov	r25, r24
    20dc:	87 2f       	mov	r24, r23
    20de:	76 2f       	mov	r23, r22
    20e0:	65 2f       	mov	r22, r21
    20e2:	54 2f       	mov	r21, r20
    20e4:	43 2f       	mov	r20, r19
    20e6:	32 2f       	mov	r19, r18
    20e8:	22 27       	eor	r18, r18
    20ea:	b8 50       	subi	r27, 0x08	; 8
    20ec:	31 f7       	brne	.-52     	; 0x20ba <__udivmod64+0xe>
    20ee:	bf 91       	pop	r27
    20f0:	27 c0       	rjmp	.+78     	; 0x2140 <__udivmod64+0x94>
    20f2:	1b 2e       	mov	r1, r27
    20f4:	bf 91       	pop	r27
    20f6:	bb 27       	eor	r27, r27
    20f8:	22 0f       	add	r18, r18
    20fa:	33 1f       	adc	r19, r19
    20fc:	44 1f       	adc	r20, r20
    20fe:	55 1f       	adc	r21, r21
    2100:	66 1f       	adc	r22, r22
    2102:	77 1f       	adc	r23, r23
    2104:	88 1f       	adc	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	88 1c       	adc	r8, r8
    210a:	99 1c       	adc	r9, r9
    210c:	ee 1f       	adc	r30, r30
    210e:	ff 1f       	adc	r31, r31
    2110:	cc 1f       	adc	r28, r28
    2112:	dd 1f       	adc	r29, r29
    2114:	aa 1f       	adc	r26, r26
    2116:	bb 1f       	adc	r27, r27
    2118:	8a 14       	cp	r8, r10
    211a:	9b 04       	cpc	r9, r11
    211c:	ec 05       	cpc	r30, r12
    211e:	fd 05       	cpc	r31, r13
    2120:	ce 05       	cpc	r28, r14
    2122:	df 05       	cpc	r29, r15
    2124:	a0 07       	cpc	r26, r16
    2126:	b1 07       	cpc	r27, r17
    2128:	48 f0       	brcs	.+18     	; 0x213c <__udivmod64+0x90>
    212a:	8a 18       	sub	r8, r10
    212c:	9b 08       	sbc	r9, r11
    212e:	ec 09       	sbc	r30, r12
    2130:	fd 09       	sbc	r31, r13
    2132:	ce 09       	sbc	r28, r14
    2134:	df 09       	sbc	r29, r15
    2136:	a0 0b       	sbc	r26, r16
    2138:	b1 0b       	sbc	r27, r17
    213a:	21 60       	ori	r18, 0x01	; 1
    213c:	1a 94       	dec	r1
    213e:	e1 f6       	brne	.-72     	; 0x20f8 <__udivmod64+0x4c>
    2140:	2e f4       	brtc	.+10     	; 0x214c <__udivmod64+0xa0>
    2142:	94 01       	movw	r18, r8
    2144:	af 01       	movw	r20, r30
    2146:	be 01       	movw	r22, r28
    2148:	cd 01       	movw	r24, r26
    214a:	00 0c       	add	r0, r0
    214c:	08 95       	ret

0000214e <__negdi2>:
    214e:	60 95       	com	r22
    2150:	70 95       	com	r23
    2152:	80 95       	com	r24
    2154:	90 95       	com	r25
    2156:	30 95       	com	r19
    2158:	40 95       	com	r20
    215a:	50 95       	com	r21
    215c:	21 95       	neg	r18
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	4f 4f       	sbci	r20, 0xFF	; 255
    2162:	5f 4f       	sbci	r21, 0xFF	; 255
    2164:	6f 4f       	sbci	r22, 0xFF	; 255
    2166:	7f 4f       	sbci	r23, 0xFF	; 255
    2168:	8f 4f       	sbci	r24, 0xFF	; 255
    216a:	9f 4f       	sbci	r25, 0xFF	; 255
    216c:	08 95       	ret

0000216e <__prologue_saves__>:
    216e:	2f 92       	push	r2
    2170:	3f 92       	push	r3
    2172:	4f 92       	push	r4
    2174:	5f 92       	push	r5
    2176:	6f 92       	push	r6
    2178:	7f 92       	push	r7
    217a:	8f 92       	push	r8
    217c:	9f 92       	push	r9
    217e:	af 92       	push	r10
    2180:	bf 92       	push	r11
    2182:	cf 92       	push	r12
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	ca 1b       	sub	r28, r26
    2198:	db 0b       	sbc	r29, r27
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	09 94       	ijmp

000021a6 <__epilogue_restores__>:
    21a6:	2a 88       	ldd	r2, Y+18	; 0x12
    21a8:	39 88       	ldd	r3, Y+17	; 0x11
    21aa:	48 88       	ldd	r4, Y+16	; 0x10
    21ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    21ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    21b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    21b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    21b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    21b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    21b8:	b9 84       	ldd	r11, Y+9	; 0x09
    21ba:	c8 84       	ldd	r12, Y+8	; 0x08
    21bc:	df 80       	ldd	r13, Y+7	; 0x07
    21be:	ee 80       	ldd	r14, Y+6	; 0x06
    21c0:	fd 80       	ldd	r15, Y+5	; 0x05
    21c2:	0c 81       	ldd	r16, Y+4	; 0x04
    21c4:	1b 81       	ldd	r17, Y+3	; 0x03
    21c6:	aa 81       	ldd	r26, Y+2	; 0x02
    21c8:	b9 81       	ldd	r27, Y+1	; 0x01
    21ca:	ce 0f       	add	r28, r30
    21cc:	d1 1d       	adc	r29, r1
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	ed 01       	movw	r28, r26
    21da:	08 95       	ret

000021dc <__ashldi3>:
    21dc:	0f 93       	push	r16
    21de:	08 30       	cpi	r16, 0x08	; 8
    21e0:	90 f0       	brcs	.+36     	; 0x2206 <__ashldi3+0x2a>
    21e2:	98 2f       	mov	r25, r24
    21e4:	87 2f       	mov	r24, r23
    21e6:	76 2f       	mov	r23, r22
    21e8:	65 2f       	mov	r22, r21
    21ea:	54 2f       	mov	r21, r20
    21ec:	43 2f       	mov	r20, r19
    21ee:	32 2f       	mov	r19, r18
    21f0:	22 27       	eor	r18, r18
    21f2:	08 50       	subi	r16, 0x08	; 8
    21f4:	f4 cf       	rjmp	.-24     	; 0x21de <__ashldi3+0x2>
    21f6:	22 0f       	add	r18, r18
    21f8:	33 1f       	adc	r19, r19
    21fa:	44 1f       	adc	r20, r20
    21fc:	55 1f       	adc	r21, r21
    21fe:	66 1f       	adc	r22, r22
    2200:	77 1f       	adc	r23, r23
    2202:	88 1f       	adc	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	0a 95       	dec	r16
    2208:	b2 f7       	brpl	.-20     	; 0x21f6 <__ashldi3+0x1a>
    220a:	0f 91       	pop	r16
    220c:	08 95       	ret

0000220e <__ashrdi3>:
    220e:	97 fb       	bst	r25, 7
    2210:	10 f8       	bld	r1, 0

00002212 <__lshrdi3>:
    2212:	16 94       	lsr	r1
    2214:	00 08       	sbc	r0, r0
    2216:	0f 93       	push	r16
    2218:	08 30       	cpi	r16, 0x08	; 8
    221a:	98 f0       	brcs	.+38     	; 0x2242 <__lshrdi3+0x30>
    221c:	08 50       	subi	r16, 0x08	; 8
    221e:	23 2f       	mov	r18, r19
    2220:	34 2f       	mov	r19, r20
    2222:	45 2f       	mov	r20, r21
    2224:	56 2f       	mov	r21, r22
    2226:	67 2f       	mov	r22, r23
    2228:	78 2f       	mov	r23, r24
    222a:	89 2f       	mov	r24, r25
    222c:	90 2d       	mov	r25, r0
    222e:	f4 cf       	rjmp	.-24     	; 0x2218 <__lshrdi3+0x6>
    2230:	05 94       	asr	r0
    2232:	97 95       	ror	r25
    2234:	87 95       	ror	r24
    2236:	77 95       	ror	r23
    2238:	67 95       	ror	r22
    223a:	57 95       	ror	r21
    223c:	47 95       	ror	r20
    223e:	37 95       	ror	r19
    2240:	27 95       	ror	r18
    2242:	0a 95       	dec	r16
    2244:	aa f7       	brpl	.-22     	; 0x2230 <__lshrdi3+0x1e>
    2246:	0f 91       	pop	r16
    2248:	08 95       	ret

0000224a <__adddi3>:
    224a:	2a 0d       	add	r18, r10
    224c:	3b 1d       	adc	r19, r11
    224e:	4c 1d       	adc	r20, r12
    2250:	5d 1d       	adc	r21, r13
    2252:	6e 1d       	adc	r22, r14
    2254:	7f 1d       	adc	r23, r15
    2256:	80 1f       	adc	r24, r16
    2258:	91 1f       	adc	r25, r17
    225a:	08 95       	ret

0000225c <__adddi3_s8>:
    225c:	00 24       	eor	r0, r0
    225e:	a7 fd       	sbrc	r26, 7
    2260:	00 94       	com	r0
    2262:	2a 0f       	add	r18, r26
    2264:	30 1d       	adc	r19, r0
    2266:	40 1d       	adc	r20, r0
    2268:	50 1d       	adc	r21, r0
    226a:	60 1d       	adc	r22, r0
    226c:	70 1d       	adc	r23, r0
    226e:	80 1d       	adc	r24, r0
    2270:	90 1d       	adc	r25, r0
    2272:	08 95       	ret

00002274 <__subdi3>:
    2274:	2a 19       	sub	r18, r10
    2276:	3b 09       	sbc	r19, r11
    2278:	4c 09       	sbc	r20, r12
    227a:	5d 09       	sbc	r21, r13
    227c:	6e 09       	sbc	r22, r14
    227e:	7f 09       	sbc	r23, r15
    2280:	80 0b       	sbc	r24, r16
    2282:	91 0b       	sbc	r25, r17
    2284:	08 95       	ret

00002286 <__cmpdi2_s8>:
    2286:	00 24       	eor	r0, r0
    2288:	a7 fd       	sbrc	r26, 7
    228a:	00 94       	com	r0
    228c:	2a 17       	cp	r18, r26
    228e:	30 05       	cpc	r19, r0
    2290:	40 05       	cpc	r20, r0
    2292:	50 05       	cpc	r21, r0
    2294:	60 05       	cpc	r22, r0
    2296:	70 05       	cpc	r23, r0
    2298:	80 05       	cpc	r24, r0
    229a:	90 05       	cpc	r25, r0
    229c:	08 95       	ret

0000229e <__udivmodhi4>:
    229e:	aa 1b       	sub	r26, r26
    22a0:	bb 1b       	sub	r27, r27
    22a2:	51 e1       	ldi	r21, 0x11	; 17
    22a4:	07 c0       	rjmp	.+14     	; 0x22b4 <__udivmodhi4_ep>

000022a6 <__udivmodhi4_loop>:
    22a6:	aa 1f       	adc	r26, r26
    22a8:	bb 1f       	adc	r27, r27
    22aa:	a6 17       	cp	r26, r22
    22ac:	b7 07       	cpc	r27, r23
    22ae:	10 f0       	brcs	.+4      	; 0x22b4 <__udivmodhi4_ep>
    22b0:	a6 1b       	sub	r26, r22
    22b2:	b7 0b       	sbc	r27, r23

000022b4 <__udivmodhi4_ep>:
    22b4:	88 1f       	adc	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	5a 95       	dec	r21
    22ba:	a9 f7       	brne	.-22     	; 0x22a6 <__udivmodhi4_loop>
    22bc:	80 95       	com	r24
    22be:	90 95       	com	r25
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	08 95       	ret

000022c6 <__umulhisi3>:
    22c6:	a2 9f       	mul	r26, r18
    22c8:	b0 01       	movw	r22, r0
    22ca:	b3 9f       	mul	r27, r19
    22cc:	c0 01       	movw	r24, r0
    22ce:	a3 9f       	mul	r26, r19
    22d0:	70 0d       	add	r23, r0
    22d2:	81 1d       	adc	r24, r1
    22d4:	11 24       	eor	r1, r1
    22d6:	91 1d       	adc	r25, r1
    22d8:	b2 9f       	mul	r27, r18
    22da:	70 0d       	add	r23, r0
    22dc:	81 1d       	adc	r24, r1
    22de:	11 24       	eor	r1, r1
    22e0:	91 1d       	adc	r25, r1
    22e2:	08 95       	ret

000022e4 <vsnprintf>:
    22e4:	ae e0       	ldi	r26, 0x0E	; 14
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e8 e7       	ldi	r30, 0x78	; 120
    22ea:	f1 e1       	ldi	r31, 0x11	; 17
    22ec:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__prologue_saves__+0x1c>
    22f0:	8c 01       	movw	r16, r24
    22f2:	fa 01       	movw	r30, r20
    22f4:	86 e0       	ldi	r24, 0x06	; 6
    22f6:	8c 83       	std	Y+4, r24	; 0x04
    22f8:	1a 83       	std	Y+2, r17	; 0x02
    22fa:	09 83       	std	Y+1, r16	; 0x01
    22fc:	77 ff       	sbrs	r23, 7
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <vsnprintf+0x20>
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	70 e8       	ldi	r23, 0x80	; 128
    2304:	cb 01       	movw	r24, r22
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
    230c:	a9 01       	movw	r20, r18
    230e:	bf 01       	movw	r22, r30
    2310:	ce 01       	movw	r24, r28
    2312:	01 96       	adiw	r24, 0x01	; 1
    2314:	0e 94 9e 11 	call	0x233c	; 0x233c <vfprintf>
    2318:	4d 81       	ldd	r20, Y+5	; 0x05
    231a:	5e 81       	ldd	r21, Y+6	; 0x06
    231c:	57 fd       	sbrc	r21, 7
    231e:	0a c0       	rjmp	.+20     	; 0x2334 <vsnprintf+0x50>
    2320:	2f 81       	ldd	r18, Y+7	; 0x07
    2322:	38 85       	ldd	r19, Y+8	; 0x08
    2324:	42 17       	cp	r20, r18
    2326:	53 07       	cpc	r21, r19
    2328:	0c f4       	brge	.+2      	; 0x232c <vsnprintf+0x48>
    232a:	9a 01       	movw	r18, r20
    232c:	f8 01       	movw	r30, r16
    232e:	e2 0f       	add	r30, r18
    2330:	f3 1f       	adc	r31, r19
    2332:	10 82       	st	Z, r1
    2334:	2e 96       	adiw	r28, 0x0e	; 14
    2336:	e4 e0       	ldi	r30, 0x04	; 4
    2338:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__epilogue_restores__+0x1c>

0000233c <vfprintf>:
    233c:	ab e0       	ldi	r26, 0x0B	; 11
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e4 ea       	ldi	r30, 0xA4	; 164
    2342:	f1 e1       	ldi	r31, 0x11	; 17
    2344:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__prologue_saves__>
    2348:	6c 01       	movw	r12, r24
    234a:	7b 01       	movw	r14, r22
    234c:	8a 01       	movw	r16, r20
    234e:	fc 01       	movw	r30, r24
    2350:	17 82       	std	Z+7, r1	; 0x07
    2352:	16 82       	std	Z+6, r1	; 0x06
    2354:	83 81       	ldd	r24, Z+3	; 0x03
    2356:	81 ff       	sbrs	r24, 1
    2358:	cc c1       	rjmp	.+920    	; 0x26f2 <vfprintf+0x3b6>
    235a:	ce 01       	movw	r24, r28
    235c:	01 96       	adiw	r24, 0x01	; 1
    235e:	3c 01       	movw	r6, r24
    2360:	f6 01       	movw	r30, r12
    2362:	93 81       	ldd	r25, Z+3	; 0x03
    2364:	f7 01       	movw	r30, r14
    2366:	93 fd       	sbrc	r25, 3
    2368:	85 91       	lpm	r24, Z+
    236a:	93 ff       	sbrs	r25, 3
    236c:	81 91       	ld	r24, Z+
    236e:	7f 01       	movw	r14, r30
    2370:	88 23       	and	r24, r24
    2372:	09 f4       	brne	.+2      	; 0x2376 <vfprintf+0x3a>
    2374:	ba c1       	rjmp	.+884    	; 0x26ea <vfprintf+0x3ae>
    2376:	85 32       	cpi	r24, 0x25	; 37
    2378:	39 f4       	brne	.+14     	; 0x2388 <vfprintf+0x4c>
    237a:	93 fd       	sbrc	r25, 3
    237c:	85 91       	lpm	r24, Z+
    237e:	93 ff       	sbrs	r25, 3
    2380:	81 91       	ld	r24, Z+
    2382:	7f 01       	movw	r14, r30
    2384:	85 32       	cpi	r24, 0x25	; 37
    2386:	29 f4       	brne	.+10     	; 0x2392 <vfprintf+0x56>
    2388:	b6 01       	movw	r22, r12
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	0e 94 95 13 	call	0x272a	; 0x272a <fputc>
    2390:	e7 cf       	rjmp	.-50     	; 0x2360 <vfprintf+0x24>
    2392:	91 2c       	mov	r9, r1
    2394:	21 2c       	mov	r2, r1
    2396:	31 2c       	mov	r3, r1
    2398:	ff e1       	ldi	r31, 0x1F	; 31
    239a:	f3 15       	cp	r31, r3
    239c:	d8 f0       	brcs	.+54     	; 0x23d4 <vfprintf+0x98>
    239e:	8b 32       	cpi	r24, 0x2B	; 43
    23a0:	79 f0       	breq	.+30     	; 0x23c0 <vfprintf+0x84>
    23a2:	38 f4       	brcc	.+14     	; 0x23b2 <vfprintf+0x76>
    23a4:	80 32       	cpi	r24, 0x20	; 32
    23a6:	79 f0       	breq	.+30     	; 0x23c6 <vfprintf+0x8a>
    23a8:	83 32       	cpi	r24, 0x23	; 35
    23aa:	a1 f4       	brne	.+40     	; 0x23d4 <vfprintf+0x98>
    23ac:	23 2d       	mov	r18, r3
    23ae:	20 61       	ori	r18, 0x10	; 16
    23b0:	1d c0       	rjmp	.+58     	; 0x23ec <vfprintf+0xb0>
    23b2:	8d 32       	cpi	r24, 0x2D	; 45
    23b4:	61 f0       	breq	.+24     	; 0x23ce <vfprintf+0x92>
    23b6:	80 33       	cpi	r24, 0x30	; 48
    23b8:	69 f4       	brne	.+26     	; 0x23d4 <vfprintf+0x98>
    23ba:	23 2d       	mov	r18, r3
    23bc:	21 60       	ori	r18, 0x01	; 1
    23be:	16 c0       	rjmp	.+44     	; 0x23ec <vfprintf+0xb0>
    23c0:	83 2d       	mov	r24, r3
    23c2:	82 60       	ori	r24, 0x02	; 2
    23c4:	38 2e       	mov	r3, r24
    23c6:	e3 2d       	mov	r30, r3
    23c8:	e4 60       	ori	r30, 0x04	; 4
    23ca:	3e 2e       	mov	r3, r30
    23cc:	2a c0       	rjmp	.+84     	; 0x2422 <vfprintf+0xe6>
    23ce:	f3 2d       	mov	r31, r3
    23d0:	f8 60       	ori	r31, 0x08	; 8
    23d2:	1d c0       	rjmp	.+58     	; 0x240e <vfprintf+0xd2>
    23d4:	37 fc       	sbrc	r3, 7
    23d6:	2d c0       	rjmp	.+90     	; 0x2432 <vfprintf+0xf6>
    23d8:	20 ed       	ldi	r18, 0xD0	; 208
    23da:	28 0f       	add	r18, r24
    23dc:	2a 30       	cpi	r18, 0x0A	; 10
    23de:	40 f0       	brcs	.+16     	; 0x23f0 <vfprintf+0xb4>
    23e0:	8e 32       	cpi	r24, 0x2E	; 46
    23e2:	b9 f4       	brne	.+46     	; 0x2412 <vfprintf+0xd6>
    23e4:	36 fc       	sbrc	r3, 6
    23e6:	81 c1       	rjmp	.+770    	; 0x26ea <vfprintf+0x3ae>
    23e8:	23 2d       	mov	r18, r3
    23ea:	20 64       	ori	r18, 0x40	; 64
    23ec:	32 2e       	mov	r3, r18
    23ee:	19 c0       	rjmp	.+50     	; 0x2422 <vfprintf+0xe6>
    23f0:	36 fe       	sbrs	r3, 6
    23f2:	06 c0       	rjmp	.+12     	; 0x2400 <vfprintf+0xc4>
    23f4:	8a e0       	ldi	r24, 0x0A	; 10
    23f6:	98 9e       	mul	r9, r24
    23f8:	20 0d       	add	r18, r0
    23fa:	11 24       	eor	r1, r1
    23fc:	92 2e       	mov	r9, r18
    23fe:	11 c0       	rjmp	.+34     	; 0x2422 <vfprintf+0xe6>
    2400:	ea e0       	ldi	r30, 0x0A	; 10
    2402:	2e 9e       	mul	r2, r30
    2404:	20 0d       	add	r18, r0
    2406:	11 24       	eor	r1, r1
    2408:	22 2e       	mov	r2, r18
    240a:	f3 2d       	mov	r31, r3
    240c:	f0 62       	ori	r31, 0x20	; 32
    240e:	3f 2e       	mov	r3, r31
    2410:	08 c0       	rjmp	.+16     	; 0x2422 <vfprintf+0xe6>
    2412:	8c 36       	cpi	r24, 0x6C	; 108
    2414:	21 f4       	brne	.+8      	; 0x241e <vfprintf+0xe2>
    2416:	83 2d       	mov	r24, r3
    2418:	80 68       	ori	r24, 0x80	; 128
    241a:	38 2e       	mov	r3, r24
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <vfprintf+0xe6>
    241e:	88 36       	cpi	r24, 0x68	; 104
    2420:	41 f4       	brne	.+16     	; 0x2432 <vfprintf+0xf6>
    2422:	f7 01       	movw	r30, r14
    2424:	93 fd       	sbrc	r25, 3
    2426:	85 91       	lpm	r24, Z+
    2428:	93 ff       	sbrs	r25, 3
    242a:	81 91       	ld	r24, Z+
    242c:	7f 01       	movw	r14, r30
    242e:	81 11       	cpse	r24, r1
    2430:	b3 cf       	rjmp	.-154    	; 0x2398 <vfprintf+0x5c>
    2432:	98 2f       	mov	r25, r24
    2434:	9f 7d       	andi	r25, 0xDF	; 223
    2436:	95 54       	subi	r25, 0x45	; 69
    2438:	93 30       	cpi	r25, 0x03	; 3
    243a:	28 f4       	brcc	.+10     	; 0x2446 <vfprintf+0x10a>
    243c:	0c 5f       	subi	r16, 0xFC	; 252
    243e:	1f 4f       	sbci	r17, 0xFF	; 255
    2440:	9f e3       	ldi	r25, 0x3F	; 63
    2442:	99 83       	std	Y+1, r25	; 0x01
    2444:	0d c0       	rjmp	.+26     	; 0x2460 <vfprintf+0x124>
    2446:	83 36       	cpi	r24, 0x63	; 99
    2448:	31 f0       	breq	.+12     	; 0x2456 <vfprintf+0x11a>
    244a:	83 37       	cpi	r24, 0x73	; 115
    244c:	71 f0       	breq	.+28     	; 0x246a <vfprintf+0x12e>
    244e:	83 35       	cpi	r24, 0x53	; 83
    2450:	09 f0       	breq	.+2      	; 0x2454 <vfprintf+0x118>
    2452:	59 c0       	rjmp	.+178    	; 0x2506 <vfprintf+0x1ca>
    2454:	21 c0       	rjmp	.+66     	; 0x2498 <vfprintf+0x15c>
    2456:	f8 01       	movw	r30, r16
    2458:	80 81       	ld	r24, Z
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	0e 5f       	subi	r16, 0xFE	; 254
    245e:	1f 4f       	sbci	r17, 0xFF	; 255
    2460:	88 24       	eor	r8, r8
    2462:	83 94       	inc	r8
    2464:	91 2c       	mov	r9, r1
    2466:	53 01       	movw	r10, r6
    2468:	13 c0       	rjmp	.+38     	; 0x2490 <vfprintf+0x154>
    246a:	28 01       	movw	r4, r16
    246c:	f2 e0       	ldi	r31, 0x02	; 2
    246e:	4f 0e       	add	r4, r31
    2470:	51 1c       	adc	r5, r1
    2472:	f8 01       	movw	r30, r16
    2474:	a0 80       	ld	r10, Z
    2476:	b1 80       	ldd	r11, Z+1	; 0x01
    2478:	36 fe       	sbrs	r3, 6
    247a:	03 c0       	rjmp	.+6      	; 0x2482 <vfprintf+0x146>
    247c:	69 2d       	mov	r22, r9
    247e:	70 e0       	ldi	r23, 0x00	; 0
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <vfprintf+0x14a>
    2482:	6f ef       	ldi	r22, 0xFF	; 255
    2484:	7f ef       	ldi	r23, 0xFF	; 255
    2486:	c5 01       	movw	r24, r10
    2488:	0e 94 8a 13 	call	0x2714	; 0x2714 <strnlen>
    248c:	4c 01       	movw	r8, r24
    248e:	82 01       	movw	r16, r4
    2490:	f3 2d       	mov	r31, r3
    2492:	ff 77       	andi	r31, 0x7F	; 127
    2494:	3f 2e       	mov	r3, r31
    2496:	16 c0       	rjmp	.+44     	; 0x24c4 <vfprintf+0x188>
    2498:	28 01       	movw	r4, r16
    249a:	22 e0       	ldi	r18, 0x02	; 2
    249c:	42 0e       	add	r4, r18
    249e:	51 1c       	adc	r5, r1
    24a0:	f8 01       	movw	r30, r16
    24a2:	a0 80       	ld	r10, Z
    24a4:	b1 80       	ldd	r11, Z+1	; 0x01
    24a6:	36 fe       	sbrs	r3, 6
    24a8:	03 c0       	rjmp	.+6      	; 0x24b0 <vfprintf+0x174>
    24aa:	69 2d       	mov	r22, r9
    24ac:	70 e0       	ldi	r23, 0x00	; 0
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <vfprintf+0x178>
    24b0:	6f ef       	ldi	r22, 0xFF	; 255
    24b2:	7f ef       	ldi	r23, 0xFF	; 255
    24b4:	c5 01       	movw	r24, r10
    24b6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <strnlen_P>
    24ba:	4c 01       	movw	r8, r24
    24bc:	f3 2d       	mov	r31, r3
    24be:	f0 68       	ori	r31, 0x80	; 128
    24c0:	3f 2e       	mov	r3, r31
    24c2:	82 01       	movw	r16, r4
    24c4:	33 fc       	sbrc	r3, 3
    24c6:	1b c0       	rjmp	.+54     	; 0x24fe <vfprintf+0x1c2>
    24c8:	82 2d       	mov	r24, r2
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	88 16       	cp	r8, r24
    24ce:	99 06       	cpc	r9, r25
    24d0:	b0 f4       	brcc	.+44     	; 0x24fe <vfprintf+0x1c2>
    24d2:	b6 01       	movw	r22, r12
    24d4:	80 e2       	ldi	r24, 0x20	; 32
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	0e 94 95 13 	call	0x272a	; 0x272a <fputc>
    24dc:	2a 94       	dec	r2
    24de:	f4 cf       	rjmp	.-24     	; 0x24c8 <vfprintf+0x18c>
    24e0:	f5 01       	movw	r30, r10
    24e2:	37 fc       	sbrc	r3, 7
    24e4:	85 91       	lpm	r24, Z+
    24e6:	37 fe       	sbrs	r3, 7
    24e8:	81 91       	ld	r24, Z+
    24ea:	5f 01       	movw	r10, r30
    24ec:	b6 01       	movw	r22, r12
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 95 13 	call	0x272a	; 0x272a <fputc>
    24f4:	21 10       	cpse	r2, r1
    24f6:	2a 94       	dec	r2
    24f8:	21 e0       	ldi	r18, 0x01	; 1
    24fa:	82 1a       	sub	r8, r18
    24fc:	91 08       	sbc	r9, r1
    24fe:	81 14       	cp	r8, r1
    2500:	91 04       	cpc	r9, r1
    2502:	71 f7       	brne	.-36     	; 0x24e0 <vfprintf+0x1a4>
    2504:	e8 c0       	rjmp	.+464    	; 0x26d6 <vfprintf+0x39a>
    2506:	84 36       	cpi	r24, 0x64	; 100
    2508:	11 f0       	breq	.+4      	; 0x250e <vfprintf+0x1d2>
    250a:	89 36       	cpi	r24, 0x69	; 105
    250c:	41 f5       	brne	.+80     	; 0x255e <vfprintf+0x222>
    250e:	f8 01       	movw	r30, r16
    2510:	37 fe       	sbrs	r3, 7
    2512:	07 c0       	rjmp	.+14     	; 0x2522 <vfprintf+0x1e6>
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	0c 5f       	subi	r16, 0xFC	; 252
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	08 c0       	rjmp	.+16     	; 0x2532 <vfprintf+0x1f6>
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	07 2e       	mov	r0, r23
    2528:	00 0c       	add	r0, r0
    252a:	88 0b       	sbc	r24, r24
    252c:	99 0b       	sbc	r25, r25
    252e:	0e 5f       	subi	r16, 0xFE	; 254
    2530:	1f 4f       	sbci	r17, 0xFF	; 255
    2532:	f3 2d       	mov	r31, r3
    2534:	ff 76       	andi	r31, 0x6F	; 111
    2536:	3f 2e       	mov	r3, r31
    2538:	97 ff       	sbrs	r25, 7
    253a:	09 c0       	rjmp	.+18     	; 0x254e <vfprintf+0x212>
    253c:	90 95       	com	r25
    253e:	80 95       	com	r24
    2540:	70 95       	com	r23
    2542:	61 95       	neg	r22
    2544:	7f 4f       	sbci	r23, 0xFF	; 255
    2546:	8f 4f       	sbci	r24, 0xFF	; 255
    2548:	9f 4f       	sbci	r25, 0xFF	; 255
    254a:	f0 68       	ori	r31, 0x80	; 128
    254c:	3f 2e       	mov	r3, r31
    254e:	2a e0       	ldi	r18, 0x0A	; 10
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	a3 01       	movw	r20, r6
    2554:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__ultoa_invert>
    2558:	88 2e       	mov	r8, r24
    255a:	86 18       	sub	r8, r6
    255c:	45 c0       	rjmp	.+138    	; 0x25e8 <vfprintf+0x2ac>
    255e:	85 37       	cpi	r24, 0x75	; 117
    2560:	31 f4       	brne	.+12     	; 0x256e <vfprintf+0x232>
    2562:	23 2d       	mov	r18, r3
    2564:	2f 7e       	andi	r18, 0xEF	; 239
    2566:	b2 2e       	mov	r11, r18
    2568:	2a e0       	ldi	r18, 0x0A	; 10
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	25 c0       	rjmp	.+74     	; 0x25b8 <vfprintf+0x27c>
    256e:	93 2d       	mov	r25, r3
    2570:	99 7f       	andi	r25, 0xF9	; 249
    2572:	b9 2e       	mov	r11, r25
    2574:	8f 36       	cpi	r24, 0x6F	; 111
    2576:	c1 f0       	breq	.+48     	; 0x25a8 <vfprintf+0x26c>
    2578:	18 f4       	brcc	.+6      	; 0x2580 <vfprintf+0x244>
    257a:	88 35       	cpi	r24, 0x58	; 88
    257c:	79 f0       	breq	.+30     	; 0x259c <vfprintf+0x260>
    257e:	b5 c0       	rjmp	.+362    	; 0x26ea <vfprintf+0x3ae>
    2580:	80 37       	cpi	r24, 0x70	; 112
    2582:	19 f0       	breq	.+6      	; 0x258a <vfprintf+0x24e>
    2584:	88 37       	cpi	r24, 0x78	; 120
    2586:	21 f0       	breq	.+8      	; 0x2590 <vfprintf+0x254>
    2588:	b0 c0       	rjmp	.+352    	; 0x26ea <vfprintf+0x3ae>
    258a:	e9 2f       	mov	r30, r25
    258c:	e0 61       	ori	r30, 0x10	; 16
    258e:	be 2e       	mov	r11, r30
    2590:	b4 fe       	sbrs	r11, 4
    2592:	0d c0       	rjmp	.+26     	; 0x25ae <vfprintf+0x272>
    2594:	fb 2d       	mov	r31, r11
    2596:	f4 60       	ori	r31, 0x04	; 4
    2598:	bf 2e       	mov	r11, r31
    259a:	09 c0       	rjmp	.+18     	; 0x25ae <vfprintf+0x272>
    259c:	34 fe       	sbrs	r3, 4
    259e:	0a c0       	rjmp	.+20     	; 0x25b4 <vfprintf+0x278>
    25a0:	29 2f       	mov	r18, r25
    25a2:	26 60       	ori	r18, 0x06	; 6
    25a4:	b2 2e       	mov	r11, r18
    25a6:	06 c0       	rjmp	.+12     	; 0x25b4 <vfprintf+0x278>
    25a8:	28 e0       	ldi	r18, 0x08	; 8
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	05 c0       	rjmp	.+10     	; 0x25b8 <vfprintf+0x27c>
    25ae:	20 e1       	ldi	r18, 0x10	; 16
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <vfprintf+0x27c>
    25b4:	20 e1       	ldi	r18, 0x10	; 16
    25b6:	32 e0       	ldi	r19, 0x02	; 2
    25b8:	f8 01       	movw	r30, r16
    25ba:	b7 fe       	sbrs	r11, 7
    25bc:	07 c0       	rjmp	.+14     	; 0x25cc <vfprintf+0x290>
    25be:	60 81       	ld	r22, Z
    25c0:	71 81       	ldd	r23, Z+1	; 0x01
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	93 81       	ldd	r25, Z+3	; 0x03
    25c6:	0c 5f       	subi	r16, 0xFC	; 252
    25c8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ca:	06 c0       	rjmp	.+12     	; 0x25d8 <vfprintf+0x29c>
    25cc:	60 81       	ld	r22, Z
    25ce:	71 81       	ldd	r23, Z+1	; 0x01
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	0e 5f       	subi	r16, 0xFE	; 254
    25d6:	1f 4f       	sbci	r17, 0xFF	; 255
    25d8:	a3 01       	movw	r20, r6
    25da:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__ultoa_invert>
    25de:	88 2e       	mov	r8, r24
    25e0:	86 18       	sub	r8, r6
    25e2:	fb 2d       	mov	r31, r11
    25e4:	ff 77       	andi	r31, 0x7F	; 127
    25e6:	3f 2e       	mov	r3, r31
    25e8:	36 fe       	sbrs	r3, 6
    25ea:	0d c0       	rjmp	.+26     	; 0x2606 <vfprintf+0x2ca>
    25ec:	23 2d       	mov	r18, r3
    25ee:	2e 7f       	andi	r18, 0xFE	; 254
    25f0:	a2 2e       	mov	r10, r18
    25f2:	89 14       	cp	r8, r9
    25f4:	58 f4       	brcc	.+22     	; 0x260c <vfprintf+0x2d0>
    25f6:	34 fe       	sbrs	r3, 4
    25f8:	0b c0       	rjmp	.+22     	; 0x2610 <vfprintf+0x2d4>
    25fa:	32 fc       	sbrc	r3, 2
    25fc:	09 c0       	rjmp	.+18     	; 0x2610 <vfprintf+0x2d4>
    25fe:	83 2d       	mov	r24, r3
    2600:	8e 7e       	andi	r24, 0xEE	; 238
    2602:	a8 2e       	mov	r10, r24
    2604:	05 c0       	rjmp	.+10     	; 0x2610 <vfprintf+0x2d4>
    2606:	b8 2c       	mov	r11, r8
    2608:	a3 2c       	mov	r10, r3
    260a:	03 c0       	rjmp	.+6      	; 0x2612 <vfprintf+0x2d6>
    260c:	b8 2c       	mov	r11, r8
    260e:	01 c0       	rjmp	.+2      	; 0x2612 <vfprintf+0x2d6>
    2610:	b9 2c       	mov	r11, r9
    2612:	a4 fe       	sbrs	r10, 4
    2614:	0f c0       	rjmp	.+30     	; 0x2634 <vfprintf+0x2f8>
    2616:	fe 01       	movw	r30, r28
    2618:	e8 0d       	add	r30, r8
    261a:	f1 1d       	adc	r31, r1
    261c:	80 81       	ld	r24, Z
    261e:	80 33       	cpi	r24, 0x30	; 48
    2620:	21 f4       	brne	.+8      	; 0x262a <vfprintf+0x2ee>
    2622:	9a 2d       	mov	r25, r10
    2624:	99 7e       	andi	r25, 0xE9	; 233
    2626:	a9 2e       	mov	r10, r25
    2628:	09 c0       	rjmp	.+18     	; 0x263c <vfprintf+0x300>
    262a:	a2 fe       	sbrs	r10, 2
    262c:	06 c0       	rjmp	.+12     	; 0x263a <vfprintf+0x2fe>
    262e:	b3 94       	inc	r11
    2630:	b3 94       	inc	r11
    2632:	04 c0       	rjmp	.+8      	; 0x263c <vfprintf+0x300>
    2634:	8a 2d       	mov	r24, r10
    2636:	86 78       	andi	r24, 0x86	; 134
    2638:	09 f0       	breq	.+2      	; 0x263c <vfprintf+0x300>
    263a:	b3 94       	inc	r11
    263c:	a3 fc       	sbrc	r10, 3
    263e:	11 c0       	rjmp	.+34     	; 0x2662 <vfprintf+0x326>
    2640:	a0 fe       	sbrs	r10, 0
    2642:	06 c0       	rjmp	.+12     	; 0x2650 <vfprintf+0x314>
    2644:	b2 14       	cp	r11, r2
    2646:	88 f4       	brcc	.+34     	; 0x266a <vfprintf+0x32e>
    2648:	28 0c       	add	r2, r8
    264a:	92 2c       	mov	r9, r2
    264c:	9b 18       	sub	r9, r11
    264e:	0e c0       	rjmp	.+28     	; 0x266c <vfprintf+0x330>
    2650:	b2 14       	cp	r11, r2
    2652:	60 f4       	brcc	.+24     	; 0x266c <vfprintf+0x330>
    2654:	b6 01       	movw	r22, r12
    2656:	80 e2       	ldi	r24, 0x20	; 32
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 94 95 13 	call	0x272a	; 0x272a <fputc>
    265e:	b3 94       	inc	r11
    2660:	f7 cf       	rjmp	.-18     	; 0x2650 <vfprintf+0x314>
    2662:	b2 14       	cp	r11, r2
    2664:	18 f4       	brcc	.+6      	; 0x266c <vfprintf+0x330>
    2666:	2b 18       	sub	r2, r11
    2668:	02 c0       	rjmp	.+4      	; 0x266e <vfprintf+0x332>
    266a:	98 2c       	mov	r9, r8
    266c:	21 2c       	mov	r2, r1
    266e:	a4 fe       	sbrs	r10, 4
    2670:	10 c0       	rjmp	.+32     	; 0x2692 <vfprintf+0x356>
    2672:	b6 01       	movw	r22, r12
    2674:	80 e3       	ldi	r24, 0x30	; 48
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	0e 94 95 13 	call	0x272a	; 0x272a <fputc>
    267c:	a2 fe       	sbrs	r10, 2
    267e:	17 c0       	rjmp	.+46     	; 0x26ae <vfprintf+0x372>
    2680:	a1 fc       	sbrc	r10, 1
    2682:	03 c0       	rjmp	.+6      	; 0x268a <vfprintf+0x34e>
    2684:	88 e7       	ldi	r24, 0x78	; 120
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	02 c0       	rjmp	.+4      	; 0x268e <vfprintf+0x352>
    268a:	88 e5       	ldi	r24, 0x58	; 88
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	b6 01       	movw	r22, r12
    2690:	0c c0       	rjmp	.+24     	; 0x26aa <vfprintf+0x36e>
    2692:	8a 2d       	mov	r24, r10
    2694:	86 78       	andi	r24, 0x86	; 134
    2696:	59 f0       	breq	.+22     	; 0x26ae <vfprintf+0x372>
    2698:	a1 fe       	sbrs	r10, 1
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <vfprintf+0x364>
    269c:	8b e2       	ldi	r24, 0x2B	; 43
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <vfprintf+0x366>
    26a0:	80 e2       	ldi	r24, 0x20	; 32
    26a2:	a7 fc       	sbrc	r10, 7
    26a4:	8d e2       	ldi	r24, 0x2D	; 45
    26a6:	b6 01       	movw	r22, r12
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	0e 94 95 13 	call	0x272a	; 0x272a <fputc>
    26ae:	89 14       	cp	r8, r9
    26b0:	38 f4       	brcc	.+14     	; 0x26c0 <vfprintf+0x384>
    26b2:	b6 01       	movw	r22, r12
    26b4:	80 e3       	ldi	r24, 0x30	; 48
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	0e 94 95 13 	call	0x272a	; 0x272a <fputc>
    26bc:	9a 94       	dec	r9
    26be:	f7 cf       	rjmp	.-18     	; 0x26ae <vfprintf+0x372>
    26c0:	8a 94       	dec	r8
    26c2:	f3 01       	movw	r30, r6
    26c4:	e8 0d       	add	r30, r8
    26c6:	f1 1d       	adc	r31, r1
    26c8:	80 81       	ld	r24, Z
    26ca:	b6 01       	movw	r22, r12
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 94 95 13 	call	0x272a	; 0x272a <fputc>
    26d2:	81 10       	cpse	r8, r1
    26d4:	f5 cf       	rjmp	.-22     	; 0x26c0 <vfprintf+0x384>
    26d6:	22 20       	and	r2, r2
    26d8:	09 f4       	brne	.+2      	; 0x26dc <vfprintf+0x3a0>
    26da:	42 ce       	rjmp	.-892    	; 0x2360 <vfprintf+0x24>
    26dc:	b6 01       	movw	r22, r12
    26de:	80 e2       	ldi	r24, 0x20	; 32
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 95 13 	call	0x272a	; 0x272a <fputc>
    26e6:	2a 94       	dec	r2
    26e8:	f6 cf       	rjmp	.-20     	; 0x26d6 <vfprintf+0x39a>
    26ea:	f6 01       	movw	r30, r12
    26ec:	86 81       	ldd	r24, Z+6	; 0x06
    26ee:	97 81       	ldd	r25, Z+7	; 0x07
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <vfprintf+0x3ba>
    26f2:	8f ef       	ldi	r24, 0xFF	; 255
    26f4:	9f ef       	ldi	r25, 0xFF	; 255
    26f6:	2b 96       	adiw	r28, 0x0b	; 11
    26f8:	e2 e1       	ldi	r30, 0x12	; 18
    26fa:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__epilogue_restores__>

000026fe <strnlen_P>:
    26fe:	fc 01       	movw	r30, r24
    2700:	05 90       	lpm	r0, Z+
    2702:	61 50       	subi	r22, 0x01	; 1
    2704:	70 40       	sbci	r23, 0x00	; 0
    2706:	01 10       	cpse	r0, r1
    2708:	d8 f7       	brcc	.-10     	; 0x2700 <strnlen_P+0x2>
    270a:	80 95       	com	r24
    270c:	90 95       	com	r25
    270e:	8e 0f       	add	r24, r30
    2710:	9f 1f       	adc	r25, r31
    2712:	08 95       	ret

00002714 <strnlen>:
    2714:	fc 01       	movw	r30, r24
    2716:	61 50       	subi	r22, 0x01	; 1
    2718:	70 40       	sbci	r23, 0x00	; 0
    271a:	01 90       	ld	r0, Z+
    271c:	01 10       	cpse	r0, r1
    271e:	d8 f7       	brcc	.-10     	; 0x2716 <strnlen+0x2>
    2720:	80 95       	com	r24
    2722:	90 95       	com	r25
    2724:	8e 0f       	add	r24, r30
    2726:	9f 1f       	adc	r25, r31
    2728:	08 95       	ret

0000272a <fputc>:
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	fb 01       	movw	r30, r22
    2734:	23 81       	ldd	r18, Z+3	; 0x03
    2736:	21 fd       	sbrc	r18, 1
    2738:	03 c0       	rjmp	.+6      	; 0x2740 <fputc+0x16>
    273a:	8f ef       	ldi	r24, 0xFF	; 255
    273c:	9f ef       	ldi	r25, 0xFF	; 255
    273e:	2c c0       	rjmp	.+88     	; 0x2798 <fputc+0x6e>
    2740:	22 ff       	sbrs	r18, 2
    2742:	16 c0       	rjmp	.+44     	; 0x2770 <fputc+0x46>
    2744:	46 81       	ldd	r20, Z+6	; 0x06
    2746:	57 81       	ldd	r21, Z+7	; 0x07
    2748:	24 81       	ldd	r18, Z+4	; 0x04
    274a:	35 81       	ldd	r19, Z+5	; 0x05
    274c:	42 17       	cp	r20, r18
    274e:	53 07       	cpc	r21, r19
    2750:	44 f4       	brge	.+16     	; 0x2762 <fputc+0x38>
    2752:	a0 81       	ld	r26, Z
    2754:	b1 81       	ldd	r27, Z+1	; 0x01
    2756:	9d 01       	movw	r18, r26
    2758:	2f 5f       	subi	r18, 0xFF	; 255
    275a:	3f 4f       	sbci	r19, 0xFF	; 255
    275c:	31 83       	std	Z+1, r19	; 0x01
    275e:	20 83       	st	Z, r18
    2760:	8c 93       	st	X, r24
    2762:	26 81       	ldd	r18, Z+6	; 0x06
    2764:	37 81       	ldd	r19, Z+7	; 0x07
    2766:	2f 5f       	subi	r18, 0xFF	; 255
    2768:	3f 4f       	sbci	r19, 0xFF	; 255
    276a:	37 83       	std	Z+7, r19	; 0x07
    276c:	26 83       	std	Z+6, r18	; 0x06
    276e:	14 c0       	rjmp	.+40     	; 0x2798 <fputc+0x6e>
    2770:	8b 01       	movw	r16, r22
    2772:	ec 01       	movw	r28, r24
    2774:	fb 01       	movw	r30, r22
    2776:	00 84       	ldd	r0, Z+8	; 0x08
    2778:	f1 85       	ldd	r31, Z+9	; 0x09
    277a:	e0 2d       	mov	r30, r0
    277c:	09 95       	icall
    277e:	89 2b       	or	r24, r25
    2780:	e1 f6       	brne	.-72     	; 0x273a <fputc+0x10>
    2782:	d8 01       	movw	r26, r16
    2784:	16 96       	adiw	r26, 0x06	; 6
    2786:	8d 91       	ld	r24, X+
    2788:	9c 91       	ld	r25, X
    278a:	17 97       	sbiw	r26, 0x07	; 7
    278c:	01 96       	adiw	r24, 0x01	; 1
    278e:	17 96       	adiw	r26, 0x07	; 7
    2790:	9c 93       	st	X, r25
    2792:	8e 93       	st	-X, r24
    2794:	16 97       	sbiw	r26, 0x06	; 6
    2796:	ce 01       	movw	r24, r28
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	1f 91       	pop	r17
    279e:	0f 91       	pop	r16
    27a0:	08 95       	ret

000027a2 <__ultoa_invert>:
    27a2:	fa 01       	movw	r30, r20
    27a4:	aa 27       	eor	r26, r26
    27a6:	28 30       	cpi	r18, 0x08	; 8
    27a8:	51 f1       	breq	.+84     	; 0x27fe <__ultoa_invert+0x5c>
    27aa:	20 31       	cpi	r18, 0x10	; 16
    27ac:	81 f1       	breq	.+96     	; 0x280e <__ultoa_invert+0x6c>
    27ae:	e8 94       	clt
    27b0:	6f 93       	push	r22
    27b2:	6e 7f       	andi	r22, 0xFE	; 254
    27b4:	6e 5f       	subi	r22, 0xFE	; 254
    27b6:	7f 4f       	sbci	r23, 0xFF	; 255
    27b8:	8f 4f       	sbci	r24, 0xFF	; 255
    27ba:	9f 4f       	sbci	r25, 0xFF	; 255
    27bc:	af 4f       	sbci	r26, 0xFF	; 255
    27be:	b1 e0       	ldi	r27, 0x01	; 1
    27c0:	3e d0       	rcall	.+124    	; 0x283e <__ultoa_invert+0x9c>
    27c2:	b4 e0       	ldi	r27, 0x04	; 4
    27c4:	3c d0       	rcall	.+120    	; 0x283e <__ultoa_invert+0x9c>
    27c6:	67 0f       	add	r22, r23
    27c8:	78 1f       	adc	r23, r24
    27ca:	89 1f       	adc	r24, r25
    27cc:	9a 1f       	adc	r25, r26
    27ce:	a1 1d       	adc	r26, r1
    27d0:	68 0f       	add	r22, r24
    27d2:	79 1f       	adc	r23, r25
    27d4:	8a 1f       	adc	r24, r26
    27d6:	91 1d       	adc	r25, r1
    27d8:	a1 1d       	adc	r26, r1
    27da:	6a 0f       	add	r22, r26
    27dc:	71 1d       	adc	r23, r1
    27de:	81 1d       	adc	r24, r1
    27e0:	91 1d       	adc	r25, r1
    27e2:	a1 1d       	adc	r26, r1
    27e4:	20 d0       	rcall	.+64     	; 0x2826 <__ultoa_invert+0x84>
    27e6:	09 f4       	brne	.+2      	; 0x27ea <__ultoa_invert+0x48>
    27e8:	68 94       	set
    27ea:	3f 91       	pop	r19
    27ec:	2a e0       	ldi	r18, 0x0A	; 10
    27ee:	26 9f       	mul	r18, r22
    27f0:	11 24       	eor	r1, r1
    27f2:	30 19       	sub	r19, r0
    27f4:	30 5d       	subi	r19, 0xD0	; 208
    27f6:	31 93       	st	Z+, r19
    27f8:	de f6       	brtc	.-74     	; 0x27b0 <__ultoa_invert+0xe>
    27fa:	cf 01       	movw	r24, r30
    27fc:	08 95       	ret
    27fe:	46 2f       	mov	r20, r22
    2800:	47 70       	andi	r20, 0x07	; 7
    2802:	40 5d       	subi	r20, 0xD0	; 208
    2804:	41 93       	st	Z+, r20
    2806:	b3 e0       	ldi	r27, 0x03	; 3
    2808:	0f d0       	rcall	.+30     	; 0x2828 <__ultoa_invert+0x86>
    280a:	c9 f7       	brne	.-14     	; 0x27fe <__ultoa_invert+0x5c>
    280c:	f6 cf       	rjmp	.-20     	; 0x27fa <__ultoa_invert+0x58>
    280e:	46 2f       	mov	r20, r22
    2810:	4f 70       	andi	r20, 0x0F	; 15
    2812:	40 5d       	subi	r20, 0xD0	; 208
    2814:	4a 33       	cpi	r20, 0x3A	; 58
    2816:	18 f0       	brcs	.+6      	; 0x281e <__ultoa_invert+0x7c>
    2818:	49 5d       	subi	r20, 0xD9	; 217
    281a:	31 fd       	sbrc	r19, 1
    281c:	40 52       	subi	r20, 0x20	; 32
    281e:	41 93       	st	Z+, r20
    2820:	02 d0       	rcall	.+4      	; 0x2826 <__ultoa_invert+0x84>
    2822:	a9 f7       	brne	.-22     	; 0x280e <__ultoa_invert+0x6c>
    2824:	ea cf       	rjmp	.-44     	; 0x27fa <__ultoa_invert+0x58>
    2826:	b4 e0       	ldi	r27, 0x04	; 4
    2828:	a6 95       	lsr	r26
    282a:	97 95       	ror	r25
    282c:	87 95       	ror	r24
    282e:	77 95       	ror	r23
    2830:	67 95       	ror	r22
    2832:	ba 95       	dec	r27
    2834:	c9 f7       	brne	.-14     	; 0x2828 <__ultoa_invert+0x86>
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	61 05       	cpc	r22, r1
    283a:	71 05       	cpc	r23, r1
    283c:	08 95       	ret
    283e:	9b 01       	movw	r18, r22
    2840:	ac 01       	movw	r20, r24
    2842:	0a 2e       	mov	r0, r26
    2844:	06 94       	lsr	r0
    2846:	57 95       	ror	r21
    2848:	47 95       	ror	r20
    284a:	37 95       	ror	r19
    284c:	27 95       	ror	r18
    284e:	ba 95       	dec	r27
    2850:	c9 f7       	brne	.-14     	; 0x2844 <__ultoa_invert+0xa2>
    2852:	62 0f       	add	r22, r18
    2854:	73 1f       	adc	r23, r19
    2856:	84 1f       	adc	r24, r20
    2858:	95 1f       	adc	r25, r21
    285a:	a0 1d       	adc	r26, r0
    285c:	08 95       	ret

0000285e <_exit>:
    285e:	f8 94       	cli

00002860 <__stop_program>:
    2860:	ff cf       	rjmp	.-2      	; 0x2860 <__stop_program>
